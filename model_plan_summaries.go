/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the PlanSummaries type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanSummaries{}

// PlanSummaries struct for PlanSummaries
type PlanSummaries struct {
	Summaries []PlanSummary `json:"summaries"`
}

type _PlanSummaries PlanSummaries

// NewPlanSummaries instantiates a new PlanSummaries object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanSummaries(summaries []PlanSummary) *PlanSummaries {
	this := PlanSummaries{}
	this.Summaries = summaries
	return &this
}

// NewPlanSummariesWithDefaults instantiates a new PlanSummaries object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanSummariesWithDefaults() *PlanSummaries {
	this := PlanSummaries{}
	return &this
}

// GetSummaries returns the Summaries field value
func (o *PlanSummaries) GetSummaries() []PlanSummary {
	if o == nil {
		var ret []PlanSummary
		return ret
	}

	return o.Summaries
}

// GetSummariesOk returns a tuple with the Summaries field value
// and a boolean to check if the value has been set.
func (o *PlanSummaries) GetSummariesOk() ([]PlanSummary, bool) {
	if o == nil {
		return nil, false
	}
	return o.Summaries, true
}

// SetSummaries sets field value
func (o *PlanSummaries) SetSummaries(v []PlanSummary) {
	o.Summaries = v
}

func (o PlanSummaries) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanSummaries) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["summaries"] = o.Summaries
	return toSerialize, nil
}

func (o *PlanSummaries) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"summaries",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanSummaries := _PlanSummaries{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlanSummaries)

	if err != nil {
		return err
	}

	*o = PlanSummaries(varPlanSummaries)

	return err
}

type NullablePlanSummaries struct {
	value *PlanSummaries
	isSet bool
}

func (v NullablePlanSummaries) Get() *PlanSummaries {
	return v.value
}

func (v *NullablePlanSummaries) Set(val *PlanSummaries) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanSummaries) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanSummaries) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanSummaries(val *PlanSummaries) *NullablePlanSummaries {
	return &NullablePlanSummaries{value: val, isSet: true}
}

func (v NullablePlanSummaries) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanSummaries) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


