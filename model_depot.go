/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.17
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Depot type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Depot{}

// Depot A depot where pickup orders can be delivered to or delivery orders can be picked up from. When stopping at a depot, all pickup orders present in the vehicle are unloaded first. Afterwards delivery orders can be loaded in the vehicle, which must be delivered before stopping at the next depot. When providing pickup or delivery orders, at least one depot should be specified. When providing pickup-delivery orders, no tasks happen at the depot and depots must be omitted.
type Depot struct {
	// A unique identifier of the depot.
	Id string `json:"id" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The unique identifier of the location where the depot is situated.
	LocationId string `json:"locationId" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// A list of unique identifiers of the time slots of the depot location that can be used to execute tasks at this depot. When empty all time slots can be used. If more than 50 time slots are specified for the depot location, the list must not be empty.
	TimeSlotIds []string `json:"timeSlotIds,omitempty"`
	// A list of categories the depot belongs to that can be used to describe constraints or rules.
	Categories []string `json:"categories,omitempty"`
}

type _Depot Depot

// NewDepot instantiates a new Depot object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDepot(id string, locationId string) *Depot {
	this := Depot{}
	this.Id = id
	this.LocationId = locationId
	return &this
}

// NewDepotWithDefaults instantiates a new Depot object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDepotWithDefaults() *Depot {
	this := Depot{}
	return &this
}

// GetId returns the Id field value
func (o *Depot) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Depot) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Depot) SetId(v string) {
	o.Id = v
}

// GetLocationId returns the LocationId field value
func (o *Depot) GetLocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value
// and a boolean to check if the value has been set.
func (o *Depot) GetLocationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocationId, true
}

// SetLocationId sets field value
func (o *Depot) SetLocationId(v string) {
	o.LocationId = v
}

// GetTimeSlotIds returns the TimeSlotIds field value if set, zero value otherwise.
func (o *Depot) GetTimeSlotIds() []string {
	if o == nil || IsNil(o.TimeSlotIds) {
		var ret []string
		return ret
	}
	return o.TimeSlotIds
}

// GetTimeSlotIdsOk returns a tuple with the TimeSlotIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Depot) GetTimeSlotIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TimeSlotIds) {
		return nil, false
	}
	return o.TimeSlotIds, true
}

// HasTimeSlotIds returns a boolean if a field has been set.
func (o *Depot) HasTimeSlotIds() bool {
	if o != nil && !IsNil(o.TimeSlotIds) {
		return true
	}

	return false
}

// SetTimeSlotIds gets a reference to the given []string and assigns it to the TimeSlotIds field.
func (o *Depot) SetTimeSlotIds(v []string) {
	o.TimeSlotIds = v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *Depot) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Depot) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *Depot) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *Depot) SetCategories(v []string) {
	o.Categories = v
}

func (o Depot) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Depot) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["locationId"] = o.LocationId
	if !IsNil(o.TimeSlotIds) {
		toSerialize["timeSlotIds"] = o.TimeSlotIds
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	return toSerialize, nil
}

func (o *Depot) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"locationId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDepot := _Depot{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDepot)

	if err != nil {
		return err
	}

	*o = Depot(varDepot)

	return err
}

type NullableDepot struct {
	value *Depot
	isSet bool
}

func (v NullableDepot) Get() *Depot {
	return v.value
}

func (v *NullableDepot) Set(val *Depot) {
	v.value = val
	v.isSet = true
}

func (v NullableDepot) IsSet() bool {
	return v.isSet
}

func (v *NullableDepot) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepot(val *Depot) *NullableDepot {
	return &NullableDepot{value: val, isSet: true}
}

func (v NullableDepot) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepot) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


