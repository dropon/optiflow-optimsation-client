/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VehicleCosts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VehicleCosts{}

// VehicleCosts Defines the costs for using the vehicle to execute tasks.
type VehicleCosts struct {
	// Specifies the cost for every hour the vehicle is used.
	PerHour float64 `json:"perHour"`
	// Specifies the cost for every kilometer driven with the vehicle.
	PerKilometer float64 `json:"perKilometer"`
	// Specifies the cost for every stop on the route of the vehicle.
	PerStop *float64 `json:"perStop,omitempty"`
	// Specifies the fixed cost for assigning a route to the vehicle.
	Fixed *float64 `json:"fixed,omitempty"`
	// A list of overtime costs that describe an increasing cost if the route duration exceeds a threshold. For each exceeded threshold, the additional cost for the extra hours contributes to the total cost of the route.
	Overtimes []OvertimeCost `json:"overtimes,omitempty"`
	// A list of overdistance costs that describe an increasing cost if the total distance of a route exceeds a threshold. For each exceeded threshold, the additional cost for the extra kilometers contributes to the total cost of the route.
	Overdistances []OverdistanceCost `json:"overdistances,omitempty"`
	// A list of overstop costs that describe an increasing cost if the number of stops of a route exceeds a threshold. For each exceeded threshold, the additional cost for the extra stops contributes to the total cost of the route.
	Overstops []OverstopCost `json:"overstops,omitempty"`
	// Specifies a list of repositioning effort costs that describe an increasing cost if the route's repositioning effort exceeds a threshold.  When two orders are loaded into the same compartment and delivered in the same order, we refer to them as a non-last-in-first-out (non-LIFO) pair. Any non-LIFO pair of orders requires repositioning in the vehicle, as the last picked-up order obstructs the first order that needs to be delivered. The effort involved in this repositioning is the minimum effort required for the two orders. The total repositioning effort for the route is the sum of the repositioning efforts for all non-LIFO pairs of orders.
	RepositioningEfforts []RepositioningEffortCost `json:"repositioningEfforts,omitempty"`
}

type _VehicleCosts VehicleCosts

// NewVehicleCosts instantiates a new VehicleCosts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicleCosts(perHour float64, perKilometer float64) *VehicleCosts {
	this := VehicleCosts{}
	this.PerHour = perHour
	this.PerKilometer = perKilometer
	var fixed float64 = 0
	this.Fixed = &fixed
	return &this
}

// NewVehicleCostsWithDefaults instantiates a new VehicleCosts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleCostsWithDefaults() *VehicleCosts {
	this := VehicleCosts{}
	var fixed float64 = 0
	this.Fixed = &fixed
	return &this
}

// GetPerHour returns the PerHour field value
func (o *VehicleCosts) GetPerHour() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.PerHour
}

// GetPerHourOk returns a tuple with the PerHour field value
// and a boolean to check if the value has been set.
func (o *VehicleCosts) GetPerHourOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerHour, true
}

// SetPerHour sets field value
func (o *VehicleCosts) SetPerHour(v float64) {
	o.PerHour = v
}

// GetPerKilometer returns the PerKilometer field value
func (o *VehicleCosts) GetPerKilometer() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.PerKilometer
}

// GetPerKilometerOk returns a tuple with the PerKilometer field value
// and a boolean to check if the value has been set.
func (o *VehicleCosts) GetPerKilometerOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerKilometer, true
}

// SetPerKilometer sets field value
func (o *VehicleCosts) SetPerKilometer(v float64) {
	o.PerKilometer = v
}

// GetPerStop returns the PerStop field value if set, zero value otherwise.
func (o *VehicleCosts) GetPerStop() float64 {
	if o == nil || IsNil(o.PerStop) {
		var ret float64
		return ret
	}
	return *o.PerStop
}

// GetPerStopOk returns a tuple with the PerStop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleCosts) GetPerStopOk() (*float64, bool) {
	if o == nil || IsNil(o.PerStop) {
		return nil, false
	}
	return o.PerStop, true
}

// HasPerStop returns a boolean if a field has been set.
func (o *VehicleCosts) HasPerStop() bool {
	if o != nil && !IsNil(o.PerStop) {
		return true
	}

	return false
}

// SetPerStop gets a reference to the given float64 and assigns it to the PerStop field.
func (o *VehicleCosts) SetPerStop(v float64) {
	o.PerStop = &v
}

// GetFixed returns the Fixed field value if set, zero value otherwise.
func (o *VehicleCosts) GetFixed() float64 {
	if o == nil || IsNil(o.Fixed) {
		var ret float64
		return ret
	}
	return *o.Fixed
}

// GetFixedOk returns a tuple with the Fixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleCosts) GetFixedOk() (*float64, bool) {
	if o == nil || IsNil(o.Fixed) {
		return nil, false
	}
	return o.Fixed, true
}

// HasFixed returns a boolean if a field has been set.
func (o *VehicleCosts) HasFixed() bool {
	if o != nil && !IsNil(o.Fixed) {
		return true
	}

	return false
}

// SetFixed gets a reference to the given float64 and assigns it to the Fixed field.
func (o *VehicleCosts) SetFixed(v float64) {
	o.Fixed = &v
}

// GetOvertimes returns the Overtimes field value if set, zero value otherwise.
func (o *VehicleCosts) GetOvertimes() []OvertimeCost {
	if o == nil || IsNil(o.Overtimes) {
		var ret []OvertimeCost
		return ret
	}
	return o.Overtimes
}

// GetOvertimesOk returns a tuple with the Overtimes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleCosts) GetOvertimesOk() ([]OvertimeCost, bool) {
	if o == nil || IsNil(o.Overtimes) {
		return nil, false
	}
	return o.Overtimes, true
}

// HasOvertimes returns a boolean if a field has been set.
func (o *VehicleCosts) HasOvertimes() bool {
	if o != nil && !IsNil(o.Overtimes) {
		return true
	}

	return false
}

// SetOvertimes gets a reference to the given []OvertimeCost and assigns it to the Overtimes field.
func (o *VehicleCosts) SetOvertimes(v []OvertimeCost) {
	o.Overtimes = v
}

// GetOverdistances returns the Overdistances field value if set, zero value otherwise.
func (o *VehicleCosts) GetOverdistances() []OverdistanceCost {
	if o == nil || IsNil(o.Overdistances) {
		var ret []OverdistanceCost
		return ret
	}
	return o.Overdistances
}

// GetOverdistancesOk returns a tuple with the Overdistances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleCosts) GetOverdistancesOk() ([]OverdistanceCost, bool) {
	if o == nil || IsNil(o.Overdistances) {
		return nil, false
	}
	return o.Overdistances, true
}

// HasOverdistances returns a boolean if a field has been set.
func (o *VehicleCosts) HasOverdistances() bool {
	if o != nil && !IsNil(o.Overdistances) {
		return true
	}

	return false
}

// SetOverdistances gets a reference to the given []OverdistanceCost and assigns it to the Overdistances field.
func (o *VehicleCosts) SetOverdistances(v []OverdistanceCost) {
	o.Overdistances = v
}

// GetOverstops returns the Overstops field value if set, zero value otherwise.
func (o *VehicleCosts) GetOverstops() []OverstopCost {
	if o == nil || IsNil(o.Overstops) {
		var ret []OverstopCost
		return ret
	}
	return o.Overstops
}

// GetOverstopsOk returns a tuple with the Overstops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleCosts) GetOverstopsOk() ([]OverstopCost, bool) {
	if o == nil || IsNil(o.Overstops) {
		return nil, false
	}
	return o.Overstops, true
}

// HasOverstops returns a boolean if a field has been set.
func (o *VehicleCosts) HasOverstops() bool {
	if o != nil && !IsNil(o.Overstops) {
		return true
	}

	return false
}

// SetOverstops gets a reference to the given []OverstopCost and assigns it to the Overstops field.
func (o *VehicleCosts) SetOverstops(v []OverstopCost) {
	o.Overstops = v
}

// GetRepositioningEfforts returns the RepositioningEfforts field value if set, zero value otherwise.
func (o *VehicleCosts) GetRepositioningEfforts() []RepositioningEffortCost {
	if o == nil || IsNil(o.RepositioningEfforts) {
		var ret []RepositioningEffortCost
		return ret
	}
	return o.RepositioningEfforts
}

// GetRepositioningEffortsOk returns a tuple with the RepositioningEfforts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleCosts) GetRepositioningEffortsOk() ([]RepositioningEffortCost, bool) {
	if o == nil || IsNil(o.RepositioningEfforts) {
		return nil, false
	}
	return o.RepositioningEfforts, true
}

// HasRepositioningEfforts returns a boolean if a field has been set.
func (o *VehicleCosts) HasRepositioningEfforts() bool {
	if o != nil && !IsNil(o.RepositioningEfforts) {
		return true
	}

	return false
}

// SetRepositioningEfforts gets a reference to the given []RepositioningEffortCost and assigns it to the RepositioningEfforts field.
func (o *VehicleCosts) SetRepositioningEfforts(v []RepositioningEffortCost) {
	o.RepositioningEfforts = v
}

func (o VehicleCosts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VehicleCosts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["perHour"] = o.PerHour
	toSerialize["perKilometer"] = o.PerKilometer
	if !IsNil(o.PerStop) {
		toSerialize["perStop"] = o.PerStop
	}
	if !IsNil(o.Fixed) {
		toSerialize["fixed"] = o.Fixed
	}
	if !IsNil(o.Overtimes) {
		toSerialize["overtimes"] = o.Overtimes
	}
	if !IsNil(o.Overdistances) {
		toSerialize["overdistances"] = o.Overdistances
	}
	if !IsNil(o.Overstops) {
		toSerialize["overstops"] = o.Overstops
	}
	if !IsNil(o.RepositioningEfforts) {
		toSerialize["repositioningEfforts"] = o.RepositioningEfforts
	}
	return toSerialize, nil
}

func (o *VehicleCosts) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"perHour",
		"perKilometer",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicleCosts := _VehicleCosts{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicleCosts)

	if err != nil {
		return err
	}

	*o = VehicleCosts(varVehicleCosts)

	return err
}

type NullableVehicleCosts struct {
	value *VehicleCosts
	isSet bool
}

func (v NullableVehicleCosts) Get() *VehicleCosts {
	return v.value
}

func (v *NullableVehicleCosts) Set(val *VehicleCosts) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicleCosts) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicleCosts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicleCosts(val *VehicleCosts) *NullableVehicleCosts {
	return &NullableVehicleCosts{value: val, isSet: true}
}

func (v NullableVehicleCosts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicleCosts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


