/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// RoutingViolationStrategy Defines how to handle segments prohibited by the profile. * `ALLOW` - A vehicle is permitted to travel on segments prohibited by its profile. These prohibited segments will only be used when no valid alternatives are available. * `DISALLOW` - A vehicle is not permitted to travel on segments prohibited by its profile.
type RoutingViolationStrategy string

// List of RoutingViolationStrategy
const (
	ALLOW RoutingViolationStrategy = "ALLOW"
	DISALLOW RoutingViolationStrategy = "DISALLOW"
)

// All allowed values of RoutingViolationStrategy enum
var AllowedRoutingViolationStrategyEnumValues = []RoutingViolationStrategy{
	"ALLOW",
	"DISALLOW",
}

func (v *RoutingViolationStrategy) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RoutingViolationStrategy(value)
	for _, existing := range AllowedRoutingViolationStrategyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RoutingViolationStrategy", value)
}

// NewRoutingViolationStrategyFromValue returns a pointer to a valid RoutingViolationStrategy
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRoutingViolationStrategyFromValue(v string) (*RoutingViolationStrategy, error) {
	ev := RoutingViolationStrategy(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RoutingViolationStrategy: valid values are %v", v, AllowedRoutingViolationStrategyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RoutingViolationStrategy) IsValid() bool {
	for _, existing := range AllowedRoutingViolationStrategyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RoutingViolationStrategy value
func (v RoutingViolationStrategy) Ptr() *RoutingViolationStrategy {
	return &v
}

type NullableRoutingViolationStrategy struct {
	value *RoutingViolationStrategy
	isSet bool
}

func (v NullableRoutingViolationStrategy) Get() *RoutingViolationStrategy {
	return v.value
}

func (v *NullableRoutingViolationStrategy) Set(val *RoutingViolationStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableRoutingViolationStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableRoutingViolationStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoutingViolationStrategy(val *RoutingViolationStrategy) *NullableRoutingViolationStrategy {
	return &NullableRoutingViolationStrategy{value: val, isSet: true}
}

func (v NullableRoutingViolationStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoutingViolationStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

