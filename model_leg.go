/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Leg type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Leg{}

// Leg A section of a route where a vehicle travels from one location to another.
type Leg struct {
	// The unique identifier of the location where the vehicle departs.
	StartLocationId *string `json:"startLocationId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The point in time when the vehicle departs from the start location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	Departure *time.Time `json:"departure,omitempty"`
	// The unique identifier of the location where the vehicle arrives.
	EndLocationId *string `json:"endLocationId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The point in time when the vehicle arrives at the end location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	Arrival *time.Time `json:"arrival,omitempty"`
	// A list of breaks taken while travelling from the start location to the end location.
	Breaks []Break `json:"breaks,omitempty"`
	// The distance [m] travelled between the start location and end location.
	Distance *int32 `json:"distance,omitempty"`
	// The duration [s] it takes to drive from the start location to the end location.
	DrivingDuration *int32 `json:"drivingDuration,omitempty"`
}

// NewLeg instantiates a new Leg object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLeg() *Leg {
	this := Leg{}
	return &this
}

// NewLegWithDefaults instantiates a new Leg object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLegWithDefaults() *Leg {
	this := Leg{}
	return &this
}

// GetStartLocationId returns the StartLocationId field value if set, zero value otherwise.
func (o *Leg) GetStartLocationId() string {
	if o == nil || IsNil(o.StartLocationId) {
		var ret string
		return ret
	}
	return *o.StartLocationId
}

// GetStartLocationIdOk returns a tuple with the StartLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetStartLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.StartLocationId) {
		return nil, false
	}
	return o.StartLocationId, true
}

// HasStartLocationId returns a boolean if a field has been set.
func (o *Leg) HasStartLocationId() bool {
	if o != nil && !IsNil(o.StartLocationId) {
		return true
	}

	return false
}

// SetStartLocationId gets a reference to the given string and assigns it to the StartLocationId field.
func (o *Leg) SetStartLocationId(v string) {
	o.StartLocationId = &v
}

// GetDeparture returns the Departure field value if set, zero value otherwise.
func (o *Leg) GetDeparture() time.Time {
	if o == nil || IsNil(o.Departure) {
		var ret time.Time
		return ret
	}
	return *o.Departure
}

// GetDepartureOk returns a tuple with the Departure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetDepartureOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Departure) {
		return nil, false
	}
	return o.Departure, true
}

// HasDeparture returns a boolean if a field has been set.
func (o *Leg) HasDeparture() bool {
	if o != nil && !IsNil(o.Departure) {
		return true
	}

	return false
}

// SetDeparture gets a reference to the given time.Time and assigns it to the Departure field.
func (o *Leg) SetDeparture(v time.Time) {
	o.Departure = &v
}

// GetEndLocationId returns the EndLocationId field value if set, zero value otherwise.
func (o *Leg) GetEndLocationId() string {
	if o == nil || IsNil(o.EndLocationId) {
		var ret string
		return ret
	}
	return *o.EndLocationId
}

// GetEndLocationIdOk returns a tuple with the EndLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetEndLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.EndLocationId) {
		return nil, false
	}
	return o.EndLocationId, true
}

// HasEndLocationId returns a boolean if a field has been set.
func (o *Leg) HasEndLocationId() bool {
	if o != nil && !IsNil(o.EndLocationId) {
		return true
	}

	return false
}

// SetEndLocationId gets a reference to the given string and assigns it to the EndLocationId field.
func (o *Leg) SetEndLocationId(v string) {
	o.EndLocationId = &v
}

// GetArrival returns the Arrival field value if set, zero value otherwise.
func (o *Leg) GetArrival() time.Time {
	if o == nil || IsNil(o.Arrival) {
		var ret time.Time
		return ret
	}
	return *o.Arrival
}

// GetArrivalOk returns a tuple with the Arrival field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetArrivalOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Arrival) {
		return nil, false
	}
	return o.Arrival, true
}

// HasArrival returns a boolean if a field has been set.
func (o *Leg) HasArrival() bool {
	if o != nil && !IsNil(o.Arrival) {
		return true
	}

	return false
}

// SetArrival gets a reference to the given time.Time and assigns it to the Arrival field.
func (o *Leg) SetArrival(v time.Time) {
	o.Arrival = &v
}

// GetBreaks returns the Breaks field value if set, zero value otherwise.
func (o *Leg) GetBreaks() []Break {
	if o == nil || IsNil(o.Breaks) {
		var ret []Break
		return ret
	}
	return o.Breaks
}

// GetBreaksOk returns a tuple with the Breaks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetBreaksOk() ([]Break, bool) {
	if o == nil || IsNil(o.Breaks) {
		return nil, false
	}
	return o.Breaks, true
}

// HasBreaks returns a boolean if a field has been set.
func (o *Leg) HasBreaks() bool {
	if o != nil && !IsNil(o.Breaks) {
		return true
	}

	return false
}

// SetBreaks gets a reference to the given []Break and assigns it to the Breaks field.
func (o *Leg) SetBreaks(v []Break) {
	o.Breaks = v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *Leg) GetDistance() int32 {
	if o == nil || IsNil(o.Distance) {
		var ret int32
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetDistanceOk() (*int32, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *Leg) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given int32 and assigns it to the Distance field.
func (o *Leg) SetDistance(v int32) {
	o.Distance = &v
}

// GetDrivingDuration returns the DrivingDuration field value if set, zero value otherwise.
func (o *Leg) GetDrivingDuration() int32 {
	if o == nil || IsNil(o.DrivingDuration) {
		var ret int32
		return ret
	}
	return *o.DrivingDuration
}

// GetDrivingDurationOk returns a tuple with the DrivingDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Leg) GetDrivingDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.DrivingDuration) {
		return nil, false
	}
	return o.DrivingDuration, true
}

// HasDrivingDuration returns a boolean if a field has been set.
func (o *Leg) HasDrivingDuration() bool {
	if o != nil && !IsNil(o.DrivingDuration) {
		return true
	}

	return false
}

// SetDrivingDuration gets a reference to the given int32 and assigns it to the DrivingDuration field.
func (o *Leg) SetDrivingDuration(v int32) {
	o.DrivingDuration = &v
}

func (o Leg) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Leg) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.StartLocationId) {
		toSerialize["startLocationId"] = o.StartLocationId
	}
	if !IsNil(o.Departure) {
		toSerialize["departure"] = o.Departure
	}
	if !IsNil(o.EndLocationId) {
		toSerialize["endLocationId"] = o.EndLocationId
	}
	if !IsNil(o.Arrival) {
		toSerialize["arrival"] = o.Arrival
	}
	if !IsNil(o.Breaks) {
		toSerialize["breaks"] = o.Breaks
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.DrivingDuration) {
		toSerialize["drivingDuration"] = o.DrivingDuration
	}
	return toSerialize, nil
}

type NullableLeg struct {
	value *Leg
	isSet bool
}

func (v NullableLeg) Get() *Leg {
	return v.value
}

func (v *NullableLeg) Set(val *Leg) {
	v.value = val
	v.isSet = true
}

func (v NullableLeg) IsSet() bool {
	return v.isSet
}

func (v *NullableLeg) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLeg(val *Leg) *NullableLeg {
	return &NullableLeg{value: val, isSet: true}
}

func (v NullableLeg) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLeg) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


