/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"fmt"
)

// DailyRestPosition Indicates at which position of a route daily rests are planned.  See [here](./concepts/drivers-working-hours-break-and-rest-rules) for more information.
type DailyRestPosition string

// List of DailyRestPosition
const (
	BETWEEN_TRIPS DailyRestPosition = "BETWEEN_TRIPS"
	ANYWHERE DailyRestPosition = "ANYWHERE"
)

// All allowed values of DailyRestPosition enum
var AllowedDailyRestPositionEnumValues = []DailyRestPosition{
	"BETWEEN_TRIPS",
	"ANYWHERE",
}

func (v *DailyRestPosition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DailyRestPosition(value)
	for _, existing := range AllowedDailyRestPositionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DailyRestPosition", value)
}

// NewDailyRestPositionFromValue returns a pointer to a valid DailyRestPosition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDailyRestPositionFromValue(v string) (*DailyRestPosition, error) {
	ev := DailyRestPosition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DailyRestPosition: valid values are %v", v, AllowedDailyRestPositionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DailyRestPosition) IsValid() bool {
	for _, existing := range AllowedDailyRestPositionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DailyRestPosition value
func (v DailyRestPosition) Ptr() *DailyRestPosition {
	return &v
}

type NullableDailyRestPosition struct {
	value *DailyRestPosition
	isSet bool
}

func (v NullableDailyRestPosition) Get() *DailyRestPosition {
	return v.value
}

func (v *NullableDailyRestPosition) Set(val *DailyRestPosition) {
	v.value = val
	v.isSet = true
}

func (v NullableDailyRestPosition) IsSet() bool {
	return v.isSet
}

func (v *NullableDailyRestPosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDailyRestPosition(val *DailyRestPosition) *NullableDailyRestPosition {
	return &NullableDailyRestPosition{value: val, isSet: true}
}

func (v NullableDailyRestPosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDailyRestPosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

