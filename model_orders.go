/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Orders type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Orders{}

// Orders A list of orders that should be scheduled by the optimization on the routes. When providing pickup-delivery orders, it is not possible to provide other order types. If pickup orders or delivery orders are provided, at least one depot must be provided where the pickup orders can be delivered to or the delivery orders can be picked up from. The unique identifiers of the orders must by unique across the three types.
type Orders struct {
	// A list of orders that must be picked up from a specific location and transported to a depot. Please note that the upper bound on number of pickups is a technical limit. Check your individual price plan or contract to see which limits apply.
	Pickups []PickupOrder `json:"pickups,omitempty"`
	// A list of orders that must be delivered to a specific location and transported from a depot. Please note that the upper bound on number of deliveries is a technical limit. Check your individual price plan or contract to see which limits apply.
	Deliveries []DeliveryOrder `json:"deliveries,omitempty"`
	// A list of orders that must be picked up at a specific location and delivered to a specific location. Please note that the upper bound on number of pickup-deliveries is a technical limit. Check your individual price plan or contract to see which limits apply.
	PickupDeliveries []PickupDeliveryOrder `json:"pickupDeliveries,omitempty"`
}

// NewOrders instantiates a new Orders object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrders() *Orders {
	this := Orders{}
	return &this
}

// NewOrdersWithDefaults instantiates a new Orders object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrdersWithDefaults() *Orders {
	this := Orders{}
	return &this
}

// GetPickups returns the Pickups field value if set, zero value otherwise.
func (o *Orders) GetPickups() []PickupOrder {
	if o == nil || IsNil(o.Pickups) {
		var ret []PickupOrder
		return ret
	}
	return o.Pickups
}

// GetPickupsOk returns a tuple with the Pickups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Orders) GetPickupsOk() ([]PickupOrder, bool) {
	if o == nil || IsNil(o.Pickups) {
		return nil, false
	}
	return o.Pickups, true
}

// HasPickups returns a boolean if a field has been set.
func (o *Orders) HasPickups() bool {
	if o != nil && !IsNil(o.Pickups) {
		return true
	}

	return false
}

// SetPickups gets a reference to the given []PickupOrder and assigns it to the Pickups field.
func (o *Orders) SetPickups(v []PickupOrder) {
	o.Pickups = v
}

// GetDeliveries returns the Deliveries field value if set, zero value otherwise.
func (o *Orders) GetDeliveries() []DeliveryOrder {
	if o == nil || IsNil(o.Deliveries) {
		var ret []DeliveryOrder
		return ret
	}
	return o.Deliveries
}

// GetDeliveriesOk returns a tuple with the Deliveries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Orders) GetDeliveriesOk() ([]DeliveryOrder, bool) {
	if o == nil || IsNil(o.Deliveries) {
		return nil, false
	}
	return o.Deliveries, true
}

// HasDeliveries returns a boolean if a field has been set.
func (o *Orders) HasDeliveries() bool {
	if o != nil && !IsNil(o.Deliveries) {
		return true
	}

	return false
}

// SetDeliveries gets a reference to the given []DeliveryOrder and assigns it to the Deliveries field.
func (o *Orders) SetDeliveries(v []DeliveryOrder) {
	o.Deliveries = v
}

// GetPickupDeliveries returns the PickupDeliveries field value if set, zero value otherwise.
func (o *Orders) GetPickupDeliveries() []PickupDeliveryOrder {
	if o == nil || IsNil(o.PickupDeliveries) {
		var ret []PickupDeliveryOrder
		return ret
	}
	return o.PickupDeliveries
}

// GetPickupDeliveriesOk returns a tuple with the PickupDeliveries field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Orders) GetPickupDeliveriesOk() ([]PickupDeliveryOrder, bool) {
	if o == nil || IsNil(o.PickupDeliveries) {
		return nil, false
	}
	return o.PickupDeliveries, true
}

// HasPickupDeliveries returns a boolean if a field has been set.
func (o *Orders) HasPickupDeliveries() bool {
	if o != nil && !IsNil(o.PickupDeliveries) {
		return true
	}

	return false
}

// SetPickupDeliveries gets a reference to the given []PickupDeliveryOrder and assigns it to the PickupDeliveries field.
func (o *Orders) SetPickupDeliveries(v []PickupDeliveryOrder) {
	o.PickupDeliveries = v
}

func (o Orders) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Orders) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Pickups) {
		toSerialize["pickups"] = o.Pickups
	}
	if !IsNil(o.Deliveries) {
		toSerialize["deliveries"] = o.Deliveries
	}
	if !IsNil(o.PickupDeliveries) {
		toSerialize["pickupDeliveries"] = o.PickupDeliveries
	}
	return toSerialize, nil
}

type NullableOrders struct {
	value *Orders
	isSet bool
}

func (v NullableOrders) Get() *Orders {
	return v.value
}

func (v *NullableOrders) Set(val *Orders) {
	v.value = val
	v.isSet = true
}

func (v NullableOrders) IsSet() bool {
	return v.isSet
}

func (v *NullableOrders) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrders(val *Orders) *NullableOrders {
	return &NullableOrders{value: val, isSet: true}
}

func (v NullableOrders) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrders) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


