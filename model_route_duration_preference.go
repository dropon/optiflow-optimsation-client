/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.28
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RouteDurationPreference type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteDurationPreference{}

// RouteDurationPreference Describes a preference towards a specific route duration of the vehicle.
type RouteDurationPreference struct {
	// A scale between 0 and 1 resembling a tradeoff between minimizing the total hour cost and steering towards the preferred duration of the vehicle. Higher values indicate a stronger preference for a route duration close to the preferred one. As the cost per hour increases, the influence of this tradeoff becomes more significant.
	Importance *float64 `json:"importance,omitempty"`
	// The preferred duration [s] of the route assigned to the vehicle. If omitted, the preferred route duration of this vehicle is the average route duration.
	PreferredDuration *int32 `json:"preferredDuration,omitempty"`
}

// NewRouteDurationPreference instantiates a new RouteDurationPreference object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteDurationPreference() *RouteDurationPreference {
	this := RouteDurationPreference{}
	var importance float64 = 0
	this.Importance = &importance
	return &this
}

// NewRouteDurationPreferenceWithDefaults instantiates a new RouteDurationPreference object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteDurationPreferenceWithDefaults() *RouteDurationPreference {
	this := RouteDurationPreference{}
	var importance float64 = 0
	this.Importance = &importance
	return &this
}

// GetImportance returns the Importance field value if set, zero value otherwise.
func (o *RouteDurationPreference) GetImportance() float64 {
	if o == nil || IsNil(o.Importance) {
		var ret float64
		return ret
	}
	return *o.Importance
}

// GetImportanceOk returns a tuple with the Importance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteDurationPreference) GetImportanceOk() (*float64, bool) {
	if o == nil || IsNil(o.Importance) {
		return nil, false
	}
	return o.Importance, true
}

// HasImportance returns a boolean if a field has been set.
func (o *RouteDurationPreference) HasImportance() bool {
	if o != nil && !IsNil(o.Importance) {
		return true
	}

	return false
}

// SetImportance gets a reference to the given float64 and assigns it to the Importance field.
func (o *RouteDurationPreference) SetImportance(v float64) {
	o.Importance = &v
}

// GetPreferredDuration returns the PreferredDuration field value if set, zero value otherwise.
func (o *RouteDurationPreference) GetPreferredDuration() int32 {
	if o == nil || IsNil(o.PreferredDuration) {
		var ret int32
		return ret
	}
	return *o.PreferredDuration
}

// GetPreferredDurationOk returns a tuple with the PreferredDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteDurationPreference) GetPreferredDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.PreferredDuration) {
		return nil, false
	}
	return o.PreferredDuration, true
}

// HasPreferredDuration returns a boolean if a field has been set.
func (o *RouteDurationPreference) HasPreferredDuration() bool {
	if o != nil && !IsNil(o.PreferredDuration) {
		return true
	}

	return false
}

// SetPreferredDuration gets a reference to the given int32 and assigns it to the PreferredDuration field.
func (o *RouteDurationPreference) SetPreferredDuration(v int32) {
	o.PreferredDuration = &v
}

func (o RouteDurationPreference) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteDurationPreference) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Importance) {
		toSerialize["importance"] = o.Importance
	}
	if !IsNil(o.PreferredDuration) {
		toSerialize["preferredDuration"] = o.PreferredDuration
	}
	return toSerialize, nil
}

type NullableRouteDurationPreference struct {
	value *RouteDurationPreference
	isSet bool
}

func (v NullableRouteDurationPreference) Get() *RouteDurationPreference {
	return v.value
}

func (v *NullableRouteDurationPreference) Set(val *RouteDurationPreference) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteDurationPreference) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteDurationPreference) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteDurationPreference(val *RouteDurationPreference) *NullableRouteDurationPreference {
	return &NullableRouteDurationPreference{value: val, isSet: true}
}

func (v NullableRouteDurationPreference) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteDurationPreference) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


