/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.25
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OptimizationProgress type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptimizationProgress{}

// OptimizationProgress Time-series record of optimization metrics, tracking how the optimization evolves and converges over time.
type OptimizationProgress struct {
	// A list of samples that describe the optimization metrics at various points in time.
	Samples []OptimizationProgressSample `json:"samples,omitempty"`
}

// NewOptimizationProgress instantiates a new OptimizationProgress object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptimizationProgress() *OptimizationProgress {
	this := OptimizationProgress{}
	return &this
}

// NewOptimizationProgressWithDefaults instantiates a new OptimizationProgress object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptimizationProgressWithDefaults() *OptimizationProgress {
	this := OptimizationProgress{}
	return &this
}

// GetSamples returns the Samples field value if set, zero value otherwise.
func (o *OptimizationProgress) GetSamples() []OptimizationProgressSample {
	if o == nil || IsNil(o.Samples) {
		var ret []OptimizationProgressSample
		return ret
	}
	return o.Samples
}

// GetSamplesOk returns a tuple with the Samples field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptimizationProgress) GetSamplesOk() ([]OptimizationProgressSample, bool) {
	if o == nil || IsNil(o.Samples) {
		return nil, false
	}
	return o.Samples, true
}

// HasSamples returns a boolean if a field has been set.
func (o *OptimizationProgress) HasSamples() bool {
	if o != nil && !IsNil(o.Samples) {
		return true
	}

	return false
}

// SetSamples gets a reference to the given []OptimizationProgressSample and assigns it to the Samples field.
func (o *OptimizationProgress) SetSamples(v []OptimizationProgressSample) {
	o.Samples = v
}

func (o OptimizationProgress) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptimizationProgress) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Samples) {
		toSerialize["samples"] = o.Samples
	}
	return toSerialize, nil
}

type NullableOptimizationProgress struct {
	value *OptimizationProgress
	isSet bool
}

func (v NullableOptimizationProgress) Get() *OptimizationProgress {
	return v.value
}

func (v *NullableOptimizationProgress) Set(val *OptimizationProgress) {
	v.value = val
	v.isSet = true
}

func (v NullableOptimizationProgress) IsSet() bool {
	return v.isSet
}

func (v *NullableOptimizationProgress) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptimizationProgress(val *OptimizationProgress) *NullableOptimizationProgress {
	return &NullableOptimizationProgress{value: val, isSet: true}
}

func (v NullableOptimizationProgress) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptimizationProgress) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


