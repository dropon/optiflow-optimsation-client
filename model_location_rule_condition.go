/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the LocationRuleCondition type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LocationRuleCondition{}

// LocationRuleCondition A condition used to select which locations should be modified by a rule.  A condition is met if all its properties are matched.
type LocationRuleCondition struct {
	// The rule applies only if the location belongs to this category. When omitted, it applies to all locations.
	LocationCategory *string `json:"locationCategory,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The rule applies only if the previous location in the route belongs to this category. When omitted, it applies independently of the previous location.
	PreviousLocationCategory *string `json:"previousLocationCategory,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The rule applies only if the vehicle visiting the location belongs to this category. When omitted, it applies independently of the vehicle visiting the location.
	VehicleCategory *string `json:"vehicleCategory,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
}

// NewLocationRuleCondition instantiates a new LocationRuleCondition object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocationRuleCondition() *LocationRuleCondition {
	this := LocationRuleCondition{}
	return &this
}

// NewLocationRuleConditionWithDefaults instantiates a new LocationRuleCondition object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationRuleConditionWithDefaults() *LocationRuleCondition {
	this := LocationRuleCondition{}
	return &this
}

// GetLocationCategory returns the LocationCategory field value if set, zero value otherwise.
func (o *LocationRuleCondition) GetLocationCategory() string {
	if o == nil || IsNil(o.LocationCategory) {
		var ret string
		return ret
	}
	return *o.LocationCategory
}

// GetLocationCategoryOk returns a tuple with the LocationCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationRuleCondition) GetLocationCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.LocationCategory) {
		return nil, false
	}
	return o.LocationCategory, true
}

// HasLocationCategory returns a boolean if a field has been set.
func (o *LocationRuleCondition) HasLocationCategory() bool {
	if o != nil && !IsNil(o.LocationCategory) {
		return true
	}

	return false
}

// SetLocationCategory gets a reference to the given string and assigns it to the LocationCategory field.
func (o *LocationRuleCondition) SetLocationCategory(v string) {
	o.LocationCategory = &v
}

// GetPreviousLocationCategory returns the PreviousLocationCategory field value if set, zero value otherwise.
func (o *LocationRuleCondition) GetPreviousLocationCategory() string {
	if o == nil || IsNil(o.PreviousLocationCategory) {
		var ret string
		return ret
	}
	return *o.PreviousLocationCategory
}

// GetPreviousLocationCategoryOk returns a tuple with the PreviousLocationCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationRuleCondition) GetPreviousLocationCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.PreviousLocationCategory) {
		return nil, false
	}
	return o.PreviousLocationCategory, true
}

// HasPreviousLocationCategory returns a boolean if a field has been set.
func (o *LocationRuleCondition) HasPreviousLocationCategory() bool {
	if o != nil && !IsNil(o.PreviousLocationCategory) {
		return true
	}

	return false
}

// SetPreviousLocationCategory gets a reference to the given string and assigns it to the PreviousLocationCategory field.
func (o *LocationRuleCondition) SetPreviousLocationCategory(v string) {
	o.PreviousLocationCategory = &v
}

// GetVehicleCategory returns the VehicleCategory field value if set, zero value otherwise.
func (o *LocationRuleCondition) GetVehicleCategory() string {
	if o == nil || IsNil(o.VehicleCategory) {
		var ret string
		return ret
	}
	return *o.VehicleCategory
}

// GetVehicleCategoryOk returns a tuple with the VehicleCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LocationRuleCondition) GetVehicleCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.VehicleCategory) {
		return nil, false
	}
	return o.VehicleCategory, true
}

// HasVehicleCategory returns a boolean if a field has been set.
func (o *LocationRuleCondition) HasVehicleCategory() bool {
	if o != nil && !IsNil(o.VehicleCategory) {
		return true
	}

	return false
}

// SetVehicleCategory gets a reference to the given string and assigns it to the VehicleCategory field.
func (o *LocationRuleCondition) SetVehicleCategory(v string) {
	o.VehicleCategory = &v
}

func (o LocationRuleCondition) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LocationRuleCondition) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocationCategory) {
		toSerialize["locationCategory"] = o.LocationCategory
	}
	if !IsNil(o.PreviousLocationCategory) {
		toSerialize["previousLocationCategory"] = o.PreviousLocationCategory
	}
	if !IsNil(o.VehicleCategory) {
		toSerialize["vehicleCategory"] = o.VehicleCategory
	}
	return toSerialize, nil
}

type NullableLocationRuleCondition struct {
	value *LocationRuleCondition
	isSet bool
}

func (v NullableLocationRuleCondition) Get() *LocationRuleCondition {
	return v.value
}

func (v *NullableLocationRuleCondition) Set(val *LocationRuleCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableLocationRuleCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableLocationRuleCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocationRuleCondition(val *LocationRuleCondition) *NullableLocationRuleCondition {
	return &NullableLocationRuleCondition{value: val, isSet: true}
}

func (v NullableLocationRuleCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocationRuleCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


