/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"fmt"
)

// PositionInTrip If specified, this stop has to be the very first/last customer stop in its trip whenever there is a stop at this location. In each trip, there can only be one stop at a customer location with a trip section of type _FIRST_CUSTOMER_STOP_/_LAST_CUSTOMER_STOP_.    If specified, tripSectionNumber must not be set for the same location.   * `FIRST_CUSTOMER_STOP`    A stop at a customer location with this position type has to be the very first customer stop in its trip.   * `LAST_CUSTOMER_STOP`    A stop at a customer location with this position type has to be the very last customer stop in its trip.  See [here](./concepts/trip-sections-and-position-trips) for more information.
type PositionInTrip string

// List of PositionInTrip
const (
	FIRST_CUSTOMER_STOP PositionInTrip = "FIRST_CUSTOMER_STOP"
	LAST_CUSTOMER_STOP PositionInTrip = "LAST_CUSTOMER_STOP"
)

// All allowed values of PositionInTrip enum
var AllowedPositionInTripEnumValues = []PositionInTrip{
	"FIRST_CUSTOMER_STOP",
	"LAST_CUSTOMER_STOP",
}

func (v *PositionInTrip) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := PositionInTrip(value)
	for _, existing := range AllowedPositionInTripEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid PositionInTrip", value)
}

// NewPositionInTripFromValue returns a pointer to a valid PositionInTrip
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewPositionInTripFromValue(v string) (*PositionInTrip, error) {
	ev := PositionInTrip(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for PositionInTrip: valid values are %v", v, AllowedPositionInTripEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v PositionInTrip) IsValid() bool {
	for _, existing := range AllowedPositionInTripEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to PositionInTrip value
func (v PositionInTrip) Ptr() *PositionInTrip {
	return &v
}

type NullablePositionInTrip struct {
	value *PositionInTrip
	isSet bool
}

func (v NullablePositionInTrip) Get() *PositionInTrip {
	return v.value
}

func (v *NullablePositionInTrip) Set(val *PositionInTrip) {
	v.value = val
	v.isSet = true
}

func (v NullablePositionInTrip) IsSet() bool {
	return v.isSet
}

func (v *NullablePositionInTrip) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePositionInTrip(val *PositionInTrip) *NullablePositionInTrip {
	return &NullablePositionInTrip{value: val, isSet: true}
}

func (v NullablePositionInTrip) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePositionInTrip) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

