/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.28
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BreakSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BreakSettings{}

// BreakSettings Specifies when the driver of the vehicle must take a break during the route.
type BreakSettings struct {
	// A list of restrictions that specify how long the driver of the vehicle may work without taking a break. All the time spent during a route is considered working time except for waiting time and break time.
	Working []WorkingBreakSettings `json:"working,omitempty"`
	// A list of restrictions that specify how long the driver of the vehicle may drive without taking a break of at least the specified duration.
	Driving []DrivingBreakSettings `json:"driving,omitempty"`
}

// NewBreakSettings instantiates a new BreakSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBreakSettings() *BreakSettings {
	this := BreakSettings{}
	return &this
}

// NewBreakSettingsWithDefaults instantiates a new BreakSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBreakSettingsWithDefaults() *BreakSettings {
	this := BreakSettings{}
	return &this
}

// GetWorking returns the Working field value if set, zero value otherwise.
func (o *BreakSettings) GetWorking() []WorkingBreakSettings {
	if o == nil || IsNil(o.Working) {
		var ret []WorkingBreakSettings
		return ret
	}
	return o.Working
}

// GetWorkingOk returns a tuple with the Working field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BreakSettings) GetWorkingOk() ([]WorkingBreakSettings, bool) {
	if o == nil || IsNil(o.Working) {
		return nil, false
	}
	return o.Working, true
}

// HasWorking returns a boolean if a field has been set.
func (o *BreakSettings) HasWorking() bool {
	if o != nil && !IsNil(o.Working) {
		return true
	}

	return false
}

// SetWorking gets a reference to the given []WorkingBreakSettings and assigns it to the Working field.
func (o *BreakSettings) SetWorking(v []WorkingBreakSettings) {
	o.Working = v
}

// GetDriving returns the Driving field value if set, zero value otherwise.
func (o *BreakSettings) GetDriving() []DrivingBreakSettings {
	if o == nil || IsNil(o.Driving) {
		var ret []DrivingBreakSettings
		return ret
	}
	return o.Driving
}

// GetDrivingOk returns a tuple with the Driving field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BreakSettings) GetDrivingOk() ([]DrivingBreakSettings, bool) {
	if o == nil || IsNil(o.Driving) {
		return nil, false
	}
	return o.Driving, true
}

// HasDriving returns a boolean if a field has been set.
func (o *BreakSettings) HasDriving() bool {
	if o != nil && !IsNil(o.Driving) {
		return true
	}

	return false
}

// SetDriving gets a reference to the given []DrivingBreakSettings and assigns it to the Driving field.
func (o *BreakSettings) SetDriving(v []DrivingBreakSettings) {
	o.Driving = v
}

func (o BreakSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BreakSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Working) {
		toSerialize["working"] = o.Working
	}
	if !IsNil(o.Driving) {
		toSerialize["driving"] = o.Driving
	}
	return toSerialize, nil
}

type NullableBreakSettings struct {
	value *BreakSettings
	isSet bool
}

func (v NullableBreakSettings) Get() *BreakSettings {
	return v.value
}

func (v *NullableBreakSettings) Set(val *BreakSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableBreakSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableBreakSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBreakSettings(val *BreakSettings) *NullableBreakSettings {
	return &NullableBreakSettings{value: val, isSet: true}
}

func (v NullableBreakSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBreakSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


