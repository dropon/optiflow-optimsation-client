/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.28
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ChargingStation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ChargingStation{}

// ChargingStation Specifies the type of charging station that can be used to charge an electric vehicle.
type ChargingStation struct {
	// A unique identifier of the charging station. This must be unique across all charging stations of one location.
	Id string `json:"id" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The maximum power output [kW] of the charging station.
	MaximumPower float64 `json:"maximumPower"`
}

type _ChargingStation ChargingStation

// NewChargingStation instantiates a new ChargingStation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewChargingStation(id string, maximumPower float64) *ChargingStation {
	this := ChargingStation{}
	this.Id = id
	this.MaximumPower = maximumPower
	return &this
}

// NewChargingStationWithDefaults instantiates a new ChargingStation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargingStationWithDefaults() *ChargingStation {
	this := ChargingStation{}
	return &this
}

// GetId returns the Id field value
func (o *ChargingStation) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *ChargingStation) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *ChargingStation) SetId(v string) {
	o.Id = v
}

// GetMaximumPower returns the MaximumPower field value
func (o *ChargingStation) GetMaximumPower() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.MaximumPower
}

// GetMaximumPowerOk returns a tuple with the MaximumPower field value
// and a boolean to check if the value has been set.
func (o *ChargingStation) GetMaximumPowerOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaximumPower, true
}

// SetMaximumPower sets field value
func (o *ChargingStation) SetMaximumPower(v float64) {
	o.MaximumPower = v
}

func (o ChargingStation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ChargingStation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["maximumPower"] = o.MaximumPower
	return toSerialize, nil
}

func (o *ChargingStation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"maximumPower",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varChargingStation := _ChargingStation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varChargingStation)

	if err != nil {
		return err
	}

	*o = ChargingStation(varChargingStation)

	return err
}

type NullableChargingStation struct {
	value *ChargingStation
	isSet bool
}

func (v NullableChargingStation) Get() *ChargingStation {
	return v.value
}

func (v *NullableChargingStation) Set(val *ChargingStation) {
	v.value = val
	v.isSet = true
}

func (v NullableChargingStation) IsSet() bool {
	return v.isSet
}

func (v *NullableChargingStation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableChargingStation(val *ChargingStation) *NullableChargingStation {
	return &NullableChargingStation{value: val, isSet: true}
}

func (v NullableChargingStation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableChargingStation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


