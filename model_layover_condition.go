/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// LayoverCondition Defines whether the location can be used for a layover between consecutive vehicles sharing the same resources. * `WITHOUT_ORDERS` - Two consecutive vehicles that share the same resources can use this location for a layover when no orders are present in the vehicle. In this case, the first vehicle’s route ends at this location and the next vehicle’s route begins here. * `DISALLOW` - This location cannot be used for a layover. At most 100 locations can be used for a layover.
type LayoverCondition string

// List of LayoverCondition
const (
	WITHOUT_ORDERS LayoverCondition = "WITHOUT_ORDERS"
	DISALLOW LayoverCondition = "DISALLOW"
)

// All allowed values of LayoverCondition enum
var AllowedLayoverConditionEnumValues = []LayoverCondition{
	"WITHOUT_ORDERS",
	"DISALLOW",
}

func (v *LayoverCondition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LayoverCondition(value)
	for _, existing := range AllowedLayoverConditionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LayoverCondition", value)
}

// NewLayoverConditionFromValue returns a pointer to a valid LayoverCondition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLayoverConditionFromValue(v string) (*LayoverCondition, error) {
	ev := LayoverCondition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LayoverCondition: valid values are %v", v, AllowedLayoverConditionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LayoverCondition) IsValid() bool {
	for _, existing := range AllowedLayoverConditionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LayoverCondition value
func (v LayoverCondition) Ptr() *LayoverCondition {
	return &v
}

type NullableLayoverCondition struct {
	value *LayoverCondition
	isSet bool
}

func (v NullableLayoverCondition) Get() *LayoverCondition {
	return v.value
}

func (v *NullableLayoverCondition) Set(val *LayoverCondition) {
	v.value = val
	v.isSet = true
}

func (v NullableLayoverCondition) IsSet() bool {
	return v.isSet
}

func (v *NullableLayoverCondition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLayoverCondition(val *LayoverCondition) *NullableLayoverCondition {
	return &NullableLayoverCondition{value: val, isSet: true}
}

func (v NullableLayoverCondition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLayoverCondition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

