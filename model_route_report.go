/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the RouteReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteReport{}

// RouteReport A route report contains a summary of the values of all events and all reports that belong to this route, including the start time and the end time of the route.
type RouteReport struct {
	// The start time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
	StartTime time.Time `json:"startTime"`
	// The end time of the route formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
	EndTime time.Time `json:"endTime"`
	// The total travel time of the route [s]. Equals difference between end time and start time.
	TravelTime int32 `json:"travelTime"`
	// The total driving distance of the route [m].
	Distance int32 `json:"distance"`
	// The total driving time of the route [s].
	DrivingTime int32 `json:"drivingTime"`
	// The total service time of the route [s].
	ServiceTime int32 `json:"serviceTime"`
	// The total waiting time of the route [s].
	WaitingTime int32 `json:"waitingTime"`
	// The total break time of the route [s].
	BreakTime int32 `json:"breakTime"`
	// The total rest time of the route [s].
	RestTime int32 `json:"restTime"`
}

type _RouteReport RouteReport

// NewRouteReport instantiates a new RouteReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteReport(startTime time.Time, endTime time.Time, travelTime int32, distance int32, drivingTime int32, serviceTime int32, waitingTime int32, breakTime int32, restTime int32) *RouteReport {
	this := RouteReport{}
	this.StartTime = startTime
	this.EndTime = endTime
	this.TravelTime = travelTime
	this.Distance = distance
	this.DrivingTime = drivingTime
	this.ServiceTime = serviceTime
	this.WaitingTime = waitingTime
	this.BreakTime = breakTime
	this.RestTime = restTime
	return &this
}

// NewRouteReportWithDefaults instantiates a new RouteReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteReportWithDefaults() *RouteReport {
	this := RouteReport{}
	return &this
}

// GetStartTime returns the StartTime field value
func (o *RouteReport) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *RouteReport) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *RouteReport) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetEndTime returns the EndTime field value
func (o *RouteReport) GetEndTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.EndTime
}

// GetEndTimeOk returns a tuple with the EndTime field value
// and a boolean to check if the value has been set.
func (o *RouteReport) GetEndTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EndTime, true
}

// SetEndTime sets field value
func (o *RouteReport) SetEndTime(v time.Time) {
	o.EndTime = v
}

// GetTravelTime returns the TravelTime field value
func (o *RouteReport) GetTravelTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.TravelTime
}

// GetTravelTimeOk returns a tuple with the TravelTime field value
// and a boolean to check if the value has been set.
func (o *RouteReport) GetTravelTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TravelTime, true
}

// SetTravelTime sets field value
func (o *RouteReport) SetTravelTime(v int32) {
	o.TravelTime = v
}

// GetDistance returns the Distance field value
func (o *RouteReport) GetDistance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value
// and a boolean to check if the value has been set.
func (o *RouteReport) GetDistanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distance, true
}

// SetDistance sets field value
func (o *RouteReport) SetDistance(v int32) {
	o.Distance = v
}

// GetDrivingTime returns the DrivingTime field value
func (o *RouteReport) GetDrivingTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DrivingTime
}

// GetDrivingTimeOk returns a tuple with the DrivingTime field value
// and a boolean to check if the value has been set.
func (o *RouteReport) GetDrivingTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DrivingTime, true
}

// SetDrivingTime sets field value
func (o *RouteReport) SetDrivingTime(v int32) {
	o.DrivingTime = v
}

// GetServiceTime returns the ServiceTime field value
func (o *RouteReport) GetServiceTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServiceTime
}

// GetServiceTimeOk returns a tuple with the ServiceTime field value
// and a boolean to check if the value has been set.
func (o *RouteReport) GetServiceTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceTime, true
}

// SetServiceTime sets field value
func (o *RouteReport) SetServiceTime(v int32) {
	o.ServiceTime = v
}

// GetWaitingTime returns the WaitingTime field value
func (o *RouteReport) GetWaitingTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WaitingTime
}

// GetWaitingTimeOk returns a tuple with the WaitingTime field value
// and a boolean to check if the value has been set.
func (o *RouteReport) GetWaitingTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WaitingTime, true
}

// SetWaitingTime sets field value
func (o *RouteReport) SetWaitingTime(v int32) {
	o.WaitingTime = v
}

// GetBreakTime returns the BreakTime field value
func (o *RouteReport) GetBreakTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BreakTime
}

// GetBreakTimeOk returns a tuple with the BreakTime field value
// and a boolean to check if the value has been set.
func (o *RouteReport) GetBreakTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BreakTime, true
}

// SetBreakTime sets field value
func (o *RouteReport) SetBreakTime(v int32) {
	o.BreakTime = v
}

// GetRestTime returns the RestTime field value
func (o *RouteReport) GetRestTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RestTime
}

// GetRestTimeOk returns a tuple with the RestTime field value
// and a boolean to check if the value has been set.
func (o *RouteReport) GetRestTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestTime, true
}

// SetRestTime sets field value
func (o *RouteReport) SetRestTime(v int32) {
	o.RestTime = v
}

func (o RouteReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["startTime"] = o.StartTime
	toSerialize["endTime"] = o.EndTime
	toSerialize["travelTime"] = o.TravelTime
	toSerialize["distance"] = o.Distance
	toSerialize["drivingTime"] = o.DrivingTime
	toSerialize["serviceTime"] = o.ServiceTime
	toSerialize["waitingTime"] = o.WaitingTime
	toSerialize["breakTime"] = o.BreakTime
	toSerialize["restTime"] = o.RestTime
	return toSerialize, nil
}

func (o *RouteReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"startTime",
		"endTime",
		"travelTime",
		"distance",
		"drivingTime",
		"serviceTime",
		"waitingTime",
		"breakTime",
		"restTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRouteReport := _RouteReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRouteReport)

	if err != nil {
		return err
	}

	*o = RouteReport(varRouteReport)

	return err
}

type NullableRouteReport struct {
	value *RouteReport
	isSet bool
}

func (v NullableRouteReport) Get() *RouteReport {
	return v.value
}

func (v *NullableRouteReport) Set(val *RouteReport) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteReport) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteReport(val *RouteReport) *NullableRouteReport {
	return &NullableRouteReport{value: val, isSet: true}
}

func (v NullableRouteReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


