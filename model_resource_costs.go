/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.25
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ResourceCosts type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ResourceCosts{}

// ResourceCosts Defines the costs for assigning the resource to vehicles.
type ResourceCosts struct {
	// A one-time fixed cost incurred when this resource is used, regardless of how many vehicles use it.
	Fixed *float64 `json:"fixed,omitempty"`
	// The cost charged for each vehicle that uses this resource.
	PerVehicle *float64 `json:"perVehicle,omitempty"`
	// A list of overvehicle costs that describe an increasing cost if the number of vehicles that is assigned to this resource exceeds a threshold. For each exceeded threshold, the extra fixed cost and the additional cost for the extra vehicle contribute to the total cost of the route.
	Overvehicles []OvervehicleCost `json:"overvehicles,omitempty"`
}

// NewResourceCosts instantiates a new ResourceCosts object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResourceCosts() *ResourceCosts {
	this := ResourceCosts{}
	var fixed float64 = 0
	this.Fixed = &fixed
	var perVehicle float64 = 0
	this.PerVehicle = &perVehicle
	return &this
}

// NewResourceCostsWithDefaults instantiates a new ResourceCosts object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceCostsWithDefaults() *ResourceCosts {
	this := ResourceCosts{}
	var fixed float64 = 0
	this.Fixed = &fixed
	var perVehicle float64 = 0
	this.PerVehicle = &perVehicle
	return &this
}

// GetFixed returns the Fixed field value if set, zero value otherwise.
func (o *ResourceCosts) GetFixed() float64 {
	if o == nil || IsNil(o.Fixed) {
		var ret float64
		return ret
	}
	return *o.Fixed
}

// GetFixedOk returns a tuple with the Fixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCosts) GetFixedOk() (*float64, bool) {
	if o == nil || IsNil(o.Fixed) {
		return nil, false
	}
	return o.Fixed, true
}

// HasFixed returns a boolean if a field has been set.
func (o *ResourceCosts) HasFixed() bool {
	if o != nil && !IsNil(o.Fixed) {
		return true
	}

	return false
}

// SetFixed gets a reference to the given float64 and assigns it to the Fixed field.
func (o *ResourceCosts) SetFixed(v float64) {
	o.Fixed = &v
}

// GetPerVehicle returns the PerVehicle field value if set, zero value otherwise.
func (o *ResourceCosts) GetPerVehicle() float64 {
	if o == nil || IsNil(o.PerVehicle) {
		var ret float64
		return ret
	}
	return *o.PerVehicle
}

// GetPerVehicleOk returns a tuple with the PerVehicle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCosts) GetPerVehicleOk() (*float64, bool) {
	if o == nil || IsNil(o.PerVehicle) {
		return nil, false
	}
	return o.PerVehicle, true
}

// HasPerVehicle returns a boolean if a field has been set.
func (o *ResourceCosts) HasPerVehicle() bool {
	if o != nil && !IsNil(o.PerVehicle) {
		return true
	}

	return false
}

// SetPerVehicle gets a reference to the given float64 and assigns it to the PerVehicle field.
func (o *ResourceCosts) SetPerVehicle(v float64) {
	o.PerVehicle = &v
}

// GetOvervehicles returns the Overvehicles field value if set, zero value otherwise.
func (o *ResourceCosts) GetOvervehicles() []OvervehicleCost {
	if o == nil || IsNil(o.Overvehicles) {
		var ret []OvervehicleCost
		return ret
	}
	return o.Overvehicles
}

// GetOvervehiclesOk returns a tuple with the Overvehicles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ResourceCosts) GetOvervehiclesOk() ([]OvervehicleCost, bool) {
	if o == nil || IsNil(o.Overvehicles) {
		return nil, false
	}
	return o.Overvehicles, true
}

// HasOvervehicles returns a boolean if a field has been set.
func (o *ResourceCosts) HasOvervehicles() bool {
	if o != nil && !IsNil(o.Overvehicles) {
		return true
	}

	return false
}

// SetOvervehicles gets a reference to the given []OvervehicleCost and assigns it to the Overvehicles field.
func (o *ResourceCosts) SetOvervehicles(v []OvervehicleCost) {
	o.Overvehicles = v
}

func (o ResourceCosts) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ResourceCosts) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Fixed) {
		toSerialize["fixed"] = o.Fixed
	}
	if !IsNil(o.PerVehicle) {
		toSerialize["perVehicle"] = o.PerVehicle
	}
	if !IsNil(o.Overvehicles) {
		toSerialize["overvehicles"] = o.Overvehicles
	}
	return toSerialize, nil
}

type NullableResourceCosts struct {
	value *ResourceCosts
	isSet bool
}

func (v NullableResourceCosts) Get() *ResourceCosts {
	return v.value
}

func (v *NullableResourceCosts) Set(val *ResourceCosts) {
	v.value = val
	v.isSet = true
}

func (v NullableResourceCosts) IsSet() bool {
	return v.isSet
}

func (v *NullableResourceCosts) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResourceCosts(val *ResourceCosts) *NullableResourceCosts {
	return &NullableResourceCosts{value: val, isSet: true}
}

func (v NullableResourceCosts) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResourceCosts) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


