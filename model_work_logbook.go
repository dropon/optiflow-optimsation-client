/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the WorkLogbook type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WorkLogbook{}

// WorkLogbook Defines the accumulated driving, working and travel times since the last break or daily rest.  See [here](./concepts/drivers-working-hours-break-and-rest-rules) for more information.
type WorkLogbook struct {
	// The last time the driver worked formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339). The date must not be before 1970-01-01T00:00:00+00:00 nor after 2037-12-31T23:59:59+00:00. The date must provide an offset to UTC.
	LastTimeTheDriverWorked time.Time `json:"lastTimeTheDriverWorked"`
	// Accumulated driving time since end of last break [s], this includes all time behind the wheel. Values higher than **maximumDrivingTimeBetweenBreaks** are capped and effectively equal to the value given by **maximumDrivingTimeBetweenBreaks**. 
	AccumulatedDrivingTimeSinceLastBreak *int32 `json:"accumulatedDrivingTimeSinceLastBreak,omitempty"`
	// Accumulated working time since end of last break [s], this includes driving time, service time at depot and customers, and idle time if lower than working time threshold. Values higher than **maximumWorkingTimeBetweenBreaks** are capped and effectively equal to the value given by **maximumWorkingTimeBetweenBreaks**. May not be smaller than **accumulatedDrivingTimeSinceLastBreak** if the value is specified. If no other value is specified, the default value is 0.
	AccumulatedWorkingTimeSinceLastBreak NullableInt32 `json:"accumulatedWorkingTimeSinceLastBreak,omitempty"`
	// Accumulated driving time since end of last daily rest [s], this includes all time behind the wheel. Values higher than **maximumDrivingTimeBetweenDailyRests** are capped and effectively equal to the value given by **maximumDrivingTimeBetweenDailyRests**. May not be smaller than **accumulatedDrivingTimeSinceLastBreak** if the value is specified. If no other value is specified, the default value is 0.
	AccumulatedDrivingTimeSinceLastDailyRest NullableInt32 `json:"accumulatedDrivingTimeSinceLastDailyRest,omitempty"`
	// Accumulated travel time since end of last daily rest [s], this includes all time since the last daily rest. Values higher than **maximumTravelTimeBetweenDailyRests** are capped and effectively equal to the value given by **maximumTravelTimeBetweenDailyRests**. May not be smaller than **accumulatedWorkingTimeSinceLastBreak** or **accumulatedDrivingTimeSinceLastDailyRest** if the values are specified. If no other value is specified, the default value is 0.
	AccumulatedTravelTimeSinceLastDailyRest NullableInt32 `json:"accumulatedTravelTimeSinceLastDailyRest,omitempty"`
}

type _WorkLogbook WorkLogbook

// NewWorkLogbook instantiates a new WorkLogbook object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWorkLogbook(lastTimeTheDriverWorked time.Time) *WorkLogbook {
	this := WorkLogbook{}
	this.LastTimeTheDriverWorked = lastTimeTheDriverWorked
	var accumulatedDrivingTimeSinceLastBreak int32 = 0
	this.AccumulatedDrivingTimeSinceLastBreak = &accumulatedDrivingTimeSinceLastBreak
	return &this
}

// NewWorkLogbookWithDefaults instantiates a new WorkLogbook object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWorkLogbookWithDefaults() *WorkLogbook {
	this := WorkLogbook{}
	var accumulatedDrivingTimeSinceLastBreak int32 = 0
	this.AccumulatedDrivingTimeSinceLastBreak = &accumulatedDrivingTimeSinceLastBreak
	return &this
}

// GetLastTimeTheDriverWorked returns the LastTimeTheDriverWorked field value
func (o *WorkLogbook) GetLastTimeTheDriverWorked() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.LastTimeTheDriverWorked
}

// GetLastTimeTheDriverWorkedOk returns a tuple with the LastTimeTheDriverWorked field value
// and a boolean to check if the value has been set.
func (o *WorkLogbook) GetLastTimeTheDriverWorkedOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LastTimeTheDriverWorked, true
}

// SetLastTimeTheDriverWorked sets field value
func (o *WorkLogbook) SetLastTimeTheDriverWorked(v time.Time) {
	o.LastTimeTheDriverWorked = v
}

// GetAccumulatedDrivingTimeSinceLastBreak returns the AccumulatedDrivingTimeSinceLastBreak field value if set, zero value otherwise.
func (o *WorkLogbook) GetAccumulatedDrivingTimeSinceLastBreak() int32 {
	if o == nil || IsNil(o.AccumulatedDrivingTimeSinceLastBreak) {
		var ret int32
		return ret
	}
	return *o.AccumulatedDrivingTimeSinceLastBreak
}

// GetAccumulatedDrivingTimeSinceLastBreakOk returns a tuple with the AccumulatedDrivingTimeSinceLastBreak field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *WorkLogbook) GetAccumulatedDrivingTimeSinceLastBreakOk() (*int32, bool) {
	if o == nil || IsNil(o.AccumulatedDrivingTimeSinceLastBreak) {
		return nil, false
	}
	return o.AccumulatedDrivingTimeSinceLastBreak, true
}

// HasAccumulatedDrivingTimeSinceLastBreak returns a boolean if a field has been set.
func (o *WorkLogbook) HasAccumulatedDrivingTimeSinceLastBreak() bool {
	if o != nil && !IsNil(o.AccumulatedDrivingTimeSinceLastBreak) {
		return true
	}

	return false
}

// SetAccumulatedDrivingTimeSinceLastBreak gets a reference to the given int32 and assigns it to the AccumulatedDrivingTimeSinceLastBreak field.
func (o *WorkLogbook) SetAccumulatedDrivingTimeSinceLastBreak(v int32) {
	o.AccumulatedDrivingTimeSinceLastBreak = &v
}

// GetAccumulatedWorkingTimeSinceLastBreak returns the AccumulatedWorkingTimeSinceLastBreak field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkLogbook) GetAccumulatedWorkingTimeSinceLastBreak() int32 {
	if o == nil || IsNil(o.AccumulatedWorkingTimeSinceLastBreak.Get()) {
		var ret int32
		return ret
	}
	return *o.AccumulatedWorkingTimeSinceLastBreak.Get()
}

// GetAccumulatedWorkingTimeSinceLastBreakOk returns a tuple with the AccumulatedWorkingTimeSinceLastBreak field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkLogbook) GetAccumulatedWorkingTimeSinceLastBreakOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccumulatedWorkingTimeSinceLastBreak.Get(), o.AccumulatedWorkingTimeSinceLastBreak.IsSet()
}

// HasAccumulatedWorkingTimeSinceLastBreak returns a boolean if a field has been set.
func (o *WorkLogbook) HasAccumulatedWorkingTimeSinceLastBreak() bool {
	if o != nil && o.AccumulatedWorkingTimeSinceLastBreak.IsSet() {
		return true
	}

	return false
}

// SetAccumulatedWorkingTimeSinceLastBreak gets a reference to the given NullableInt32 and assigns it to the AccumulatedWorkingTimeSinceLastBreak field.
func (o *WorkLogbook) SetAccumulatedWorkingTimeSinceLastBreak(v int32) {
	o.AccumulatedWorkingTimeSinceLastBreak.Set(&v)
}
// SetAccumulatedWorkingTimeSinceLastBreakNil sets the value for AccumulatedWorkingTimeSinceLastBreak to be an explicit nil
func (o *WorkLogbook) SetAccumulatedWorkingTimeSinceLastBreakNil() {
	o.AccumulatedWorkingTimeSinceLastBreak.Set(nil)
}

// UnsetAccumulatedWorkingTimeSinceLastBreak ensures that no value is present for AccumulatedWorkingTimeSinceLastBreak, not even an explicit nil
func (o *WorkLogbook) UnsetAccumulatedWorkingTimeSinceLastBreak() {
	o.AccumulatedWorkingTimeSinceLastBreak.Unset()
}

// GetAccumulatedDrivingTimeSinceLastDailyRest returns the AccumulatedDrivingTimeSinceLastDailyRest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkLogbook) GetAccumulatedDrivingTimeSinceLastDailyRest() int32 {
	if o == nil || IsNil(o.AccumulatedDrivingTimeSinceLastDailyRest.Get()) {
		var ret int32
		return ret
	}
	return *o.AccumulatedDrivingTimeSinceLastDailyRest.Get()
}

// GetAccumulatedDrivingTimeSinceLastDailyRestOk returns a tuple with the AccumulatedDrivingTimeSinceLastDailyRest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkLogbook) GetAccumulatedDrivingTimeSinceLastDailyRestOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccumulatedDrivingTimeSinceLastDailyRest.Get(), o.AccumulatedDrivingTimeSinceLastDailyRest.IsSet()
}

// HasAccumulatedDrivingTimeSinceLastDailyRest returns a boolean if a field has been set.
func (o *WorkLogbook) HasAccumulatedDrivingTimeSinceLastDailyRest() bool {
	if o != nil && o.AccumulatedDrivingTimeSinceLastDailyRest.IsSet() {
		return true
	}

	return false
}

// SetAccumulatedDrivingTimeSinceLastDailyRest gets a reference to the given NullableInt32 and assigns it to the AccumulatedDrivingTimeSinceLastDailyRest field.
func (o *WorkLogbook) SetAccumulatedDrivingTimeSinceLastDailyRest(v int32) {
	o.AccumulatedDrivingTimeSinceLastDailyRest.Set(&v)
}
// SetAccumulatedDrivingTimeSinceLastDailyRestNil sets the value for AccumulatedDrivingTimeSinceLastDailyRest to be an explicit nil
func (o *WorkLogbook) SetAccumulatedDrivingTimeSinceLastDailyRestNil() {
	o.AccumulatedDrivingTimeSinceLastDailyRest.Set(nil)
}

// UnsetAccumulatedDrivingTimeSinceLastDailyRest ensures that no value is present for AccumulatedDrivingTimeSinceLastDailyRest, not even an explicit nil
func (o *WorkLogbook) UnsetAccumulatedDrivingTimeSinceLastDailyRest() {
	o.AccumulatedDrivingTimeSinceLastDailyRest.Unset()
}

// GetAccumulatedTravelTimeSinceLastDailyRest returns the AccumulatedTravelTimeSinceLastDailyRest field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *WorkLogbook) GetAccumulatedTravelTimeSinceLastDailyRest() int32 {
	if o == nil || IsNil(o.AccumulatedTravelTimeSinceLastDailyRest.Get()) {
		var ret int32
		return ret
	}
	return *o.AccumulatedTravelTimeSinceLastDailyRest.Get()
}

// GetAccumulatedTravelTimeSinceLastDailyRestOk returns a tuple with the AccumulatedTravelTimeSinceLastDailyRest field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *WorkLogbook) GetAccumulatedTravelTimeSinceLastDailyRestOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AccumulatedTravelTimeSinceLastDailyRest.Get(), o.AccumulatedTravelTimeSinceLastDailyRest.IsSet()
}

// HasAccumulatedTravelTimeSinceLastDailyRest returns a boolean if a field has been set.
func (o *WorkLogbook) HasAccumulatedTravelTimeSinceLastDailyRest() bool {
	if o != nil && o.AccumulatedTravelTimeSinceLastDailyRest.IsSet() {
		return true
	}

	return false
}

// SetAccumulatedTravelTimeSinceLastDailyRest gets a reference to the given NullableInt32 and assigns it to the AccumulatedTravelTimeSinceLastDailyRest field.
func (o *WorkLogbook) SetAccumulatedTravelTimeSinceLastDailyRest(v int32) {
	o.AccumulatedTravelTimeSinceLastDailyRest.Set(&v)
}
// SetAccumulatedTravelTimeSinceLastDailyRestNil sets the value for AccumulatedTravelTimeSinceLastDailyRest to be an explicit nil
func (o *WorkLogbook) SetAccumulatedTravelTimeSinceLastDailyRestNil() {
	o.AccumulatedTravelTimeSinceLastDailyRest.Set(nil)
}

// UnsetAccumulatedTravelTimeSinceLastDailyRest ensures that no value is present for AccumulatedTravelTimeSinceLastDailyRest, not even an explicit nil
func (o *WorkLogbook) UnsetAccumulatedTravelTimeSinceLastDailyRest() {
	o.AccumulatedTravelTimeSinceLastDailyRest.Unset()
}

func (o WorkLogbook) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WorkLogbook) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["lastTimeTheDriverWorked"] = o.LastTimeTheDriverWorked
	if !IsNil(o.AccumulatedDrivingTimeSinceLastBreak) {
		toSerialize["accumulatedDrivingTimeSinceLastBreak"] = o.AccumulatedDrivingTimeSinceLastBreak
	}
	if o.AccumulatedWorkingTimeSinceLastBreak.IsSet() {
		toSerialize["accumulatedWorkingTimeSinceLastBreak"] = o.AccumulatedWorkingTimeSinceLastBreak.Get()
	}
	if o.AccumulatedDrivingTimeSinceLastDailyRest.IsSet() {
		toSerialize["accumulatedDrivingTimeSinceLastDailyRest"] = o.AccumulatedDrivingTimeSinceLastDailyRest.Get()
	}
	if o.AccumulatedTravelTimeSinceLastDailyRest.IsSet() {
		toSerialize["accumulatedTravelTimeSinceLastDailyRest"] = o.AccumulatedTravelTimeSinceLastDailyRest.Get()
	}
	return toSerialize, nil
}

func (o *WorkLogbook) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"lastTimeTheDriverWorked",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWorkLogbook := _WorkLogbook{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWorkLogbook)

	if err != nil {
		return err
	}

	*o = WorkLogbook(varWorkLogbook)

	return err
}

type NullableWorkLogbook struct {
	value *WorkLogbook
	isSet bool
}

func (v NullableWorkLogbook) Get() *WorkLogbook {
	return v.value
}

func (v *NullableWorkLogbook) Set(val *WorkLogbook) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkLogbook) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkLogbook) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkLogbook(val *WorkLogbook) *NullableWorkLogbook {
	return &NullableWorkLogbook{value: val, isSet: true}
}

func (v NullableWorkLogbook) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkLogbook) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


