/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.27
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Appointment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Appointment{}

// Appointment A collection of consecutive tasks that are allocated to a time slot.
type Appointment struct {
	// The unique identifier of the time slot this appointment is assigned to.
	TimeSlotId *string `json:"timeSlotId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// A list of breaks that are scheduled to be taken before the appointment.
	Breaks []Break `json:"breaks,omitempty"`
	// The duration [s] of the waiting period before the appointment can start.
	WaitingDuration *int32 `json:"waitingDuration,omitempty"`
	// The point in time when the appointment starts. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	Start *time.Time `json:"start,omitempty"`
	// The duration [s] of the preparation period before the first task can start. This is determined by the allocated time slot.
	PreparationDuration *int32 `json:"preparationDuration,omitempty"`
	// The list of tasks that are scheduled to be executed within this appointment. Each task can either be a pickup or a delivery. For every order scheduled on the route, the route will contain a task describing the pickup of the order and a task describing the delivery of the order. When the order is a pickup order (resp. delivery order), its delivery task (resp. pickup task) will be scheduled at a depot.
	Tasks []Task `json:"tasks,omitempty"`
	// The point in time when the appointment ends. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	End *time.Time `json:"end,omitempty"`
}

// NewAppointment instantiates a new Appointment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAppointment() *Appointment {
	this := Appointment{}
	return &this
}

// NewAppointmentWithDefaults instantiates a new Appointment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAppointmentWithDefaults() *Appointment {
	this := Appointment{}
	return &this
}

// GetTimeSlotId returns the TimeSlotId field value if set, zero value otherwise.
func (o *Appointment) GetTimeSlotId() string {
	if o == nil || IsNil(o.TimeSlotId) {
		var ret string
		return ret
	}
	return *o.TimeSlotId
}

// GetTimeSlotIdOk returns a tuple with the TimeSlotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appointment) GetTimeSlotIdOk() (*string, bool) {
	if o == nil || IsNil(o.TimeSlotId) {
		return nil, false
	}
	return o.TimeSlotId, true
}

// HasTimeSlotId returns a boolean if a field has been set.
func (o *Appointment) HasTimeSlotId() bool {
	if o != nil && !IsNil(o.TimeSlotId) {
		return true
	}

	return false
}

// SetTimeSlotId gets a reference to the given string and assigns it to the TimeSlotId field.
func (o *Appointment) SetTimeSlotId(v string) {
	o.TimeSlotId = &v
}

// GetBreaks returns the Breaks field value if set, zero value otherwise.
func (o *Appointment) GetBreaks() []Break {
	if o == nil || IsNil(o.Breaks) {
		var ret []Break
		return ret
	}
	return o.Breaks
}

// GetBreaksOk returns a tuple with the Breaks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appointment) GetBreaksOk() ([]Break, bool) {
	if o == nil || IsNil(o.Breaks) {
		return nil, false
	}
	return o.Breaks, true
}

// HasBreaks returns a boolean if a field has been set.
func (o *Appointment) HasBreaks() bool {
	if o != nil && !IsNil(o.Breaks) {
		return true
	}

	return false
}

// SetBreaks gets a reference to the given []Break and assigns it to the Breaks field.
func (o *Appointment) SetBreaks(v []Break) {
	o.Breaks = v
}

// GetWaitingDuration returns the WaitingDuration field value if set, zero value otherwise.
func (o *Appointment) GetWaitingDuration() int32 {
	if o == nil || IsNil(o.WaitingDuration) {
		var ret int32
		return ret
	}
	return *o.WaitingDuration
}

// GetWaitingDurationOk returns a tuple with the WaitingDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appointment) GetWaitingDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.WaitingDuration) {
		return nil, false
	}
	return o.WaitingDuration, true
}

// HasWaitingDuration returns a boolean if a field has been set.
func (o *Appointment) HasWaitingDuration() bool {
	if o != nil && !IsNil(o.WaitingDuration) {
		return true
	}

	return false
}

// SetWaitingDuration gets a reference to the given int32 and assigns it to the WaitingDuration field.
func (o *Appointment) SetWaitingDuration(v int32) {
	o.WaitingDuration = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *Appointment) GetStart() time.Time {
	if o == nil || IsNil(o.Start) {
		var ret time.Time
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appointment) GetStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Appointment) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given time.Time and assigns it to the Start field.
func (o *Appointment) SetStart(v time.Time) {
	o.Start = &v
}

// GetPreparationDuration returns the PreparationDuration field value if set, zero value otherwise.
func (o *Appointment) GetPreparationDuration() int32 {
	if o == nil || IsNil(o.PreparationDuration) {
		var ret int32
		return ret
	}
	return *o.PreparationDuration
}

// GetPreparationDurationOk returns a tuple with the PreparationDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appointment) GetPreparationDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.PreparationDuration) {
		return nil, false
	}
	return o.PreparationDuration, true
}

// HasPreparationDuration returns a boolean if a field has been set.
func (o *Appointment) HasPreparationDuration() bool {
	if o != nil && !IsNil(o.PreparationDuration) {
		return true
	}

	return false
}

// SetPreparationDuration gets a reference to the given int32 and assigns it to the PreparationDuration field.
func (o *Appointment) SetPreparationDuration(v int32) {
	o.PreparationDuration = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *Appointment) GetTasks() []Task {
	if o == nil || IsNil(o.Tasks) {
		var ret []Task
		return ret
	}
	return o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appointment) GetTasksOk() ([]Task, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *Appointment) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given []Task and assigns it to the Tasks field.
func (o *Appointment) SetTasks(v []Task) {
	o.Tasks = v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *Appointment) GetEnd() time.Time {
	if o == nil || IsNil(o.End) {
		var ret time.Time
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Appointment) GetEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Appointment) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given time.Time and assigns it to the End field.
func (o *Appointment) SetEnd(v time.Time) {
	o.End = &v
}

func (o Appointment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Appointment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.TimeSlotId) {
		toSerialize["timeSlotId"] = o.TimeSlotId
	}
	if !IsNil(o.Breaks) {
		toSerialize["breaks"] = o.Breaks
	}
	if !IsNil(o.WaitingDuration) {
		toSerialize["waitingDuration"] = o.WaitingDuration
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.PreparationDuration) {
		toSerialize["preparationDuration"] = o.PreparationDuration
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

type NullableAppointment struct {
	value *Appointment
	isSet bool
}

func (v NullableAppointment) Get() *Appointment {
	return v.value
}

func (v *NullableAppointment) Set(val *Appointment) {
	v.value = val
	v.isSet = true
}

func (v NullableAppointment) IsSet() bool {
	return v.isSet
}

func (v *NullableAppointment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAppointment(val *Appointment) *NullableAppointment {
	return &NullableAppointment{value: val, isSet: true}
}

func (v NullableAppointment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAppointment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


