/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.22
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderVehicleCombinationConstraintType Describes which combinations of orders and vehicles have to be respected or excluded. * `ORDER_REQUIRES_VEHICLE` - An order from the given order category can only be transported by a vehicle from the given vehicle category. * `VEHICLE_REQUIRES_ORDER` - A vehicle from the given vehicle category can only transport orders from the given order category. * `FORBIDDEN_COMBINATION` - An order from the given order category cannot be transported by a vehicle from the given vehicle category.
type OrderVehicleCombinationConstraintType string

// List of OrderVehicleCombinationConstraintType
const (
	ORDER_REQUIRES_VEHICLE OrderVehicleCombinationConstraintType = "ORDER_REQUIRES_VEHICLE"
	VEHICLE_REQUIRES_ORDER OrderVehicleCombinationConstraintType = "VEHICLE_REQUIRES_ORDER"
	FORBIDDEN_COMBINATION OrderVehicleCombinationConstraintType = "FORBIDDEN_COMBINATION"
)

// All allowed values of OrderVehicleCombinationConstraintType enum
var AllowedOrderVehicleCombinationConstraintTypeEnumValues = []OrderVehicleCombinationConstraintType{
	"ORDER_REQUIRES_VEHICLE",
	"VEHICLE_REQUIRES_ORDER",
	"FORBIDDEN_COMBINATION",
}

func (v *OrderVehicleCombinationConstraintType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderVehicleCombinationConstraintType(value)
	for _, existing := range AllowedOrderVehicleCombinationConstraintTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderVehicleCombinationConstraintType", value)
}

// NewOrderVehicleCombinationConstraintTypeFromValue returns a pointer to a valid OrderVehicleCombinationConstraintType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderVehicleCombinationConstraintTypeFromValue(v string) (*OrderVehicleCombinationConstraintType, error) {
	ev := OrderVehicleCombinationConstraintType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderVehicleCombinationConstraintType: valid values are %v", v, AllowedOrderVehicleCombinationConstraintTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderVehicleCombinationConstraintType) IsValid() bool {
	for _, existing := range AllowedOrderVehicleCombinationConstraintTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderVehicleCombinationConstraintType value
func (v OrderVehicleCombinationConstraintType) Ptr() *OrderVehicleCombinationConstraintType {
	return &v
}

type NullableOrderVehicleCombinationConstraintType struct {
	value *OrderVehicleCombinationConstraintType
	isSet bool
}

func (v NullableOrderVehicleCombinationConstraintType) Get() *OrderVehicleCombinationConstraintType {
	return v.value
}

func (v *NullableOrderVehicleCombinationConstraintType) Set(val *OrderVehicleCombinationConstraintType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderVehicleCombinationConstraintType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderVehicleCombinationConstraintType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderVehicleCombinationConstraintType(val *OrderVehicleCombinationConstraintType) *NullableOrderVehicleCombinationConstraintType {
	return &NullableOrderVehicleCombinationConstraintType{value: val, isSet: true}
}

func (v NullableOrderVehicleCombinationConstraintType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderVehicleCombinationConstraintType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

