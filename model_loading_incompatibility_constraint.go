/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the LoadingIncompatibilityConstraint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &LoadingIncompatibilityConstraint{}

// LoadingIncompatibilityConstraint Describes a constraint where orders are forbidden to be loaded or unloaded while other orders are loaded in the vehicle.
type LoadingIncompatibilityConstraint struct {
	// Orders belonging to this category must be loaded in the vehicle for this constraint to apply. The constraint will be ignored when no order belongs to this category.
	LoadedOrderCategory string `json:"loadedOrderCategory" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// Orders belonging to this category cannot be loaded or unloaded while the constraint applies. The constraint will be ignored when no order belongs to this category.
	ForbiddenOrderCategory string `json:"forbiddenOrderCategory" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The category of vehicles to which this constraint applies. When omitted the constraint applies to all vehicles. The constraint will be ignored when no vehicle belongs to this category.
	VehicleCategory *string `json:"vehicleCategory,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
}

type _LoadingIncompatibilityConstraint LoadingIncompatibilityConstraint

// NewLoadingIncompatibilityConstraint instantiates a new LoadingIncompatibilityConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLoadingIncompatibilityConstraint(loadedOrderCategory string, forbiddenOrderCategory string) *LoadingIncompatibilityConstraint {
	this := LoadingIncompatibilityConstraint{}
	this.LoadedOrderCategory = loadedOrderCategory
	this.ForbiddenOrderCategory = forbiddenOrderCategory
	return &this
}

// NewLoadingIncompatibilityConstraintWithDefaults instantiates a new LoadingIncompatibilityConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLoadingIncompatibilityConstraintWithDefaults() *LoadingIncompatibilityConstraint {
	this := LoadingIncompatibilityConstraint{}
	return &this
}

// GetLoadedOrderCategory returns the LoadedOrderCategory field value
func (o *LoadingIncompatibilityConstraint) GetLoadedOrderCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LoadedOrderCategory
}

// GetLoadedOrderCategoryOk returns a tuple with the LoadedOrderCategory field value
// and a boolean to check if the value has been set.
func (o *LoadingIncompatibilityConstraint) GetLoadedOrderCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoadedOrderCategory, true
}

// SetLoadedOrderCategory sets field value
func (o *LoadingIncompatibilityConstraint) SetLoadedOrderCategory(v string) {
	o.LoadedOrderCategory = v
}

// GetForbiddenOrderCategory returns the ForbiddenOrderCategory field value
func (o *LoadingIncompatibilityConstraint) GetForbiddenOrderCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForbiddenOrderCategory
}

// GetForbiddenOrderCategoryOk returns a tuple with the ForbiddenOrderCategory field value
// and a boolean to check if the value has been set.
func (o *LoadingIncompatibilityConstraint) GetForbiddenOrderCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForbiddenOrderCategory, true
}

// SetForbiddenOrderCategory sets field value
func (o *LoadingIncompatibilityConstraint) SetForbiddenOrderCategory(v string) {
	o.ForbiddenOrderCategory = v
}

// GetVehicleCategory returns the VehicleCategory field value if set, zero value otherwise.
func (o *LoadingIncompatibilityConstraint) GetVehicleCategory() string {
	if o == nil || IsNil(o.VehicleCategory) {
		var ret string
		return ret
	}
	return *o.VehicleCategory
}

// GetVehicleCategoryOk returns a tuple with the VehicleCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *LoadingIncompatibilityConstraint) GetVehicleCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.VehicleCategory) {
		return nil, false
	}
	return o.VehicleCategory, true
}

// HasVehicleCategory returns a boolean if a field has been set.
func (o *LoadingIncompatibilityConstraint) HasVehicleCategory() bool {
	if o != nil && !IsNil(o.VehicleCategory) {
		return true
	}

	return false
}

// SetVehicleCategory gets a reference to the given string and assigns it to the VehicleCategory field.
func (o *LoadingIncompatibilityConstraint) SetVehicleCategory(v string) {
	o.VehicleCategory = &v
}

func (o LoadingIncompatibilityConstraint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o LoadingIncompatibilityConstraint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["loadedOrderCategory"] = o.LoadedOrderCategory
	toSerialize["forbiddenOrderCategory"] = o.ForbiddenOrderCategory
	if !IsNil(o.VehicleCategory) {
		toSerialize["vehicleCategory"] = o.VehicleCategory
	}
	return toSerialize, nil
}

func (o *LoadingIncompatibilityConstraint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"loadedOrderCategory",
		"forbiddenOrderCategory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLoadingIncompatibilityConstraint := _LoadingIncompatibilityConstraint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLoadingIncompatibilityConstraint)

	if err != nil {
		return err
	}

	*o = LoadingIncompatibilityConstraint(varLoadingIncompatibilityConstraint)

	return err
}

type NullableLoadingIncompatibilityConstraint struct {
	value *LoadingIncompatibilityConstraint
	isSet bool
}

func (v NullableLoadingIncompatibilityConstraint) Get() *LoadingIncompatibilityConstraint {
	return v.value
}

func (v *NullableLoadingIncompatibilityConstraint) Set(val *LoadingIncompatibilityConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableLoadingIncompatibilityConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableLoadingIncompatibilityConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoadingIncompatibilityConstraint(val *LoadingIncompatibilityConstraint) *NullableLoadingIncompatibilityConstraint {
	return &NullableLoadingIncompatibilityConstraint{value: val, isSet: true}
}

func (v NullableLoadingIncompatibilityConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoadingIncompatibilityConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


