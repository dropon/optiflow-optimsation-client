/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"fmt"
)

// TweakToObjective A tweak to objective defines additional optimization criteria. Without any tweak, the standard optimization goal is to plan as many transports as possible with as few vehicles as possible.   * `AVOID_INTERSECTIONS` - The focus of this approach is to avoid intersections of edges, where an edge is a straight line drawn between two consecutive stops in a route. The number of routes may be higher compared to the standard optimization goal.   * `IGNORE_MINIMIZATION_OF_NUMBER_OF_ROUTES` - With this tweak, the number of vehicles used in a plan, and thus the number of routes, is not minimized.
type TweakToObjective string

// List of TweakToObjective
const (
	AVOID_INTERSECTIONS TweakToObjective = "AVOID_INTERSECTIONS"
	IGNORE_MINIMIZATION_OF_NUMBER_OF_ROUTES TweakToObjective = "IGNORE_MINIMIZATION_OF_NUMBER_OF_ROUTES"
)

// All allowed values of TweakToObjective enum
var AllowedTweakToObjectiveEnumValues = []TweakToObjective{
	"AVOID_INTERSECTIONS",
	"IGNORE_MINIMIZATION_OF_NUMBER_OF_ROUTES",
}

func (v *TweakToObjective) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TweakToObjective(value)
	for _, existing := range AllowedTweakToObjectiveEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TweakToObjective", value)
}

// NewTweakToObjectiveFromValue returns a pointer to a valid TweakToObjective
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTweakToObjectiveFromValue(v string) (*TweakToObjective, error) {
	ev := TweakToObjective(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TweakToObjective: valid values are %v", v, AllowedTweakToObjectiveEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TweakToObjective) IsValid() bool {
	for _, existing := range AllowedTweakToObjectiveEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TweakToObjective value
func (v TweakToObjective) Ptr() *TweakToObjective {
	return &v
}

type NullableTweakToObjective struct {
	value *TweakToObjective
	isSet bool
}

func (v NullableTweakToObjective) Get() *TweakToObjective {
	return v.value
}

func (v *NullableTweakToObjective) Set(val *TweakToObjective) {
	v.value = val
	v.isSet = true
}

func (v NullableTweakToObjective) IsSet() bool {
	return v.isSet
}

func (v *NullableTweakToObjective) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTweakToObjective(val *TweakToObjective) *NullableTweakToObjective {
	return &NullableTweakToObjective{value: val, isSet: true}
}

func (v NullableTweakToObjective) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTweakToObjective) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

