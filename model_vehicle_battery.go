/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the VehicleBattery type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VehicleBattery{}

// VehicleBattery Physical properties of the battery of an electric vehicle.
type VehicleBattery struct {
	// The total battery capacity [kWh].
	Capacity float64 `json:"capacity"`
	StateOfCharge *BatteryStateOfCharge `json:"stateOfCharge,omitempty"`
	Consumption BatteryConsumption `json:"consumption"`
}

type _VehicleBattery VehicleBattery

// NewVehicleBattery instantiates a new VehicleBattery object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicleBattery(capacity float64, consumption BatteryConsumption) *VehicleBattery {
	this := VehicleBattery{}
	this.Capacity = capacity
	this.Consumption = consumption
	return &this
}

// NewVehicleBatteryWithDefaults instantiates a new VehicleBattery object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleBatteryWithDefaults() *VehicleBattery {
	this := VehicleBattery{}
	return &this
}

// GetCapacity returns the Capacity field value
func (o *VehicleBattery) GetCapacity() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Capacity
}

// GetCapacityOk returns a tuple with the Capacity field value
// and a boolean to check if the value has been set.
func (o *VehicleBattery) GetCapacityOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Capacity, true
}

// SetCapacity sets field value
func (o *VehicleBattery) SetCapacity(v float64) {
	o.Capacity = v
}

// GetStateOfCharge returns the StateOfCharge field value if set, zero value otherwise.
func (o *VehicleBattery) GetStateOfCharge() BatteryStateOfCharge {
	if o == nil || IsNil(o.StateOfCharge) {
		var ret BatteryStateOfCharge
		return ret
	}
	return *o.StateOfCharge
}

// GetStateOfChargeOk returns a tuple with the StateOfCharge field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleBattery) GetStateOfChargeOk() (*BatteryStateOfCharge, bool) {
	if o == nil || IsNil(o.StateOfCharge) {
		return nil, false
	}
	return o.StateOfCharge, true
}

// HasStateOfCharge returns a boolean if a field has been set.
func (o *VehicleBattery) HasStateOfCharge() bool {
	if o != nil && !IsNil(o.StateOfCharge) {
		return true
	}

	return false
}

// SetStateOfCharge gets a reference to the given BatteryStateOfCharge and assigns it to the StateOfCharge field.
func (o *VehicleBattery) SetStateOfCharge(v BatteryStateOfCharge) {
	o.StateOfCharge = &v
}

// GetConsumption returns the Consumption field value
func (o *VehicleBattery) GetConsumption() BatteryConsumption {
	if o == nil {
		var ret BatteryConsumption
		return ret
	}

	return o.Consumption
}

// GetConsumptionOk returns a tuple with the Consumption field value
// and a boolean to check if the value has been set.
func (o *VehicleBattery) GetConsumptionOk() (*BatteryConsumption, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Consumption, true
}

// SetConsumption sets field value
func (o *VehicleBattery) SetConsumption(v BatteryConsumption) {
	o.Consumption = v
}

func (o VehicleBattery) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VehicleBattery) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["capacity"] = o.Capacity
	if !IsNil(o.StateOfCharge) {
		toSerialize["stateOfCharge"] = o.StateOfCharge
	}
	toSerialize["consumption"] = o.Consumption
	return toSerialize, nil
}

func (o *VehicleBattery) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"capacity",
		"consumption",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicleBattery := _VehicleBattery{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicleBattery)

	if err != nil {
		return err
	}

	*o = VehicleBattery(varVehicleBattery)

	return err
}

type NullableVehicleBattery struct {
	value *VehicleBattery
	isSet bool
}

func (v NullableVehicleBattery) Get() *VehicleBattery {
	return v.value
}

func (v *NullableVehicleBattery) Set(val *VehicleBattery) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicleBattery) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicleBattery) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicleBattery(val *VehicleBattery) *NullableVehicleBattery {
	return &NullableVehicleBattery{value: val, isSet: true}
}

func (v NullableVehicleBattery) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicleBattery) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


