/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// DepotVehicleCombinationConstraintType Describes which combination of depots and vehicles have to be respected or excluded. * `DEPOT_REQUIRES_VEHICLE` - A depot from the given depot category can only be visited bya vehicle from the given vehicle category. * `VEHICLE_REQUIRES_DEPOT` - A vehicle from the given vehicle category can only visit depots from the given depot category. * `FORBIDDEN_COMBINATION` - A depot from the given depot category cannot be visited by a vehicle from the given vehicle category.
type DepotVehicleCombinationConstraintType string

// List of DepotVehicleCombinationConstraintType
const (
	DEPOT_REQUIRES_VEHICLE DepotVehicleCombinationConstraintType = "DEPOT_REQUIRES_VEHICLE"
	VEHICLE_REQUIRES_DEPOT DepotVehicleCombinationConstraintType = "VEHICLE_REQUIRES_DEPOT"
	FORBIDDEN_COMBINATION DepotVehicleCombinationConstraintType = "FORBIDDEN_COMBINATION"
)

// All allowed values of DepotVehicleCombinationConstraintType enum
var AllowedDepotVehicleCombinationConstraintTypeEnumValues = []DepotVehicleCombinationConstraintType{
	"DEPOT_REQUIRES_VEHICLE",
	"VEHICLE_REQUIRES_DEPOT",
	"FORBIDDEN_COMBINATION",
}

func (v *DepotVehicleCombinationConstraintType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := DepotVehicleCombinationConstraintType(value)
	for _, existing := range AllowedDepotVehicleCombinationConstraintTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid DepotVehicleCombinationConstraintType", value)
}

// NewDepotVehicleCombinationConstraintTypeFromValue returns a pointer to a valid DepotVehicleCombinationConstraintType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewDepotVehicleCombinationConstraintTypeFromValue(v string) (*DepotVehicleCombinationConstraintType, error) {
	ev := DepotVehicleCombinationConstraintType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for DepotVehicleCombinationConstraintType: valid values are %v", v, AllowedDepotVehicleCombinationConstraintTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v DepotVehicleCombinationConstraintType) IsValid() bool {
	for _, existing := range AllowedDepotVehicleCombinationConstraintTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to DepotVehicleCombinationConstraintType value
func (v DepotVehicleCombinationConstraintType) Ptr() *DepotVehicleCombinationConstraintType {
	return &v
}

type NullableDepotVehicleCombinationConstraintType struct {
	value *DepotVehicleCombinationConstraintType
	isSet bool
}

func (v NullableDepotVehicleCombinationConstraintType) Get() *DepotVehicleCombinationConstraintType {
	return v.value
}

func (v *NullableDepotVehicleCombinationConstraintType) Set(val *DepotVehicleCombinationConstraintType) {
	v.value = val
	v.isSet = true
}

func (v NullableDepotVehicleCombinationConstraintType) IsSet() bool {
	return v.isSet
}

func (v *NullableDepotVehicleCombinationConstraintType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDepotVehicleCombinationConstraintType(val *DepotVehicleCombinationConstraintType) *NullableDepotVehicleCombinationConstraintType {
	return &NullableDepotVehicleCombinationConstraintType{value: val, isSet: true}
}

func (v NullableDepotVehicleCombinationConstraintType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDepotVehicleCombinationConstraintType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

