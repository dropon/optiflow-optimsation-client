/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the CausingError type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CausingError{}

// CausingError struct for CausingError
type CausingError struct {
	// A human readable message that describes the error.
	Description string `json:"description"`
	// A constant string that can be used to identify this error class programmatically.  If additional information is available for an errorCode, it will be provided as key-value pairs with the parameter **details**. The keys available for a specific errorCode are documented directly with the errorCode. Unless stated otherwise, the values are of type string.  As an example, the following errorCode provides one key-value pair in the **details**. The key is called **value**. * `GENERAL_INVALID_VALUE` - A parameter is set to an invalid value.   * `value` - The invalid value.  Note that additional errorCodes as well as the **details** of existing errorCodes may be added at any time. Furthermore, the **description** may change at any time.  **Error codes for** `GENERAL_VALIDATION_ERROR` * `GENERAL_UNRECOGNIZED_PARAMETER` - A parameter is unknown. * `GENERAL_MISSING_PARAMETER` - A required parameter is missing. * `GENERAL_TYPE_VIOLATED` - The value of a parameter has an invalid type.   * `type` - The type. * `GENERAL_FORMAT_VIOLATED` - The value of a parameter has an invalid format.   * `format` - The format. * `GENERAL_PATTERN_VIOLATED` - The value of a string parameter does not satisfy the required pattern.   * `pattern` - The pattern. * `GENERAL_MINIMUM_LENGTH_VIOLATED` - The minimum length of a string is violated.   * `minimumLength` - The minimum length (integer). * `GENERAL_MAXIMUM_LENGTH_VIOLATED` - The maximum length of a string is violated.   * `maximumLength` - The maximum length (integer). * `GENERAL_MINIMUM_ITEMS_VIOLATED` - The minimum number of items of an array is violated.   * `minimumItems` - The minimum number of items (integer). * `GENERAL_MAXIMUM_ITEMS_VIOLATED` - The maximum number of items of an array is violated.   * `maximumItems` - The maximum number of items (integer). * `GENERAL_UNIQUE_ITEMS_VIOLATED` - The items of an array are not unique.   * `indexes` - The list of indexes that have the same value. * `GENERAL_MINIMUM_VALUE_VIOLATED` - The minimum value of a parameter is violated.   * `minimumValue` - The minimum value (integer or double). * `GENERAL_MAXIMUM_VALUE_VIOLATED` - The maximum value of a parameter is violated.   * `maximumValue` - The maximum value (integer or double). * `GENERAL_MULTIPLE_OF_VIOLATED` - The value of a parameter is not a multiple of a specific value.   * `multipleOf` - The number the value should be a multiple of (integer or double). * `GENERAL_ENUM_VIOLATED` - The value of a parameter is not one of the specified enum values.   * `enum` - The allowed enum values. * `GENERAL_INVALID_VALUE` - A parameter is set to an invalid value.   * `value` - The invalid value.   * `message` - A message explaining the invalid value. * `GENERAL_CONFLICTING_PARAMETER` - The value of a parameter conflicts with the value of one or more other parameters.   * `conflictingParameters` - The parameters whose values cause the conflict.   * `message` - A message explaining the conflict. * `GENERAL_DUPLICATE_PARAMETER` - A parameter is duplicated.  **Error codes for** `ROUTE_OPTIMIZATION_RESTRICTION_EXCEEDED` * `ROUTE_OPTIMIZATION_TOO_MANY_LOCATIONS` - The request contains too many locations.   * `locations` - The number of locations.   * `limit` - The limit. * `ROUTE_OPTIMIZATION_TOO_MANY_ORDERS` - The request contains too many orders.   * `orders` - The number of orders.   * `limit` - The limit. * `ROUTE_OPTIMIZATION_TOO_MANY_VEHICLES` - The request contains too many vehicles.   * `vehicles` - The number of vehicles.   * `limit` - The limit. * `ROUTE_OPTIMIZATION_TOO_LONG_DURATION` - The duration of the request is too long.   * `duration` - The duration of the request [s].   * `limit` - The limit. * `ROUTE_OPTIMIZATION_TOO_MANY_PROFILES` - The request contains too many different combinations of profiles and traffic modes.   * `profiles` - The number of combinations of profiles and traffic modes.   * `limit` - The limit. * `ROUTE_OPTIMIZATION_TOO_MANY_OPTIMIZATIONS` - The maximum number of concurrent optimizations is exceeded.   * `runningOptimizationIds` - Currently running optimization ids [string].   * `limit` - The limit. * `ROUTE_OPTIMIZATION_ROUTES_FORBIDDEN` - The request is not allowed to contain routes. * `ROUTE_OPTIMIZATION_STOP_CONCURRENCY_FORBIDDEN` - The request is not allowed to contain locations with stop concurrency.  **Error codes for** `GENERAL_RESOURCE_NOT_FOUND` * `GENERAL_INVALID_ID` - No resource exists for the provided ID.   * `value` - The ID for which no resource exists.  **Error codes for** `GENERAL_UNSUPPORTED_MEDIA_TYPE` * `GENERAL_INVALID_CONTENT_ENCODING` - The content encoding of the request is not supported.   * `contentEncodings` - A list of supported content encodings.
	ErrorCode string `json:"errorCode"`
	// The name of the affected query or path parameter or a JSONPath to the affected property of the request.
	Parameter *string `json:"parameter,omitempty"`
	// Additional properties specific to this error class.
	Details map[string]interface{} `json:"details,omitempty"`
}

type _CausingError CausingError

// NewCausingError instantiates a new CausingError object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCausingError(description string, errorCode string) *CausingError {
	this := CausingError{}
	this.Description = description
	this.ErrorCode = errorCode
	return &this
}

// NewCausingErrorWithDefaults instantiates a new CausingError object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCausingErrorWithDefaults() *CausingError {
	this := CausingError{}
	return &this
}

// GetDescription returns the Description field value
func (o *CausingError) GetDescription() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Description
}

// GetDescriptionOk returns a tuple with the Description field value
// and a boolean to check if the value has been set.
func (o *CausingError) GetDescriptionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Description, true
}

// SetDescription sets field value
func (o *CausingError) SetDescription(v string) {
	o.Description = v
}

// GetErrorCode returns the ErrorCode field value
func (o *CausingError) GetErrorCode() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ErrorCode
}

// GetErrorCodeOk returns a tuple with the ErrorCode field value
// and a boolean to check if the value has been set.
func (o *CausingError) GetErrorCodeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ErrorCode, true
}

// SetErrorCode sets field value
func (o *CausingError) SetErrorCode(v string) {
	o.ErrorCode = v
}

// GetParameter returns the Parameter field value if set, zero value otherwise.
func (o *CausingError) GetParameter() string {
	if o == nil || IsNil(o.Parameter) {
		var ret string
		return ret
	}
	return *o.Parameter
}

// GetParameterOk returns a tuple with the Parameter field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CausingError) GetParameterOk() (*string, bool) {
	if o == nil || IsNil(o.Parameter) {
		return nil, false
	}
	return o.Parameter, true
}

// HasParameter returns a boolean if a field has been set.
func (o *CausingError) HasParameter() bool {
	if o != nil && !IsNil(o.Parameter) {
		return true
	}

	return false
}

// SetParameter gets a reference to the given string and assigns it to the Parameter field.
func (o *CausingError) SetParameter(v string) {
	o.Parameter = &v
}

// GetDetails returns the Details field value if set, zero value otherwise.
func (o *CausingError) GetDetails() map[string]interface{} {
	if o == nil || IsNil(o.Details) {
		var ret map[string]interface{}
		return ret
	}
	return o.Details
}

// GetDetailsOk returns a tuple with the Details field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CausingError) GetDetailsOk() (map[string]interface{}, bool) {
	if o == nil || IsNil(o.Details) {
		return map[string]interface{}{}, false
	}
	return o.Details, true
}

// HasDetails returns a boolean if a field has been set.
func (o *CausingError) HasDetails() bool {
	if o != nil && !IsNil(o.Details) {
		return true
	}

	return false
}

// SetDetails gets a reference to the given map[string]interface{} and assigns it to the Details field.
func (o *CausingError) SetDetails(v map[string]interface{}) {
	o.Details = v
}

func (o CausingError) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CausingError) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["description"] = o.Description
	toSerialize["errorCode"] = o.ErrorCode
	if !IsNil(o.Parameter) {
		toSerialize["parameter"] = o.Parameter
	}
	if !IsNil(o.Details) {
		toSerialize["details"] = o.Details
	}
	return toSerialize, nil
}

func (o *CausingError) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"description",
		"errorCode",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCausingError := _CausingError{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCausingError)

	if err != nil {
		return err
	}

	*o = CausingError(varCausingError)

	return err
}

type NullableCausingError struct {
	value *CausingError
	isSet bool
}

func (v NullableCausingError) Get() *CausingError {
	return v.value
}

func (v *NullableCausingError) Set(val *CausingError) {
	v.value = val
	v.isSet = true
}

func (v NullableCausingError) IsSet() bool {
	return v.isSet
}

func (v *NullableCausingError) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCausingError(val *CausingError) *NullableCausingError {
	return &NullableCausingError{value: val, isSet: true}
}

func (v NullableCausingError) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCausingError) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


