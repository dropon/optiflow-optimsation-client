/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.16
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the RouteStart type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteStart{}

// RouteStart A description of the location and time the route starts.
type RouteStart struct {
	// The unique identifier of the start location of the route. This is the start location of the assigned vehicle.
	LocationId *string `json:"locationId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The point in time when the route starts. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	Start *time.Time `json:"start,omitempty"`
	// The duration [s] between the start of the route and the departure at the start location.
	Duration *int32 `json:"duration,omitempty"`
	// The point in time when the vehicle departs at its start location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	Departure *time.Time `json:"departure,omitempty"`
}

// NewRouteStart instantiates a new RouteStart object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteStart() *RouteStart {
	this := RouteStart{}
	return &this
}

// NewRouteStartWithDefaults instantiates a new RouteStart object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteStartWithDefaults() *RouteStart {
	this := RouteStart{}
	return &this
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *RouteStart) GetLocationId() string {
	if o == nil || IsNil(o.LocationId) {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteStart) GetLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocationId) {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *RouteStart) HasLocationId() bool {
	if o != nil && !IsNil(o.LocationId) {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *RouteStart) SetLocationId(v string) {
	o.LocationId = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *RouteStart) GetStart() time.Time {
	if o == nil || IsNil(o.Start) {
		var ret time.Time
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteStart) GetStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *RouteStart) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given time.Time and assigns it to the Start field.
func (o *RouteStart) SetStart(v time.Time) {
	o.Start = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *RouteStart) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteStart) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *RouteStart) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *RouteStart) SetDuration(v int32) {
	o.Duration = &v
}

// GetDeparture returns the Departure field value if set, zero value otherwise.
func (o *RouteStart) GetDeparture() time.Time {
	if o == nil || IsNil(o.Departure) {
		var ret time.Time
		return ret
	}
	return *o.Departure
}

// GetDepartureOk returns a tuple with the Departure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteStart) GetDepartureOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Departure) {
		return nil, false
	}
	return o.Departure, true
}

// HasDeparture returns a boolean if a field has been set.
func (o *RouteStart) HasDeparture() bool {
	if o != nil && !IsNil(o.Departure) {
		return true
	}

	return false
}

// SetDeparture gets a reference to the given time.Time and assigns it to the Departure field.
func (o *RouteStart) SetDeparture(v time.Time) {
	o.Departure = &v
}

func (o RouteStart) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteStart) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocationId) {
		toSerialize["locationId"] = o.LocationId
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Departure) {
		toSerialize["departure"] = o.Departure
	}
	return toSerialize, nil
}

type NullableRouteStart struct {
	value *RouteStart
	isSet bool
}

func (v NullableRouteStart) Get() *RouteStart {
	return v.value
}

func (v *NullableRouteStart) Set(val *RouteStart) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteStart) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteStart) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteStart(val *RouteStart) *NullableRouteStart {
	return &NullableRouteStart{value: val, isSet: true}
}

func (v NullableRouteStart) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteStart) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


