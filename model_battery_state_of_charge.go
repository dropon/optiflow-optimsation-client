/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the BatteryStateOfCharge type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatteryStateOfCharge{}

// BatteryStateOfCharge Defines and constrains the vehicleâ€™s battery energy level.
type BatteryStateOfCharge struct {
	// The initial battery energy level as a fraction of total capacity (0.0 = empty, 1.0 = fully charged).
	Initial *float64 `json:"initial,omitempty"`
	// The minimum allowed battery energy level as a fraction of total capacity (0.0 = empty, 1.0 = fully charged).
	Minimum *float64 `json:"minimum,omitempty"`
}

// NewBatteryStateOfCharge instantiates a new BatteryStateOfCharge object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatteryStateOfCharge() *BatteryStateOfCharge {
	this := BatteryStateOfCharge{}
	var initial float64 = 1
	this.Initial = &initial
	var minimum float64 = 0
	this.Minimum = &minimum
	return &this
}

// NewBatteryStateOfChargeWithDefaults instantiates a new BatteryStateOfCharge object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatteryStateOfChargeWithDefaults() *BatteryStateOfCharge {
	this := BatteryStateOfCharge{}
	var initial float64 = 1
	this.Initial = &initial
	var minimum float64 = 0
	this.Minimum = &minimum
	return &this
}

// GetInitial returns the Initial field value if set, zero value otherwise.
func (o *BatteryStateOfCharge) GetInitial() float64 {
	if o == nil || IsNil(o.Initial) {
		var ret float64
		return ret
	}
	return *o.Initial
}

// GetInitialOk returns a tuple with the Initial field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatteryStateOfCharge) GetInitialOk() (*float64, bool) {
	if o == nil || IsNil(o.Initial) {
		return nil, false
	}
	return o.Initial, true
}

// HasInitial returns a boolean if a field has been set.
func (o *BatteryStateOfCharge) HasInitial() bool {
	if o != nil && !IsNil(o.Initial) {
		return true
	}

	return false
}

// SetInitial gets a reference to the given float64 and assigns it to the Initial field.
func (o *BatteryStateOfCharge) SetInitial(v float64) {
	o.Initial = &v
}

// GetMinimum returns the Minimum field value if set, zero value otherwise.
func (o *BatteryStateOfCharge) GetMinimum() float64 {
	if o == nil || IsNil(o.Minimum) {
		var ret float64
		return ret
	}
	return *o.Minimum
}

// GetMinimumOk returns a tuple with the Minimum field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BatteryStateOfCharge) GetMinimumOk() (*float64, bool) {
	if o == nil || IsNil(o.Minimum) {
		return nil, false
	}
	return o.Minimum, true
}

// HasMinimum returns a boolean if a field has been set.
func (o *BatteryStateOfCharge) HasMinimum() bool {
	if o != nil && !IsNil(o.Minimum) {
		return true
	}

	return false
}

// SetMinimum gets a reference to the given float64 and assigns it to the Minimum field.
func (o *BatteryStateOfCharge) SetMinimum(v float64) {
	o.Minimum = &v
}

func (o BatteryStateOfCharge) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatteryStateOfCharge) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Initial) {
		toSerialize["initial"] = o.Initial
	}
	if !IsNil(o.Minimum) {
		toSerialize["minimum"] = o.Minimum
	}
	return toSerialize, nil
}

type NullableBatteryStateOfCharge struct {
	value *BatteryStateOfCharge
	isSet bool
}

func (v NullableBatteryStateOfCharge) Get() *BatteryStateOfCharge {
	return v.value
}

func (v *NullableBatteryStateOfCharge) Set(val *BatteryStateOfCharge) {
	v.value = val
	v.isSet = true
}

func (v NullableBatteryStateOfCharge) IsSet() bool {
	return v.isSet
}

func (v *NullableBatteryStateOfCharge) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatteryStateOfCharge(val *BatteryStateOfCharge) *NullableBatteryStateOfCharge {
	return &NullableBatteryStateOfCharge{value: val, isSet: true}
}

func (v NullableBatteryStateOfCharge) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatteryStateOfCharge) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


