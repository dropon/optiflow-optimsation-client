/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.20
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Stop type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stop{}

// Stop A location visit on a route where one or more tasks are scheduled.
type Stop struct {
	// The unique identifier of the location where this stop is taking place.
	LocationId *string `json:"locationId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	Approach *Leg `json:"approach,omitempty"`
	// The point in time when the vehicle arrives at the location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	Arrival *time.Time `json:"arrival,omitempty"`
	// A period of time [s] that is required between the arrival at the location and the start of the first appointment. The preparation duration is scheduled before tasks can be executed at the stop.
	PreparationDuration *int32 `json:"preparationDuration,omitempty"`
	// A list of appointments that describe the tasks that are scheduled for execution at this stop. Consecutive tasks are grouped into an appointment if they have been assigned to the same time slot.
	Appointments []Appointment `json:"appointments,omitempty"`
	// Describes the index of the vehicle slot this stop is assigned to. If there is no vehicle slot provided for this index, the stop is assigned to an extra vehicle slot.
	VehicleSlotIndex *int32 `json:"vehicleSlotIndex,omitempty"`
	// The point in time when the vehicle departs at the location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	Departure *time.Time `json:"departure,omitempty"`
}

// NewStop instantiates a new Stop object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStop() *Stop {
	this := Stop{}
	return &this
}

// NewStopWithDefaults instantiates a new Stop object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStopWithDefaults() *Stop {
	this := Stop{}
	return &this
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *Stop) GetLocationId() string {
	if o == nil || IsNil(o.LocationId) {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocationId) {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *Stop) HasLocationId() bool {
	if o != nil && !IsNil(o.LocationId) {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *Stop) SetLocationId(v string) {
	o.LocationId = &v
}

// GetApproach returns the Approach field value if set, zero value otherwise.
func (o *Stop) GetApproach() Leg {
	if o == nil || IsNil(o.Approach) {
		var ret Leg
		return ret
	}
	return *o.Approach
}

// GetApproachOk returns a tuple with the Approach field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetApproachOk() (*Leg, bool) {
	if o == nil || IsNil(o.Approach) {
		return nil, false
	}
	return o.Approach, true
}

// HasApproach returns a boolean if a field has been set.
func (o *Stop) HasApproach() bool {
	if o != nil && !IsNil(o.Approach) {
		return true
	}

	return false
}

// SetApproach gets a reference to the given Leg and assigns it to the Approach field.
func (o *Stop) SetApproach(v Leg) {
	o.Approach = &v
}

// GetArrival returns the Arrival field value if set, zero value otherwise.
func (o *Stop) GetArrival() time.Time {
	if o == nil || IsNil(o.Arrival) {
		var ret time.Time
		return ret
	}
	return *o.Arrival
}

// GetArrivalOk returns a tuple with the Arrival field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetArrivalOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Arrival) {
		return nil, false
	}
	return o.Arrival, true
}

// HasArrival returns a boolean if a field has been set.
func (o *Stop) HasArrival() bool {
	if o != nil && !IsNil(o.Arrival) {
		return true
	}

	return false
}

// SetArrival gets a reference to the given time.Time and assigns it to the Arrival field.
func (o *Stop) SetArrival(v time.Time) {
	o.Arrival = &v
}

// GetPreparationDuration returns the PreparationDuration field value if set, zero value otherwise.
func (o *Stop) GetPreparationDuration() int32 {
	if o == nil || IsNil(o.PreparationDuration) {
		var ret int32
		return ret
	}
	return *o.PreparationDuration
}

// GetPreparationDurationOk returns a tuple with the PreparationDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetPreparationDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.PreparationDuration) {
		return nil, false
	}
	return o.PreparationDuration, true
}

// HasPreparationDuration returns a boolean if a field has been set.
func (o *Stop) HasPreparationDuration() bool {
	if o != nil && !IsNil(o.PreparationDuration) {
		return true
	}

	return false
}

// SetPreparationDuration gets a reference to the given int32 and assigns it to the PreparationDuration field.
func (o *Stop) SetPreparationDuration(v int32) {
	o.PreparationDuration = &v
}

// GetAppointments returns the Appointments field value if set, zero value otherwise.
func (o *Stop) GetAppointments() []Appointment {
	if o == nil || IsNil(o.Appointments) {
		var ret []Appointment
		return ret
	}
	return o.Appointments
}

// GetAppointmentsOk returns a tuple with the Appointments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetAppointmentsOk() ([]Appointment, bool) {
	if o == nil || IsNil(o.Appointments) {
		return nil, false
	}
	return o.Appointments, true
}

// HasAppointments returns a boolean if a field has been set.
func (o *Stop) HasAppointments() bool {
	if o != nil && !IsNil(o.Appointments) {
		return true
	}

	return false
}

// SetAppointments gets a reference to the given []Appointment and assigns it to the Appointments field.
func (o *Stop) SetAppointments(v []Appointment) {
	o.Appointments = v
}

// GetVehicleSlotIndex returns the VehicleSlotIndex field value if set, zero value otherwise.
func (o *Stop) GetVehicleSlotIndex() int32 {
	if o == nil || IsNil(o.VehicleSlotIndex) {
		var ret int32
		return ret
	}
	return *o.VehicleSlotIndex
}

// GetVehicleSlotIndexOk returns a tuple with the VehicleSlotIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetVehicleSlotIndexOk() (*int32, bool) {
	if o == nil || IsNil(o.VehicleSlotIndex) {
		return nil, false
	}
	return o.VehicleSlotIndex, true
}

// HasVehicleSlotIndex returns a boolean if a field has been set.
func (o *Stop) HasVehicleSlotIndex() bool {
	if o != nil && !IsNil(o.VehicleSlotIndex) {
		return true
	}

	return false
}

// SetVehicleSlotIndex gets a reference to the given int32 and assigns it to the VehicleSlotIndex field.
func (o *Stop) SetVehicleSlotIndex(v int32) {
	o.VehicleSlotIndex = &v
}

// GetDeparture returns the Departure field value if set, zero value otherwise.
func (o *Stop) GetDeparture() time.Time {
	if o == nil || IsNil(o.Departure) {
		var ret time.Time
		return ret
	}
	return *o.Departure
}

// GetDepartureOk returns a tuple with the Departure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetDepartureOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Departure) {
		return nil, false
	}
	return o.Departure, true
}

// HasDeparture returns a boolean if a field has been set.
func (o *Stop) HasDeparture() bool {
	if o != nil && !IsNil(o.Departure) {
		return true
	}

	return false
}

// SetDeparture gets a reference to the given time.Time and assigns it to the Departure field.
func (o *Stop) SetDeparture(v time.Time) {
	o.Departure = &v
}

func (o Stop) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stop) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocationId) {
		toSerialize["locationId"] = o.LocationId
	}
	if !IsNil(o.Approach) {
		toSerialize["approach"] = o.Approach
	}
	if !IsNil(o.Arrival) {
		toSerialize["arrival"] = o.Arrival
	}
	if !IsNil(o.PreparationDuration) {
		toSerialize["preparationDuration"] = o.PreparationDuration
	}
	if !IsNil(o.Appointments) {
		toSerialize["appointments"] = o.Appointments
	}
	if !IsNil(o.VehicleSlotIndex) {
		toSerialize["vehicleSlotIndex"] = o.VehicleSlotIndex
	}
	if !IsNil(o.Departure) {
		toSerialize["departure"] = o.Departure
	}
	return toSerialize, nil
}

type NullableStop struct {
	value *Stop
	isSet bool
}

func (v NullableStop) Get() *Stop {
	return v.value
}

func (v *NullableStop) Set(val *Stop) {
	v.value = val
	v.isSet = true
}

func (v NullableStop) IsSet() bool {
	return v.isSet
}

func (v *NullableStop) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStop(val *Stop) *NullableStop {
	return &NullableStop{value: val, isSet: true}
}

func (v NullableStop) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStop) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


