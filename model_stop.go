/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Stop type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Stop{}

// Stop A stop groups subsequent deliveries and/or pickups at the same location. At a customer location, transports are scheduled in order of their type: deliveries before pickups. At a depot location a stop groups either deliveries or pickups.  See [here](./concepts/locations-transports-and-stops) for more information.
type Stop struct {
	// A reference to a location. Usually, goods are picked up or delivered here. If no goods are picked up or delivered, it is the location where a route or a trip starts or ends.
	LocationId string `json:"locationId" validate:"regexp=.*[^ ].*"`
	// The trip ID groups several subsequent stops. The first stop and the last stop of a route may not have a trip ID only if the vehicle that is assigned to this route has a start or an end location, respectively.  See [here](./concepts/routes-and-trips) for more information.
	TripId *string `json:"tripId,omitempty" validate:"regexp=.*[^ ].*"`
	// A list of transport IDs that are delivered at this stop.
	DeliveryIds []string `json:"deliveryIds,omitempty"`
	// A list of transport IDs that are picked up at this stop.
	PickupIds []string `json:"pickupIds,omitempty"`
	// Contains summary values of the events on the way from the previous stop to the current stop, including the driving time. The very first stop of a route has a way report with empty values.
	ReportForWayToStop WayReport `json:"reportForWayToStop"`
	// Contains summary values of the events at a stop, including the arrival time, the departure time and the service time It also contains information about the loaded quantities when leaving the current stop.
	ReportForStop StopReport `json:"reportForStop"`
	// A list of events that occur on the way from the previous stop to this stop. An event specifies what happens on a route at a certain point in time. It can describe the driver's activity such as driving or break.
	EventsOnWayToStop []Event `json:"eventsOnWayToStop"`
	// A list of events that occur at this stop. An event specifies what happens on a route at a certain point in time. It can describe the driver's activity such as performing service or waiting, or it can denote the start/end of a route/trip.
	EventsAtStop []Event `json:"eventsAtStop"`
	// A list of violations that occur on the way from the previous stop to this stop. The following violation types can occur here: _PLANNING_HORIZON_, _DRIVER_AVAILABILITY_, _MAXIMUM_TRAVEL_TIME_OF_DRIVER_, _MAXIMUM_DRIVING_TIME_OF_DRIVER_, _MAXIMUM_DISTANCE_, _REST_POSITION_.    _REST_POSITION_ is reported if a daily rest has to be taken on the way to this stop to respect the daily rest rule. The expected position for a daily rest is at the end of a trip. For all other violations, the maximum time or distance exceedance on the way to this stop is reported.    Violations of type _PLANNING_HORIZON_ and _MAXIMUM_TRAVEL_TIME_OF_DRIVER_ will reoccur (with increasing value for TimeExceedence) for all following ways and stops of the current route.    Violations of type _MAXIMUM_DRIVING_TIME_OF_DRIVER_ and _MAXIMUM_DISTANCE_ will reoccur (with increasing value for TimeExceedence resp. DistanceExceedance) for all following ways of the current route.    Violations of type _DRIVER_AVAILABILITY_ will reoccur (with increasing value for TimeExceedence) for all following ways and stops of the current trip.
	ViolationsOnWayToStop []Violation `json:"violationsOnWayToStop"`
	// A list of violations that occur at this stop. The following violation types can occur here: _PLANNING_HORIZON_, _DRIVER_AVAILABILITY_, _OPENING_INTERVAL_, _VEHICLE_CAPACITY_, _VEHICLE_EQUIPMENT_, _ROUTE_START_INTERVAL_, _MAXIMUM_TRAVEL_TIME_OF_DRIVER_, _MAXIMUM_NUMBER_OF_CUSTOMER_STOPS_, _REST_POSITION_, _STOP_POSITION_IN_TRIP_, _TRIP_SECTION_, _MIXED_LOADING_PROHIBITION_.    _ROUTE_START_INTERVAL_ is reported at the first stop in a route.    For _VEHICLE_CAPACITY_ and _VEHICLE_EQUIPMENT_, the violation when leaving the stop is reported (i.e., at the last stop of the route, when everything is unloaded, there will be no such violation).    _MAXIMUM_NUMBER_OF_CUSTOMER_STOPS_ is reported when the current stop reaches the limit of the number of customer stops and is repeated for all following customer stops (with increasing value for NumberOfStopsExceedance).    _REST_POSITION_ is reported if a daily rest has to be taken at this stop to respect the daily rest rule. The expected position for a daily rest is at the end of a trip.    For all other violations, the maximum time exceedance at this stop is reported.    Violations of type _PLANNING_HORIZON_ and _MAXIMUM_TRAVEL_TIME_OF_DRIVER_ will reoccur (with increasing value for TimeExceedence) for all following ways and stops of the current route.    Violations of type _DRIVER_AVAILABILITY_ will reoccur (with increasing value for TimeExceedence) for all following ways and stops of the current trip.    Violations of type _VEHICLE_CAPACITY_ will reoccur at all following stops until enough goods are unloaded and the vehicle capacity is not exceeded anymore.    Violations of type _VEHICLE_EQUIPMENT_ will reoccur at all following stops until goods which require the missing equipment are unloaded and no equipment is missing anymore.    Violations of type _STOP_POSITION_IN_TRIP_ will occur at all stops where a position in trip is set for this location ant the current customer stop is not the first/last in the trip.    Violations of type _TRIP_SECTION_ will occur at all stops where the previous trip section number is higher than the one at this customer location.    Violations of type _MIXED_LOADING_PROHIBITION_ will occur at all stops where a load whose category must not be loaded with another load category in the trip is picked up.
	ViolationsAtStop []Violation `json:"violationsAtStop"`
}

type _Stop Stop

// NewStop instantiates a new Stop object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStop(locationId string, reportForWayToStop WayReport, reportForStop StopReport, eventsOnWayToStop []Event, eventsAtStop []Event, violationsOnWayToStop []Violation, violationsAtStop []Violation) *Stop {
	this := Stop{}
	this.LocationId = locationId
	this.ReportForWayToStop = reportForWayToStop
	this.ReportForStop = reportForStop
	this.EventsOnWayToStop = eventsOnWayToStop
	this.EventsAtStop = eventsAtStop
	this.ViolationsOnWayToStop = violationsOnWayToStop
	this.ViolationsAtStop = violationsAtStop
	return &this
}

// NewStopWithDefaults instantiates a new Stop object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStopWithDefaults() *Stop {
	this := Stop{}
	return &this
}

// GetLocationId returns the LocationId field value
func (o *Stop) GetLocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value
// and a boolean to check if the value has been set.
func (o *Stop) GetLocationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocationId, true
}

// SetLocationId sets field value
func (o *Stop) SetLocationId(v string) {
	o.LocationId = v
}

// GetTripId returns the TripId field value if set, zero value otherwise.
func (o *Stop) GetTripId() string {
	if o == nil || IsNil(o.TripId) {
		var ret string
		return ret
	}
	return *o.TripId
}

// GetTripIdOk returns a tuple with the TripId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetTripIdOk() (*string, bool) {
	if o == nil || IsNil(o.TripId) {
		return nil, false
	}
	return o.TripId, true
}

// HasTripId returns a boolean if a field has been set.
func (o *Stop) HasTripId() bool {
	if o != nil && !IsNil(o.TripId) {
		return true
	}

	return false
}

// SetTripId gets a reference to the given string and assigns it to the TripId field.
func (o *Stop) SetTripId(v string) {
	o.TripId = &v
}

// GetDeliveryIds returns the DeliveryIds field value if set, zero value otherwise.
func (o *Stop) GetDeliveryIds() []string {
	if o == nil || IsNil(o.DeliveryIds) {
		var ret []string
		return ret
	}
	return o.DeliveryIds
}

// GetDeliveryIdsOk returns a tuple with the DeliveryIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetDeliveryIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.DeliveryIds) {
		return nil, false
	}
	return o.DeliveryIds, true
}

// HasDeliveryIds returns a boolean if a field has been set.
func (o *Stop) HasDeliveryIds() bool {
	if o != nil && !IsNil(o.DeliveryIds) {
		return true
	}

	return false
}

// SetDeliveryIds gets a reference to the given []string and assigns it to the DeliveryIds field.
func (o *Stop) SetDeliveryIds(v []string) {
	o.DeliveryIds = v
}

// GetPickupIds returns the PickupIds field value if set, zero value otherwise.
func (o *Stop) GetPickupIds() []string {
	if o == nil || IsNil(o.PickupIds) {
		var ret []string
		return ret
	}
	return o.PickupIds
}

// GetPickupIdsOk returns a tuple with the PickupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Stop) GetPickupIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.PickupIds) {
		return nil, false
	}
	return o.PickupIds, true
}

// HasPickupIds returns a boolean if a field has been set.
func (o *Stop) HasPickupIds() bool {
	if o != nil && !IsNil(o.PickupIds) {
		return true
	}

	return false
}

// SetPickupIds gets a reference to the given []string and assigns it to the PickupIds field.
func (o *Stop) SetPickupIds(v []string) {
	o.PickupIds = v
}

// GetReportForWayToStop returns the ReportForWayToStop field value
func (o *Stop) GetReportForWayToStop() WayReport {
	if o == nil {
		var ret WayReport
		return ret
	}

	return o.ReportForWayToStop
}

// GetReportForWayToStopOk returns a tuple with the ReportForWayToStop field value
// and a boolean to check if the value has been set.
func (o *Stop) GetReportForWayToStopOk() (*WayReport, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportForWayToStop, true
}

// SetReportForWayToStop sets field value
func (o *Stop) SetReportForWayToStop(v WayReport) {
	o.ReportForWayToStop = v
}

// GetReportForStop returns the ReportForStop field value
func (o *Stop) GetReportForStop() StopReport {
	if o == nil {
		var ret StopReport
		return ret
	}

	return o.ReportForStop
}

// GetReportForStopOk returns a tuple with the ReportForStop field value
// and a boolean to check if the value has been set.
func (o *Stop) GetReportForStopOk() (*StopReport, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ReportForStop, true
}

// SetReportForStop sets field value
func (o *Stop) SetReportForStop(v StopReport) {
	o.ReportForStop = v
}

// GetEventsOnWayToStop returns the EventsOnWayToStop field value
func (o *Stop) GetEventsOnWayToStop() []Event {
	if o == nil {
		var ret []Event
		return ret
	}

	return o.EventsOnWayToStop
}

// GetEventsOnWayToStopOk returns a tuple with the EventsOnWayToStop field value
// and a boolean to check if the value has been set.
func (o *Stop) GetEventsOnWayToStopOk() ([]Event, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventsOnWayToStop, true
}

// SetEventsOnWayToStop sets field value
func (o *Stop) SetEventsOnWayToStop(v []Event) {
	o.EventsOnWayToStop = v
}

// GetEventsAtStop returns the EventsAtStop field value
func (o *Stop) GetEventsAtStop() []Event {
	if o == nil {
		var ret []Event
		return ret
	}

	return o.EventsAtStop
}

// GetEventsAtStopOk returns a tuple with the EventsAtStop field value
// and a boolean to check if the value has been set.
func (o *Stop) GetEventsAtStopOk() ([]Event, bool) {
	if o == nil {
		return nil, false
	}
	return o.EventsAtStop, true
}

// SetEventsAtStop sets field value
func (o *Stop) SetEventsAtStop(v []Event) {
	o.EventsAtStop = v
}

// GetViolationsOnWayToStop returns the ViolationsOnWayToStop field value
func (o *Stop) GetViolationsOnWayToStop() []Violation {
	if o == nil {
		var ret []Violation
		return ret
	}

	return o.ViolationsOnWayToStop
}

// GetViolationsOnWayToStopOk returns a tuple with the ViolationsOnWayToStop field value
// and a boolean to check if the value has been set.
func (o *Stop) GetViolationsOnWayToStopOk() ([]Violation, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViolationsOnWayToStop, true
}

// SetViolationsOnWayToStop sets field value
func (o *Stop) SetViolationsOnWayToStop(v []Violation) {
	o.ViolationsOnWayToStop = v
}

// GetViolationsAtStop returns the ViolationsAtStop field value
func (o *Stop) GetViolationsAtStop() []Violation {
	if o == nil {
		var ret []Violation
		return ret
	}

	return o.ViolationsAtStop
}

// GetViolationsAtStopOk returns a tuple with the ViolationsAtStop field value
// and a boolean to check if the value has been set.
func (o *Stop) GetViolationsAtStopOk() ([]Violation, bool) {
	if o == nil {
		return nil, false
	}
	return o.ViolationsAtStop, true
}

// SetViolationsAtStop sets field value
func (o *Stop) SetViolationsAtStop(v []Violation) {
	o.ViolationsAtStop = v
}

func (o Stop) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Stop) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locationId"] = o.LocationId
	if !IsNil(o.TripId) {
		toSerialize["tripId"] = o.TripId
	}
	if !IsNil(o.DeliveryIds) {
		toSerialize["deliveryIds"] = o.DeliveryIds
	}
	if !IsNil(o.PickupIds) {
		toSerialize["pickupIds"] = o.PickupIds
	}
	toSerialize["reportForWayToStop"] = o.ReportForWayToStop
	toSerialize["reportForStop"] = o.ReportForStop
	toSerialize["eventsOnWayToStop"] = o.EventsOnWayToStop
	toSerialize["eventsAtStop"] = o.EventsAtStop
	toSerialize["violationsOnWayToStop"] = o.ViolationsOnWayToStop
	toSerialize["violationsAtStop"] = o.ViolationsAtStop
	return toSerialize, nil
}

func (o *Stop) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locationId",
		"reportForWayToStop",
		"reportForStop",
		"eventsOnWayToStop",
		"eventsAtStop",
		"violationsOnWayToStop",
		"violationsAtStop",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStop := _Stop{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStop)

	if err != nil {
		return err
	}

	*o = Stop(varStop)

	return err
}

type NullableStop struct {
	value *Stop
	isSet bool
}

func (v NullableStop) Get() *Stop {
	return v.value
}

func (v *NullableStop) Set(val *Stop) {
	v.value = val
	v.isSet = true
}

func (v NullableStop) IsSet() bool {
	return v.isSet
}

func (v *NullableStop) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStop(val *Stop) *NullableStop {
	return &NullableStop{value: val, isSet: true}
}

func (v NullableStop) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStop) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


