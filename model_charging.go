/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.28
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Charging type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Charging{}

// Charging Charging planned in the route based on the vehicleâ€™s requirements.
type Charging struct {
	// The point in time when the charging starts. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	Start *time.Time `json:"start,omitempty"`
	// The duration [s] of charging.
	Duration *int32 `json:"duration,omitempty"`
	// The unique identifier of the charging station where charging is taking place.
	ChargingStationId *string `json:"chargingStationId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The point in time when charging ends. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	End *time.Time `json:"end,omitempty"`
}

// NewCharging instantiates a new Charging object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCharging() *Charging {
	this := Charging{}
	return &this
}

// NewChargingWithDefaults instantiates a new Charging object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewChargingWithDefaults() *Charging {
	this := Charging{}
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *Charging) GetStart() time.Time {
	if o == nil || IsNil(o.Start) {
		var ret time.Time
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Charging) GetStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Charging) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given time.Time and assigns it to the Start field.
func (o *Charging) SetStart(v time.Time) {
	o.Start = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *Charging) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Charging) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *Charging) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *Charging) SetDuration(v int32) {
	o.Duration = &v
}

// GetChargingStationId returns the ChargingStationId field value if set, zero value otherwise.
func (o *Charging) GetChargingStationId() string {
	if o == nil || IsNil(o.ChargingStationId) {
		var ret string
		return ret
	}
	return *o.ChargingStationId
}

// GetChargingStationIdOk returns a tuple with the ChargingStationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Charging) GetChargingStationIdOk() (*string, bool) {
	if o == nil || IsNil(o.ChargingStationId) {
		return nil, false
	}
	return o.ChargingStationId, true
}

// HasChargingStationId returns a boolean if a field has been set.
func (o *Charging) HasChargingStationId() bool {
	if o != nil && !IsNil(o.ChargingStationId) {
		return true
	}

	return false
}

// SetChargingStationId gets a reference to the given string and assigns it to the ChargingStationId field.
func (o *Charging) SetChargingStationId(v string) {
	o.ChargingStationId = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *Charging) GetEnd() time.Time {
	if o == nil || IsNil(o.End) {
		var ret time.Time
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Charging) GetEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Charging) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given time.Time and assigns it to the End field.
func (o *Charging) SetEnd(v time.Time) {
	o.End = &v
}

func (o Charging) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Charging) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.ChargingStationId) {
		toSerialize["chargingStationId"] = o.ChargingStationId
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

type NullableCharging struct {
	value *Charging
	isSet bool
}

func (v NullableCharging) Get() *Charging {
	return v.value
}

func (v *NullableCharging) Set(val *Charging) {
	v.value = val
	v.isSet = true
}

func (v NullableCharging) IsSet() bool {
	return v.isSet
}

func (v *NullableCharging) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCharging(val *Charging) *NullableCharging {
	return &NullableCharging{value: val, isSet: true}
}

func (v NullableCharging) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCharging) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


