/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// TaskGroupConstraint Defines the constraint that applies to a task group. * `CONSECUTIVE` - Those tasks belonging to the task group that are scheduled on the same route must be scheduled consecutively. * `SAME_ROUTE` - All tasks belonging to the task group must be scheduled on the same route.
type TaskGroupConstraint string

// List of TaskGroupConstraint
const (
	CONSECUTIVE TaskGroupConstraint = "CONSECUTIVE"
	SAME_ROUTE TaskGroupConstraint = "SAME_ROUTE"
)

// All allowed values of TaskGroupConstraint enum
var AllowedTaskGroupConstraintEnumValues = []TaskGroupConstraint{
	"CONSECUTIVE",
	"SAME_ROUTE",
}

func (v *TaskGroupConstraint) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := TaskGroupConstraint(value)
	for _, existing := range AllowedTaskGroupConstraintEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid TaskGroupConstraint", value)
}

// NewTaskGroupConstraintFromValue returns a pointer to a valid TaskGroupConstraint
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewTaskGroupConstraintFromValue(v string) (*TaskGroupConstraint, error) {
	ev := TaskGroupConstraint(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for TaskGroupConstraint: valid values are %v", v, AllowedTaskGroupConstraintEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v TaskGroupConstraint) IsValid() bool {
	for _, existing := range AllowedTaskGroupConstraintEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to TaskGroupConstraint value
func (v TaskGroupConstraint) Ptr() *TaskGroupConstraint {
	return &v
}

type NullableTaskGroupConstraint struct {
	value *TaskGroupConstraint
	isSet bool
}

func (v NullableTaskGroupConstraint) Get() *TaskGroupConstraint {
	return v.value
}

func (v *NullableTaskGroupConstraint) Set(val *TaskGroupConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskGroupConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskGroupConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskGroupConstraint(val *TaskGroupConstraint) *NullableTaskGroupConstraint {
	return &NullableTaskGroupConstraint{value: val, isSet: true}
}

func (v NullableTaskGroupConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskGroupConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

