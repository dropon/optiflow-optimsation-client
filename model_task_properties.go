/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.30
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskProperties{}

// TaskProperties Describes the pickup task or the delivery task of an order.
type TaskProperties struct {
	// The unique identifier of the location where the task must be scheduled.
	LocationId string `json:"locationId" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// A list of unique identifiers of the time slots of the location that can be used to execute this task. When empty all time slots can be used. If more than 50 time slots are specified for the location, the list must not be empty.
	TimeSlotIds []string `json:"timeSlotIds,omitempty"`
	// The duration [s] it takes to execute this task.
	Duration *int32 `json:"duration,omitempty"`
	// A list of categories the task belongs to that can be used to describe constraints or rules.
	Categories []string `json:"categories,omitempty"`
}

type _TaskProperties TaskProperties

// NewTaskProperties instantiates a new TaskProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskProperties(locationId string) *TaskProperties {
	this := TaskProperties{}
	this.LocationId = locationId
	var duration int32 = 0
	this.Duration = &duration
	return &this
}

// NewTaskPropertiesWithDefaults instantiates a new TaskProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskPropertiesWithDefaults() *TaskProperties {
	this := TaskProperties{}
	var duration int32 = 0
	this.Duration = &duration
	return &this
}

// GetLocationId returns the LocationId field value
func (o *TaskProperties) GetLocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetLocationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LocationId, true
}

// SetLocationId sets field value
func (o *TaskProperties) SetLocationId(v string) {
	o.LocationId = v
}

// GetTimeSlotIds returns the TimeSlotIds field value if set, zero value otherwise.
func (o *TaskProperties) GetTimeSlotIds() []string {
	if o == nil || IsNil(o.TimeSlotIds) {
		var ret []string
		return ret
	}
	return o.TimeSlotIds
}

// GetTimeSlotIdsOk returns a tuple with the TimeSlotIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetTimeSlotIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.TimeSlotIds) {
		return nil, false
	}
	return o.TimeSlotIds, true
}

// HasTimeSlotIds returns a boolean if a field has been set.
func (o *TaskProperties) HasTimeSlotIds() bool {
	if o != nil && !IsNil(o.TimeSlotIds) {
		return true
	}

	return false
}

// SetTimeSlotIds gets a reference to the given []string and assigns it to the TimeSlotIds field.
func (o *TaskProperties) SetTimeSlotIds(v []string) {
	o.TimeSlotIds = v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *TaskProperties) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *TaskProperties) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *TaskProperties) SetDuration(v int32) {
	o.Duration = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *TaskProperties) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskProperties) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *TaskProperties) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *TaskProperties) SetCategories(v []string) {
	o.Categories = v
}

func (o TaskProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["locationId"] = o.LocationId
	if !IsNil(o.TimeSlotIds) {
		toSerialize["timeSlotIds"] = o.TimeSlotIds
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	return toSerialize, nil
}

func (o *TaskProperties) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"locationId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskProperties := _TaskProperties{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskProperties)

	if err != nil {
		return err
	}

	*o = TaskProperties(varTaskProperties)

	return err
}

type NullableTaskProperties struct {
	value *TaskProperties
	isSet bool
}

func (v NullableTaskProperties) Get() *TaskProperties {
	return v.value
}

func (v *NullableTaskProperties) Set(val *TaskProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskProperties(val *TaskProperties) *NullableTaskProperties {
	return &NullableTaskProperties{value: val, isSet: true}
}

func (v NullableTaskProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


