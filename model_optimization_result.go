/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.27
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OptimizationResult type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptimizationResult{}

// OptimizationResult The current result of the optimization.
type OptimizationResult struct {
	// The unique identifier of the optimization.
	Id string `json:"id"`
	Metadata *OptimizationResultMetadata `json:"metadata,omitempty"`
	Status OptimizationStatus `json:"status"`
	// The routes scheduled by the optimization. As long as the optimization is not yet `SUCCEEDED`, scheduled routes may be only an intermediate result.
	Routes []Route `json:"routes,omitempty"`
	Metrics *Metrics `json:"metrics,omitempty"`
	Error *Error `json:"error,omitempty"`
	// A list of warnings concerning the optimization.
	Warnings []Warning `json:"warnings,omitempty"`
}

type _OptimizationResult OptimizationResult

// NewOptimizationResult instantiates a new OptimizationResult object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptimizationResult(id string, status OptimizationStatus) *OptimizationResult {
	this := OptimizationResult{}
	this.Id = id
	this.Status = status
	return &this
}

// NewOptimizationResultWithDefaults instantiates a new OptimizationResult object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptimizationResultWithDefaults() *OptimizationResult {
	this := OptimizationResult{}
	return &this
}

// GetId returns the Id field value
func (o *OptimizationResult) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *OptimizationResult) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *OptimizationResult) SetId(v string) {
	o.Id = v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *OptimizationResult) GetMetadata() OptimizationResultMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret OptimizationResultMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptimizationResult) GetMetadataOk() (*OptimizationResultMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *OptimizationResult) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given OptimizationResultMetadata and assigns it to the Metadata field.
func (o *OptimizationResult) SetMetadata(v OptimizationResultMetadata) {
	o.Metadata = &v
}

// GetStatus returns the Status field value
func (o *OptimizationResult) GetStatus() OptimizationStatus {
	if o == nil {
		var ret OptimizationStatus
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *OptimizationResult) GetStatusOk() (*OptimizationStatus, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *OptimizationResult) SetStatus(v OptimizationStatus) {
	o.Status = v
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *OptimizationResult) GetRoutes() []Route {
	if o == nil || IsNil(o.Routes) {
		var ret []Route
		return ret
	}
	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptimizationResult) GetRoutesOk() ([]Route, bool) {
	if o == nil || IsNil(o.Routes) {
		return nil, false
	}
	return o.Routes, true
}

// HasRoutes returns a boolean if a field has been set.
func (o *OptimizationResult) HasRoutes() bool {
	if o != nil && !IsNil(o.Routes) {
		return true
	}

	return false
}

// SetRoutes gets a reference to the given []Route and assigns it to the Routes field.
func (o *OptimizationResult) SetRoutes(v []Route) {
	o.Routes = v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *OptimizationResult) GetMetrics() Metrics {
	if o == nil || IsNil(o.Metrics) {
		var ret Metrics
		return ret
	}
	return *o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptimizationResult) GetMetricsOk() (*Metrics, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *OptimizationResult) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given Metrics and assigns it to the Metrics field.
func (o *OptimizationResult) SetMetrics(v Metrics) {
	o.Metrics = &v
}

// GetError returns the Error field value if set, zero value otherwise.
func (o *OptimizationResult) GetError() Error {
	if o == nil || IsNil(o.Error) {
		var ret Error
		return ret
	}
	return *o.Error
}

// GetErrorOk returns a tuple with the Error field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptimizationResult) GetErrorOk() (*Error, bool) {
	if o == nil || IsNil(o.Error) {
		return nil, false
	}
	return o.Error, true
}

// HasError returns a boolean if a field has been set.
func (o *OptimizationResult) HasError() bool {
	if o != nil && !IsNil(o.Error) {
		return true
	}

	return false
}

// SetError gets a reference to the given Error and assigns it to the Error field.
func (o *OptimizationResult) SetError(v Error) {
	o.Error = &v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *OptimizationResult) GetWarnings() []Warning {
	if o == nil || IsNil(o.Warnings) {
		var ret []Warning
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptimizationResult) GetWarningsOk() ([]Warning, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *OptimizationResult) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Warning and assigns it to the Warnings field.
func (o *OptimizationResult) SetWarnings(v []Warning) {
	o.Warnings = v
}

func (o OptimizationResult) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptimizationResult) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	toSerialize["status"] = o.Status
	if !IsNil(o.Routes) {
		toSerialize["routes"] = o.Routes
	}
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}
	if !IsNil(o.Error) {
		toSerialize["error"] = o.Error
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

func (o *OptimizationResult) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"status",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOptimizationResult := _OptimizationResult{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOptimizationResult)

	if err != nil {
		return err
	}

	*o = OptimizationResult(varOptimizationResult)

	return err
}

type NullableOptimizationResult struct {
	value *OptimizationResult
	isSet bool
}

func (v NullableOptimizationResult) Get() *OptimizationResult {
	return v.value
}

func (v *NullableOptimizationResult) Set(val *OptimizationResult) {
	v.value = val
	v.isSet = true
}

func (v NullableOptimizationResult) IsSet() bool {
	return v.isSet
}

func (v *NullableOptimizationResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptimizationResult(val *OptimizationResult) *NullableOptimizationResult {
	return &NullableOptimizationResult{value: val, isSet: true}
}

func (v NullableOptimizationResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptimizationResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


