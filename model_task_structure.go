/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskStructure type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskStructure{}

// TaskStructure All necessary details of a task required to reconstruct its route.
type TaskStructure struct {
	// The unique identifier of the order whose pickup or delivery is described by this task.
	OrderId string `json:"orderId" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	Type TaskType `json:"type"`
	// The unique identifier of the time slot assigned to an appointment to execute the task. Required when time slots are defined at the task's location.
	TimeSlotId *string `json:"timeSlotId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The unique identifier of the depot in case the task is a pickup or a delivery at a depot. Required for tasks scheduled at a depot, otherwise this must be omitted.
	DepotId *string `json:"depotId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The unique identifier of the compartment that the order needs to be loaded in or unloaded from. Required when compartments are defined for the vehicle.
	CompartmentId *string `json:"compartmentId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
}

type _TaskStructure TaskStructure

// NewTaskStructure instantiates a new TaskStructure object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskStructure(orderId string, type_ TaskType) *TaskStructure {
	this := TaskStructure{}
	this.OrderId = orderId
	this.Type = type_
	return &this
}

// NewTaskStructureWithDefaults instantiates a new TaskStructure object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskStructureWithDefaults() *TaskStructure {
	this := TaskStructure{}
	return &this
}

// GetOrderId returns the OrderId field value
func (o *TaskStructure) GetOrderId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value
// and a boolean to check if the value has been set.
func (o *TaskStructure) GetOrderIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.OrderId, true
}

// SetOrderId sets field value
func (o *TaskStructure) SetOrderId(v string) {
	o.OrderId = v
}

// GetType returns the Type field value
func (o *TaskStructure) GetType() TaskType {
	if o == nil {
		var ret TaskType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *TaskStructure) GetTypeOk() (*TaskType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *TaskStructure) SetType(v TaskType) {
	o.Type = v
}

// GetTimeSlotId returns the TimeSlotId field value if set, zero value otherwise.
func (o *TaskStructure) GetTimeSlotId() string {
	if o == nil || IsNil(o.TimeSlotId) {
		var ret string
		return ret
	}
	return *o.TimeSlotId
}

// GetTimeSlotIdOk returns a tuple with the TimeSlotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskStructure) GetTimeSlotIdOk() (*string, bool) {
	if o == nil || IsNil(o.TimeSlotId) {
		return nil, false
	}
	return o.TimeSlotId, true
}

// HasTimeSlotId returns a boolean if a field has been set.
func (o *TaskStructure) HasTimeSlotId() bool {
	if o != nil && !IsNil(o.TimeSlotId) {
		return true
	}

	return false
}

// SetTimeSlotId gets a reference to the given string and assigns it to the TimeSlotId field.
func (o *TaskStructure) SetTimeSlotId(v string) {
	o.TimeSlotId = &v
}

// GetDepotId returns the DepotId field value if set, zero value otherwise.
func (o *TaskStructure) GetDepotId() string {
	if o == nil || IsNil(o.DepotId) {
		var ret string
		return ret
	}
	return *o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskStructure) GetDepotIdOk() (*string, bool) {
	if o == nil || IsNil(o.DepotId) {
		return nil, false
	}
	return o.DepotId, true
}

// HasDepotId returns a boolean if a field has been set.
func (o *TaskStructure) HasDepotId() bool {
	if o != nil && !IsNil(o.DepotId) {
		return true
	}

	return false
}

// SetDepotId gets a reference to the given string and assigns it to the DepotId field.
func (o *TaskStructure) SetDepotId(v string) {
	o.DepotId = &v
}

// GetCompartmentId returns the CompartmentId field value if set, zero value otherwise.
func (o *TaskStructure) GetCompartmentId() string {
	if o == nil || IsNil(o.CompartmentId) {
		var ret string
		return ret
	}
	return *o.CompartmentId
}

// GetCompartmentIdOk returns a tuple with the CompartmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskStructure) GetCompartmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.CompartmentId) {
		return nil, false
	}
	return o.CompartmentId, true
}

// HasCompartmentId returns a boolean if a field has been set.
func (o *TaskStructure) HasCompartmentId() bool {
	if o != nil && !IsNil(o.CompartmentId) {
		return true
	}

	return false
}

// SetCompartmentId gets a reference to the given string and assigns it to the CompartmentId field.
func (o *TaskStructure) SetCompartmentId(v string) {
	o.CompartmentId = &v
}

func (o TaskStructure) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskStructure) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["orderId"] = o.OrderId
	toSerialize["type"] = o.Type
	if !IsNil(o.TimeSlotId) {
		toSerialize["timeSlotId"] = o.TimeSlotId
	}
	if !IsNil(o.DepotId) {
		toSerialize["depotId"] = o.DepotId
	}
	if !IsNil(o.CompartmentId) {
		toSerialize["compartmentId"] = o.CompartmentId
	}
	return toSerialize, nil
}

func (o *TaskStructure) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"orderId",
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskStructure := _TaskStructure{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskStructure)

	if err != nil {
		return err
	}

	*o = TaskStructure(varTaskStructure)

	return err
}

type NullableTaskStructure struct {
	value *TaskStructure
	isSet bool
}

func (v NullableTaskStructure) Get() *TaskStructure {
	return v.value
}

func (v *NullableTaskStructure) Set(val *TaskStructure) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskStructure) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskStructure) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskStructure(val *TaskStructure) *NullableTaskStructure {
	return &NullableTaskStructure{value: val, isSet: true}
}

func (v NullableTaskStructure) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskStructure) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


