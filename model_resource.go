/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Resource type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Resource{}

// Resource A resource that can be assigned to vehicles. Resources are shared assets that cannot be used simultaneously by multiple vehicles. When the optimization schedules two routes that share a resource, they will be separated in time. Important note: Used resources count as separate assets in your license allocation. The total asset count for any optimization includes the sum of vehicles and distinct shared resources, reflecting the additional resource dimension and optimisation complexity introduced by this feature. To avoid unexpected license impact, this capability requires explicit feature flag activation before use.
type Resource struct {
	// The unique identifier of the resource.
	Id string `json:"id" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The minimum duration [s] that must be scheduled between the end of one route and the start of another route using this resource. This allows for transition time, cleaning, or preparation between uses.
	MinimumBufferDuration *int32 `json:"minimumBufferDuration,omitempty"`
	Constraints *ResourceConstraints `json:"constraints,omitempty"`
	Costs *ResourceCosts `json:"costs,omitempty"`
	// A list of categories the shared resource belongs to that can be used to describe constraints or rules.
	Categories []string `json:"categories"`
}

type _Resource Resource

// NewResource instantiates a new Resource object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewResource(id string, categories []string) *Resource {
	this := Resource{}
	this.Id = id
	var minimumBufferDuration int32 = 0
	this.MinimumBufferDuration = &minimumBufferDuration
	this.Categories = categories
	return &this
}

// NewResourceWithDefaults instantiates a new Resource object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewResourceWithDefaults() *Resource {
	this := Resource{}
	var minimumBufferDuration int32 = 0
	this.MinimumBufferDuration = &minimumBufferDuration
	return &this
}

// GetId returns the Id field value
func (o *Resource) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Resource) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Resource) SetId(v string) {
	o.Id = v
}

// GetMinimumBufferDuration returns the MinimumBufferDuration field value if set, zero value otherwise.
func (o *Resource) GetMinimumBufferDuration() int32 {
	if o == nil || IsNil(o.MinimumBufferDuration) {
		var ret int32
		return ret
	}
	return *o.MinimumBufferDuration
}

// GetMinimumBufferDurationOk returns a tuple with the MinimumBufferDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetMinimumBufferDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumBufferDuration) {
		return nil, false
	}
	return o.MinimumBufferDuration, true
}

// HasMinimumBufferDuration returns a boolean if a field has been set.
func (o *Resource) HasMinimumBufferDuration() bool {
	if o != nil && !IsNil(o.MinimumBufferDuration) {
		return true
	}

	return false
}

// SetMinimumBufferDuration gets a reference to the given int32 and assigns it to the MinimumBufferDuration field.
func (o *Resource) SetMinimumBufferDuration(v int32) {
	o.MinimumBufferDuration = &v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *Resource) GetConstraints() ResourceConstraints {
	if o == nil || IsNil(o.Constraints) {
		var ret ResourceConstraints
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetConstraintsOk() (*ResourceConstraints, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *Resource) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given ResourceConstraints and assigns it to the Constraints field.
func (o *Resource) SetConstraints(v ResourceConstraints) {
	o.Constraints = &v
}

// GetCosts returns the Costs field value if set, zero value otherwise.
func (o *Resource) GetCosts() ResourceCosts {
	if o == nil || IsNil(o.Costs) {
		var ret ResourceCosts
		return ret
	}
	return *o.Costs
}

// GetCostsOk returns a tuple with the Costs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Resource) GetCostsOk() (*ResourceCosts, bool) {
	if o == nil || IsNil(o.Costs) {
		return nil, false
	}
	return o.Costs, true
}

// HasCosts returns a boolean if a field has been set.
func (o *Resource) HasCosts() bool {
	if o != nil && !IsNil(o.Costs) {
		return true
	}

	return false
}

// SetCosts gets a reference to the given ResourceCosts and assigns it to the Costs field.
func (o *Resource) SetCosts(v ResourceCosts) {
	o.Costs = &v
}

// GetCategories returns the Categories field value
func (o *Resource) GetCategories() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value
// and a boolean to check if the value has been set.
func (o *Resource) GetCategoriesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Categories, true
}

// SetCategories sets field value
func (o *Resource) SetCategories(v []string) {
	o.Categories = v
}

func (o Resource) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Resource) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.MinimumBufferDuration) {
		toSerialize["minimumBufferDuration"] = o.MinimumBufferDuration
	}
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	if !IsNil(o.Costs) {
		toSerialize["costs"] = o.Costs
	}
	toSerialize["categories"] = o.Categories
	return toSerialize, nil
}

func (o *Resource) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"categories",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varResource := _Resource{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varResource)

	if err != nil {
		return err
	}

	*o = Resource(varResource)

	return err
}

type NullableResource struct {
	value *Resource
	isSet bool
}

func (v NullableResource) Get() *Resource {
	return v.value
}

func (v *NullableResource) Set(val *Resource) {
	v.value = val
	v.isSet = true
}

func (v NullableResource) IsSet() bool {
	return v.isSet
}

func (v *NullableResource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableResource(val *Resource) *NullableResource {
	return &NullableResource{value: val, isSet: true}
}

func (v NullableResource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableResource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


