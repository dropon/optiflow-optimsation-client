/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the Event type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Event{}

// Event An event specifies what happens on a route at a certain point in time. It can describe the driver's activity such as driving or performing service, or it can denote the start/end of a route/trip.
type Event struct {
	Type EventType `json:"type"`
	// The start time of the event formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
	StartTime time.Time `json:"startTime"`
	// The duration of the event [s]. The duration may be 0.
	Duration int32 `json:"duration"`
	// The ID of the corresponding transport if the event is a service event. Otherwise the ID is null.
	TransportId *string `json:"transportId,omitempty" validate:"regexp=.*[^ ].*"`
}

type _Event Event

// NewEvent instantiates a new Event object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewEvent(type_ EventType, startTime time.Time, duration int32) *Event {
	this := Event{}
	this.Type = type_
	this.StartTime = startTime
	this.Duration = duration
	return &this
}

// NewEventWithDefaults instantiates a new Event object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewEventWithDefaults() *Event {
	this := Event{}
	return &this
}

// GetType returns the Type field value
func (o *Event) GetType() EventType {
	if o == nil {
		var ret EventType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Event) GetTypeOk() (*EventType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Event) SetType(v EventType) {
	o.Type = v
}

// GetStartTime returns the StartTime field value
func (o *Event) GetStartTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.StartTime
}

// GetStartTimeOk returns a tuple with the StartTime field value
// and a boolean to check if the value has been set.
func (o *Event) GetStartTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.StartTime, true
}

// SetStartTime sets field value
func (o *Event) SetStartTime(v time.Time) {
	o.StartTime = v
}

// GetDuration returns the Duration field value
func (o *Event) GetDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *Event) GetDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *Event) SetDuration(v int32) {
	o.Duration = v
}

// GetTransportId returns the TransportId field value if set, zero value otherwise.
func (o *Event) GetTransportId() string {
	if o == nil || IsNil(o.TransportId) {
		var ret string
		return ret
	}
	return *o.TransportId
}

// GetTransportIdOk returns a tuple with the TransportId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Event) GetTransportIdOk() (*string, bool) {
	if o == nil || IsNil(o.TransportId) {
		return nil, false
	}
	return o.TransportId, true
}

// HasTransportId returns a boolean if a field has been set.
func (o *Event) HasTransportId() bool {
	if o != nil && !IsNil(o.TransportId) {
		return true
	}

	return false
}

// SetTransportId gets a reference to the given string and assigns it to the TransportId field.
func (o *Event) SetTransportId(v string) {
	o.TransportId = &v
}

func (o Event) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Event) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["startTime"] = o.StartTime
	toSerialize["duration"] = o.Duration
	if !IsNil(o.TransportId) {
		toSerialize["transportId"] = o.TransportId
	}
	return toSerialize, nil
}

func (o *Event) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"startTime",
		"duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varEvent := _Event{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varEvent)

	if err != nil {
		return err
	}

	*o = Event(varEvent)

	return err
}

type NullableEvent struct {
	value *Event
	isSet bool
}

func (v NullableEvent) Get() *Event {
	return v.value
}

func (v *NullableEvent) Set(val *Event) {
	v.value = val
	v.isSet = true
}

func (v NullableEvent) IsSet() bool {
	return v.isSet
}

func (v *NullableEvent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableEvent(val *Event) *NullableEvent {
	return &NullableEvent{value: val, isSet: true}
}

func (v NullableEvent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableEvent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


