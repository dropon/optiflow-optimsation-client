/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.28
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the RespectedTaskSequence type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RespectedTaskSequence{}

// RespectedTaskSequence A sequence that must be respected when scheduling routes. Tasks with a category that occurs earlier in the sequence must be scheduled in the route before a task with a category later in the sequence.
type RespectedTaskSequence struct {
	// The sequence of task categories that needs to be respected within a route. The index of the category in the list determines the sequence. Categories that do not correspond to any task are ignored.
	TaskCategories []string `json:"taskCategories"`
	// The category of vehicles to which this constraint applies. When omitted the constraint applies to all vehicles. The constraint will be ignored when no vehicle belongs to this category.
	VehicleCategory *string `json:"vehicleCategory,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
}

type _RespectedTaskSequence RespectedTaskSequence

// NewRespectedTaskSequence instantiates a new RespectedTaskSequence object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRespectedTaskSequence(taskCategories []string) *RespectedTaskSequence {
	this := RespectedTaskSequence{}
	this.TaskCategories = taskCategories
	return &this
}

// NewRespectedTaskSequenceWithDefaults instantiates a new RespectedTaskSequence object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRespectedTaskSequenceWithDefaults() *RespectedTaskSequence {
	this := RespectedTaskSequence{}
	return &this
}

// GetTaskCategories returns the TaskCategories field value
func (o *RespectedTaskSequence) GetTaskCategories() []string {
	if o == nil {
		var ret []string
		return ret
	}

	return o.TaskCategories
}

// GetTaskCategoriesOk returns a tuple with the TaskCategories field value
// and a boolean to check if the value has been set.
func (o *RespectedTaskSequence) GetTaskCategoriesOk() ([]string, bool) {
	if o == nil {
		return nil, false
	}
	return o.TaskCategories, true
}

// SetTaskCategories sets field value
func (o *RespectedTaskSequence) SetTaskCategories(v []string) {
	o.TaskCategories = v
}

// GetVehicleCategory returns the VehicleCategory field value if set, zero value otherwise.
func (o *RespectedTaskSequence) GetVehicleCategory() string {
	if o == nil || IsNil(o.VehicleCategory) {
		var ret string
		return ret
	}
	return *o.VehicleCategory
}

// GetVehicleCategoryOk returns a tuple with the VehicleCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RespectedTaskSequence) GetVehicleCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.VehicleCategory) {
		return nil, false
	}
	return o.VehicleCategory, true
}

// HasVehicleCategory returns a boolean if a field has been set.
func (o *RespectedTaskSequence) HasVehicleCategory() bool {
	if o != nil && !IsNil(o.VehicleCategory) {
		return true
	}

	return false
}

// SetVehicleCategory gets a reference to the given string and assigns it to the VehicleCategory field.
func (o *RespectedTaskSequence) SetVehicleCategory(v string) {
	o.VehicleCategory = &v
}

func (o RespectedTaskSequence) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RespectedTaskSequence) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["taskCategories"] = o.TaskCategories
	if !IsNil(o.VehicleCategory) {
		toSerialize["vehicleCategory"] = o.VehicleCategory
	}
	return toSerialize, nil
}

func (o *RespectedTaskSequence) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"taskCategories",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varRespectedTaskSequence := _RespectedTaskSequence{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varRespectedTaskSequence)

	if err != nil {
		return err
	}

	*o = RespectedTaskSequence(varRespectedTaskSequence)

	return err
}

type NullableRespectedTaskSequence struct {
	value *RespectedTaskSequence
	isSet bool
}

func (v NullableRespectedTaskSequence) Get() *RespectedTaskSequence {
	return v.value
}

func (v *NullableRespectedTaskSequence) Set(val *RespectedTaskSequence) {
	v.value = val
	v.isSet = true
}

func (v NullableRespectedTaskSequence) IsSet() bool {
	return v.isSet
}

func (v *NullableRespectedTaskSequence) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRespectedTaskSequence(val *RespectedTaskSequence) *NullableRespectedTaskSequence {
	return &NullableRespectedTaskSequence{value: val, isSet: true}
}

func (v NullableRespectedTaskSequence) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRespectedTaskSequence) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


