/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.24
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the TaskLoadingIncompatibilityConstraint type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskLoadingIncompatibilityConstraint{}

// TaskLoadingIncompatibilityConstraint Describes a constraint where tasks are forbidden to be loaded or unloaded depending on other orders which are loaded in the vehicle.
type TaskLoadingIncompatibilityConstraint struct {
	// Orders belonging to this category must be loaded in the vehicle for this constraint to apply. The constraint will be ignored when no order belongs to this category.
	LoadedOrderCategory string `json:"loadedOrderCategory" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// Tasks belonging to this category cannot be executed while the constraint applies. The constraint will be ignored when no task belongs to this category.
	ForbiddenTaskCategory string `json:"forbiddenTaskCategory" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The category of vehicles to which this constraint applies. When omitted the constraint applies to all vehicles. The constraint will be ignored when no vehicle belongs to this category.
	VehicleCategory *string `json:"vehicleCategory,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
}

type _TaskLoadingIncompatibilityConstraint TaskLoadingIncompatibilityConstraint

// NewTaskLoadingIncompatibilityConstraint instantiates a new TaskLoadingIncompatibilityConstraint object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskLoadingIncompatibilityConstraint(loadedOrderCategory string, forbiddenTaskCategory string) *TaskLoadingIncompatibilityConstraint {
	this := TaskLoadingIncompatibilityConstraint{}
	this.LoadedOrderCategory = loadedOrderCategory
	this.ForbiddenTaskCategory = forbiddenTaskCategory
	return &this
}

// NewTaskLoadingIncompatibilityConstraintWithDefaults instantiates a new TaskLoadingIncompatibilityConstraint object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskLoadingIncompatibilityConstraintWithDefaults() *TaskLoadingIncompatibilityConstraint {
	this := TaskLoadingIncompatibilityConstraint{}
	return &this
}

// GetLoadedOrderCategory returns the LoadedOrderCategory field value
func (o *TaskLoadingIncompatibilityConstraint) GetLoadedOrderCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.LoadedOrderCategory
}

// GetLoadedOrderCategoryOk returns a tuple with the LoadedOrderCategory field value
// and a boolean to check if the value has been set.
func (o *TaskLoadingIncompatibilityConstraint) GetLoadedOrderCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.LoadedOrderCategory, true
}

// SetLoadedOrderCategory sets field value
func (o *TaskLoadingIncompatibilityConstraint) SetLoadedOrderCategory(v string) {
	o.LoadedOrderCategory = v
}

// GetForbiddenTaskCategory returns the ForbiddenTaskCategory field value
func (o *TaskLoadingIncompatibilityConstraint) GetForbiddenTaskCategory() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ForbiddenTaskCategory
}

// GetForbiddenTaskCategoryOk returns a tuple with the ForbiddenTaskCategory field value
// and a boolean to check if the value has been set.
func (o *TaskLoadingIncompatibilityConstraint) GetForbiddenTaskCategoryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ForbiddenTaskCategory, true
}

// SetForbiddenTaskCategory sets field value
func (o *TaskLoadingIncompatibilityConstraint) SetForbiddenTaskCategory(v string) {
	o.ForbiddenTaskCategory = v
}

// GetVehicleCategory returns the VehicleCategory field value if set, zero value otherwise.
func (o *TaskLoadingIncompatibilityConstraint) GetVehicleCategory() string {
	if o == nil || IsNil(o.VehicleCategory) {
		var ret string
		return ret
	}
	return *o.VehicleCategory
}

// GetVehicleCategoryOk returns a tuple with the VehicleCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskLoadingIncompatibilityConstraint) GetVehicleCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.VehicleCategory) {
		return nil, false
	}
	return o.VehicleCategory, true
}

// HasVehicleCategory returns a boolean if a field has been set.
func (o *TaskLoadingIncompatibilityConstraint) HasVehicleCategory() bool {
	if o != nil && !IsNil(o.VehicleCategory) {
		return true
	}

	return false
}

// SetVehicleCategory gets a reference to the given string and assigns it to the VehicleCategory field.
func (o *TaskLoadingIncompatibilityConstraint) SetVehicleCategory(v string) {
	o.VehicleCategory = &v
}

func (o TaskLoadingIncompatibilityConstraint) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskLoadingIncompatibilityConstraint) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["loadedOrderCategory"] = o.LoadedOrderCategory
	toSerialize["forbiddenTaskCategory"] = o.ForbiddenTaskCategory
	if !IsNil(o.VehicleCategory) {
		toSerialize["vehicleCategory"] = o.VehicleCategory
	}
	return toSerialize, nil
}

func (o *TaskLoadingIncompatibilityConstraint) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"loadedOrderCategory",
		"forbiddenTaskCategory",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTaskLoadingIncompatibilityConstraint := _TaskLoadingIncompatibilityConstraint{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTaskLoadingIncompatibilityConstraint)

	if err != nil {
		return err
	}

	*o = TaskLoadingIncompatibilityConstraint(varTaskLoadingIncompatibilityConstraint)

	return err
}

type NullableTaskLoadingIncompatibilityConstraint struct {
	value *TaskLoadingIncompatibilityConstraint
	isSet bool
}

func (v NullableTaskLoadingIncompatibilityConstraint) Get() *TaskLoadingIncompatibilityConstraint {
	return v.value
}

func (v *NullableTaskLoadingIncompatibilityConstraint) Set(val *TaskLoadingIncompatibilityConstraint) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskLoadingIncompatibilityConstraint) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskLoadingIncompatibilityConstraint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskLoadingIncompatibilityConstraint(val *TaskLoadingIncompatibilityConstraint) *NullableTaskLoadingIncompatibilityConstraint {
	return &NullableTaskLoadingIncompatibilityConstraint{value: val, isSet: true}
}

func (v NullableTaskLoadingIncompatibilityConstraint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskLoadingIncompatibilityConstraint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


