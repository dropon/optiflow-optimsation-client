/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.28
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OvertimeCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OvertimeCost{}

// OvertimeCost Specifies an extra fixed cost and an increased cost per hour if the route duration exceeds a threshold. Either the fixed cost or the extra cost per hour must not be zero.
type OvertimeCost struct {
	// The threshold for the route duration [s] above which the extra costs apply.
	Threshold int32 `json:"threshold"`
	// Specifies the extra fixed cost when exceeding the threshold.
	ExtraFixed *float64 `json:"extraFixed,omitempty"`
	// Specifies the extra cost for every hour above the threshold.
	ExtraPerHour *float64 `json:"extraPerHour,omitempty"`
}

type _OvertimeCost OvertimeCost

// NewOvertimeCost instantiates a new OvertimeCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOvertimeCost(threshold int32) *OvertimeCost {
	this := OvertimeCost{}
	this.Threshold = threshold
	var extraFixed float64 = 0
	this.ExtraFixed = &extraFixed
	var extraPerHour float64 = 0
	this.ExtraPerHour = &extraPerHour
	return &this
}

// NewOvertimeCostWithDefaults instantiates a new OvertimeCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOvertimeCostWithDefaults() *OvertimeCost {
	this := OvertimeCost{}
	var extraFixed float64 = 0
	this.ExtraFixed = &extraFixed
	var extraPerHour float64 = 0
	this.ExtraPerHour = &extraPerHour
	return &this
}

// GetThreshold returns the Threshold field value
func (o *OvertimeCost) GetThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *OvertimeCost) GetThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *OvertimeCost) SetThreshold(v int32) {
	o.Threshold = v
}

// GetExtraFixed returns the ExtraFixed field value if set, zero value otherwise.
func (o *OvertimeCost) GetExtraFixed() float64 {
	if o == nil || IsNil(o.ExtraFixed) {
		var ret float64
		return ret
	}
	return *o.ExtraFixed
}

// GetExtraFixedOk returns a tuple with the ExtraFixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OvertimeCost) GetExtraFixedOk() (*float64, bool) {
	if o == nil || IsNil(o.ExtraFixed) {
		return nil, false
	}
	return o.ExtraFixed, true
}

// HasExtraFixed returns a boolean if a field has been set.
func (o *OvertimeCost) HasExtraFixed() bool {
	if o != nil && !IsNil(o.ExtraFixed) {
		return true
	}

	return false
}

// SetExtraFixed gets a reference to the given float64 and assigns it to the ExtraFixed field.
func (o *OvertimeCost) SetExtraFixed(v float64) {
	o.ExtraFixed = &v
}

// GetExtraPerHour returns the ExtraPerHour field value if set, zero value otherwise.
func (o *OvertimeCost) GetExtraPerHour() float64 {
	if o == nil || IsNil(o.ExtraPerHour) {
		var ret float64
		return ret
	}
	return *o.ExtraPerHour
}

// GetExtraPerHourOk returns a tuple with the ExtraPerHour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OvertimeCost) GetExtraPerHourOk() (*float64, bool) {
	if o == nil || IsNil(o.ExtraPerHour) {
		return nil, false
	}
	return o.ExtraPerHour, true
}

// HasExtraPerHour returns a boolean if a field has been set.
func (o *OvertimeCost) HasExtraPerHour() bool {
	if o != nil && !IsNil(o.ExtraPerHour) {
		return true
	}

	return false
}

// SetExtraPerHour gets a reference to the given float64 and assigns it to the ExtraPerHour field.
func (o *OvertimeCost) SetExtraPerHour(v float64) {
	o.ExtraPerHour = &v
}

func (o OvertimeCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OvertimeCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["threshold"] = o.Threshold
	if !IsNil(o.ExtraFixed) {
		toSerialize["extraFixed"] = o.ExtraFixed
	}
	if !IsNil(o.ExtraPerHour) {
		toSerialize["extraPerHour"] = o.ExtraPerHour
	}
	return toSerialize, nil
}

func (o *OvertimeCost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"threshold",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOvertimeCost := _OvertimeCost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOvertimeCost)

	if err != nil {
		return err
	}

	*o = OvertimeCost(varOvertimeCost)

	return err
}

type NullableOvertimeCost struct {
	value *OvertimeCost
	isSet bool
}

func (v NullableOvertimeCost) Get() *OvertimeCost {
	return v.value
}

func (v *NullableOvertimeCost) Set(val *OvertimeCost) {
	v.value = val
	v.isSet = true
}

func (v NullableOvertimeCost) IsSet() bool {
	return v.isSet
}

func (v *NullableOvertimeCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOvertimeCost(val *OvertimeCost) *NullableOvertimeCost {
	return &NullableOvertimeCost{value: val, isSet: true}
}

func (v NullableOvertimeCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOvertimeCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


