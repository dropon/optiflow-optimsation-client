/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.28
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OrderProperties type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrderProperties{}

// OrderProperties Information about the order.
type OrderProperties struct {
	// A list of load definitions that describe the necessary vehicle capacity to transport the order. For each dimension, the sum of the values of orders loaded into the vehicle must be lower than or equal to the value of the vehicle.
	Loads []Load `json:"loads,omitempty"`
	// When two orders are loaded into the same compartment and delivered in the same order, we refer to them as a non-last-in-first-out (non-LIFO) pair. Any non-LIFO pair of orders requires repositioning in the vehicle, as the last picked-up order obstructs the first order that needs to be delivered. The effort involved in this repositioning is the minimum effort required for the two orders. The total repositioning effort for the route is the sum of the repositioning efforts for all non-LIFO pairs of orders.
	RepositioningEffort *int32 `json:"repositioningEffort,omitempty"`
	// Defines the cost for not scheduling the order on a route. This cost is weighed against the cost of scheduling the order on a route. When omitted the optimization will try to schedule the order regardless of the added cost.
	OutsourcingCost *float64 `json:"outsourcingCost,omitempty"`
	// A list of categories the order belongs to that can be used to describe constraints or rules.
	Categories []string `json:"categories,omitempty"`
}

// NewOrderProperties instantiates a new OrderProperties object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrderProperties() *OrderProperties {
	this := OrderProperties{}
	var repositioningEffort int32 = 0
	this.RepositioningEffort = &repositioningEffort
	return &this
}

// NewOrderPropertiesWithDefaults instantiates a new OrderProperties object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrderPropertiesWithDefaults() *OrderProperties {
	this := OrderProperties{}
	var repositioningEffort int32 = 0
	this.RepositioningEffort = &repositioningEffort
	return &this
}

// GetLoads returns the Loads field value if set, zero value otherwise.
func (o *OrderProperties) GetLoads() []Load {
	if o == nil || IsNil(o.Loads) {
		var ret []Load
		return ret
	}
	return o.Loads
}

// GetLoadsOk returns a tuple with the Loads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderProperties) GetLoadsOk() ([]Load, bool) {
	if o == nil || IsNil(o.Loads) {
		return nil, false
	}
	return o.Loads, true
}

// HasLoads returns a boolean if a field has been set.
func (o *OrderProperties) HasLoads() bool {
	if o != nil && !IsNil(o.Loads) {
		return true
	}

	return false
}

// SetLoads gets a reference to the given []Load and assigns it to the Loads field.
func (o *OrderProperties) SetLoads(v []Load) {
	o.Loads = v
}

// GetRepositioningEffort returns the RepositioningEffort field value if set, zero value otherwise.
func (o *OrderProperties) GetRepositioningEffort() int32 {
	if o == nil || IsNil(o.RepositioningEffort) {
		var ret int32
		return ret
	}
	return *o.RepositioningEffort
}

// GetRepositioningEffortOk returns a tuple with the RepositioningEffort field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderProperties) GetRepositioningEffortOk() (*int32, bool) {
	if o == nil || IsNil(o.RepositioningEffort) {
		return nil, false
	}
	return o.RepositioningEffort, true
}

// HasRepositioningEffort returns a boolean if a field has been set.
func (o *OrderProperties) HasRepositioningEffort() bool {
	if o != nil && !IsNil(o.RepositioningEffort) {
		return true
	}

	return false
}

// SetRepositioningEffort gets a reference to the given int32 and assigns it to the RepositioningEffort field.
func (o *OrderProperties) SetRepositioningEffort(v int32) {
	o.RepositioningEffort = &v
}

// GetOutsourcingCost returns the OutsourcingCost field value if set, zero value otherwise.
func (o *OrderProperties) GetOutsourcingCost() float64 {
	if o == nil || IsNil(o.OutsourcingCost) {
		var ret float64
		return ret
	}
	return *o.OutsourcingCost
}

// GetOutsourcingCostOk returns a tuple with the OutsourcingCost field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderProperties) GetOutsourcingCostOk() (*float64, bool) {
	if o == nil || IsNil(o.OutsourcingCost) {
		return nil, false
	}
	return o.OutsourcingCost, true
}

// HasOutsourcingCost returns a boolean if a field has been set.
func (o *OrderProperties) HasOutsourcingCost() bool {
	if o != nil && !IsNil(o.OutsourcingCost) {
		return true
	}

	return false
}

// SetOutsourcingCost gets a reference to the given float64 and assigns it to the OutsourcingCost field.
func (o *OrderProperties) SetOutsourcingCost(v float64) {
	o.OutsourcingCost = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *OrderProperties) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrderProperties) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *OrderProperties) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *OrderProperties) SetCategories(v []string) {
	o.Categories = v
}

func (o OrderProperties) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrderProperties) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Loads) {
		toSerialize["loads"] = o.Loads
	}
	if !IsNil(o.RepositioningEffort) {
		toSerialize["repositioningEffort"] = o.RepositioningEffort
	}
	if !IsNil(o.OutsourcingCost) {
		toSerialize["outsourcingCost"] = o.OutsourcingCost
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	return toSerialize, nil
}

type NullableOrderProperties struct {
	value *OrderProperties
	isSet bool
}

func (v NullableOrderProperties) Get() *OrderProperties {
	return v.value
}

func (v *NullableOrderProperties) Set(val *OrderProperties) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderProperties) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderProperties) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderProperties(val *OrderProperties) *NullableOrderProperties {
	return &NullableOrderProperties{value: val, isSet: true}
}

func (v NullableOrderProperties) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderProperties) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


