/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.25
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Vehicle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vehicle{}

// Vehicle A vehicle that can be used to schedule routes. The optimization can only assign a single route to a vehicle while respecting the properties and constraints of the vehicle.
type Vehicle struct {
	// A unique identifier of the vehicle.
	Id string `json:"id" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	Start VehicleStart `json:"start"`
	End VehicleEnd `json:"end"`
	Routing VehicleRouting `json:"routing"`
	// A list of resource categories specifying the resources required by the vehicle. For each category in this list exactly one matching resource will be assigned to the vehicle.
	RequiredResourceCategories []string `json:"requiredResourceCategories,omitempty"`
	Costs VehicleCosts `json:"costs"`
	Preferences *VehiclePreferences `json:"preferences,omitempty"`
	Breaks *BreakSettings `json:"breaks,omitempty"`
	// A list of compartments available for loading orders. Orders placed into the same compartment must follow the compartment's loading strategy, which may impose restrictions on the unloading sequence. If orders are loaded into separate compartments, no restrictions apply to the unloading sequence. When unspecified or empty, the vehicle is assumed to have a single compartment with loading strategy `NONE`.
	Compartments []Compartment `json:"compartments,omitempty"`
	Constraints *VehicleConstraints `json:"constraints,omitempty"`
	// A list of categories the vehicle belongs to that can be used to describe constraints or rules.
	Categories []string `json:"categories,omitempty"`
}

type _Vehicle Vehicle

// NewVehicle instantiates a new Vehicle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicle(id string, start VehicleStart, end VehicleEnd, routing VehicleRouting, costs VehicleCosts) *Vehicle {
	this := Vehicle{}
	this.Id = id
	this.Start = start
	this.End = end
	this.Routing = routing
	this.Costs = costs
	return &this
}

// NewVehicleWithDefaults instantiates a new Vehicle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleWithDefaults() *Vehicle {
	this := Vehicle{}
	return &this
}

// GetId returns the Id field value
func (o *Vehicle) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Vehicle) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Vehicle) SetId(v string) {
	o.Id = v
}

// GetStart returns the Start field value
func (o *Vehicle) GetStart() VehicleStart {
	if o == nil {
		var ret VehicleStart
		return ret
	}

	return o.Start
}

// GetStartOk returns a tuple with the Start field value
// and a boolean to check if the value has been set.
func (o *Vehicle) GetStartOk() (*VehicleStart, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Start, true
}

// SetStart sets field value
func (o *Vehicle) SetStart(v VehicleStart) {
	o.Start = v
}

// GetEnd returns the End field value
func (o *Vehicle) GetEnd() VehicleEnd {
	if o == nil {
		var ret VehicleEnd
		return ret
	}

	return o.End
}

// GetEndOk returns a tuple with the End field value
// and a boolean to check if the value has been set.
func (o *Vehicle) GetEndOk() (*VehicleEnd, bool) {
	if o == nil {
		return nil, false
	}
	return &o.End, true
}

// SetEnd sets field value
func (o *Vehicle) SetEnd(v VehicleEnd) {
	o.End = v
}

// GetRouting returns the Routing field value
func (o *Vehicle) GetRouting() VehicleRouting {
	if o == nil {
		var ret VehicleRouting
		return ret
	}

	return o.Routing
}

// GetRoutingOk returns a tuple with the Routing field value
// and a boolean to check if the value has been set.
func (o *Vehicle) GetRoutingOk() (*VehicleRouting, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Routing, true
}

// SetRouting sets field value
func (o *Vehicle) SetRouting(v VehicleRouting) {
	o.Routing = v
}

// GetRequiredResourceCategories returns the RequiredResourceCategories field value if set, zero value otherwise.
func (o *Vehicle) GetRequiredResourceCategories() []string {
	if o == nil || IsNil(o.RequiredResourceCategories) {
		var ret []string
		return ret
	}
	return o.RequiredResourceCategories
}

// GetRequiredResourceCategoriesOk returns a tuple with the RequiredResourceCategories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetRequiredResourceCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.RequiredResourceCategories) {
		return nil, false
	}
	return o.RequiredResourceCategories, true
}

// HasRequiredResourceCategories returns a boolean if a field has been set.
func (o *Vehicle) HasRequiredResourceCategories() bool {
	if o != nil && !IsNil(o.RequiredResourceCategories) {
		return true
	}

	return false
}

// SetRequiredResourceCategories gets a reference to the given []string and assigns it to the RequiredResourceCategories field.
func (o *Vehicle) SetRequiredResourceCategories(v []string) {
	o.RequiredResourceCategories = v
}

// GetCosts returns the Costs field value
func (o *Vehicle) GetCosts() VehicleCosts {
	if o == nil {
		var ret VehicleCosts
		return ret
	}

	return o.Costs
}

// GetCostsOk returns a tuple with the Costs field value
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCostsOk() (*VehicleCosts, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Costs, true
}

// SetCosts sets field value
func (o *Vehicle) SetCosts(v VehicleCosts) {
	o.Costs = v
}

// GetPreferences returns the Preferences field value if set, zero value otherwise.
func (o *Vehicle) GetPreferences() VehiclePreferences {
	if o == nil || IsNil(o.Preferences) {
		var ret VehiclePreferences
		return ret
	}
	return *o.Preferences
}

// GetPreferencesOk returns a tuple with the Preferences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetPreferencesOk() (*VehiclePreferences, bool) {
	if o == nil || IsNil(o.Preferences) {
		return nil, false
	}
	return o.Preferences, true
}

// HasPreferences returns a boolean if a field has been set.
func (o *Vehicle) HasPreferences() bool {
	if o != nil && !IsNil(o.Preferences) {
		return true
	}

	return false
}

// SetPreferences gets a reference to the given VehiclePreferences and assigns it to the Preferences field.
func (o *Vehicle) SetPreferences(v VehiclePreferences) {
	o.Preferences = &v
}

// GetBreaks returns the Breaks field value if set, zero value otherwise.
func (o *Vehicle) GetBreaks() BreakSettings {
	if o == nil || IsNil(o.Breaks) {
		var ret BreakSettings
		return ret
	}
	return *o.Breaks
}

// GetBreaksOk returns a tuple with the Breaks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetBreaksOk() (*BreakSettings, bool) {
	if o == nil || IsNil(o.Breaks) {
		return nil, false
	}
	return o.Breaks, true
}

// HasBreaks returns a boolean if a field has been set.
func (o *Vehicle) HasBreaks() bool {
	if o != nil && !IsNil(o.Breaks) {
		return true
	}

	return false
}

// SetBreaks gets a reference to the given BreakSettings and assigns it to the Breaks field.
func (o *Vehicle) SetBreaks(v BreakSettings) {
	o.Breaks = &v
}

// GetCompartments returns the Compartments field value if set, zero value otherwise.
func (o *Vehicle) GetCompartments() []Compartment {
	if o == nil || IsNil(o.Compartments) {
		var ret []Compartment
		return ret
	}
	return o.Compartments
}

// GetCompartmentsOk returns a tuple with the Compartments field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCompartmentsOk() ([]Compartment, bool) {
	if o == nil || IsNil(o.Compartments) {
		return nil, false
	}
	return o.Compartments, true
}

// HasCompartments returns a boolean if a field has been set.
func (o *Vehicle) HasCompartments() bool {
	if o != nil && !IsNil(o.Compartments) {
		return true
	}

	return false
}

// SetCompartments gets a reference to the given []Compartment and assigns it to the Compartments field.
func (o *Vehicle) SetCompartments(v []Compartment) {
	o.Compartments = v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *Vehicle) GetConstraints() VehicleConstraints {
	if o == nil || IsNil(o.Constraints) {
		var ret VehicleConstraints
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetConstraintsOk() (*VehicleConstraints, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *Vehicle) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given VehicleConstraints and assigns it to the Constraints field.
func (o *Vehicle) SetConstraints(v VehicleConstraints) {
	o.Constraints = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *Vehicle) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *Vehicle) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *Vehicle) SetCategories(v []string) {
	o.Categories = v
}

func (o Vehicle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vehicle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["start"] = o.Start
	toSerialize["end"] = o.End
	toSerialize["routing"] = o.Routing
	if !IsNil(o.RequiredResourceCategories) {
		toSerialize["requiredResourceCategories"] = o.RequiredResourceCategories
	}
	toSerialize["costs"] = o.Costs
	if !IsNil(o.Preferences) {
		toSerialize["preferences"] = o.Preferences
	}
	if !IsNil(o.Breaks) {
		toSerialize["breaks"] = o.Breaks
	}
	if !IsNil(o.Compartments) {
		toSerialize["compartments"] = o.Compartments
	}
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	return toSerialize, nil
}

func (o *Vehicle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"start",
		"end",
		"routing",
		"costs",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicle := _Vehicle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicle)

	if err != nil {
		return err
	}

	*o = Vehicle(varVehicle)

	return err
}

type NullableVehicle struct {
	value *Vehicle
	isSet bool
}

func (v NullableVehicle) Get() *Vehicle {
	return v.value
}

func (v *NullableVehicle) Set(val *Vehicle) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicle) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicle(val *Vehicle) *NullableVehicle {
	return &NullableVehicle{value: val, isSet: true}
}

func (v NullableVehicle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


