/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Vehicle type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Vehicle{}

// Vehicle A vehicle that is used to transport goods.
type Vehicle struct {
	// A unique ID across all vehicles. The ID does not influence the result except the sorting of the routes.
	Id string `json:"id" validate:"regexp=.*[^ ].*"`
	// List of capacities for the different quantity dimensions of goods that can be transported. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and all vehicles. If and only if this list of capacities is empty for all vehicles, the quantities of each transport must be empty.
	Capacities []int32 `json:"capacities,omitempty"`
	// List of alternative capacities. Each entry in this array must be valid capacities, more details are described in **capacities**. If a route cannot be driven with the **capacities**, alternative capacities may be chosen by the optimization considering the chosen **capacitiesChangePosition**.  See [here](./concepts/capacities-and-alternative-capacities) for more information.
	AlternativeCapacities [][]int32 `json:"alternativeCapacities,omitempty"`
	CapacitiesChangePosition *CapacitiesChangePosition `json:"capacitiesChangePosition,omitempty"`
	// List of vehicle equipment. A transport can only be served by the vehicle if this list is a superset of (or equal to) the transport's required vehicle equipment.
	Equipment []string `json:"equipment,omitempty"`
	// The profile defines attributes of the vehicle relevant to determine travel times and distances between any two locations. See [here](./concepts/profiles-and-countries) for a complete list of allowed values. If the majority of locations are in the Americas, _USA_8_SEMITRAILER_5AXLE_ is used as the default. Otherwise, _EUR_TRAILER_TRUCK_ is used as the default.  If most locations are located in the Americas but a non-American vehicle profile is specified or vice-versa, a warning is returned. Always use a vehicle profile which matches the region of the locations to obtain best results.
	Profile *string `json:"profile,omitempty"`
	// ID of the vehicle's start location. If the vehicle start location does not coincide with the location of the first pickup, only the coordinates of the vehicle start location are considered and all other attributes such as opening intervals, service time or type are ignored. If no start location is specified, it is assumed that the vehicle is available at the first stop.
	StartLocationId *string `json:"startLocationId,omitempty" validate:"regexp=.*[^ ].*"`
	// ID of the vehicle's end location. If the vehicle end location does not coincide with the location of the last delivery, only the coordinates of the vehicle end location are considered and all other attributes such as opening intervals, service time or type are ignored. If no end location is specified, it is assumed that the vehicle remains at the last stop.
	EndLocationId *string `json:"endLocationId,omitempty" validate:"regexp=.*[^ ].*"`
	// Vehicle-dependent service time [s], for example, for maneuvering. This service time is taken into account for each stop served by this vehicle to pick up or deliver goods. Besides a vehicle-dependent service time, the user may specify location- and transport-dependent service times at the locations and the transports respectively.
	ServiceTimePerTransportStop *int32 `json:"serviceTimePerTransportStop,omitempty"`
	// A factor that scales transport-dependent service times of all transport-related service actions, for example, if loading and unloading is more or less complicated than for other vehicles. A factor less than one means that the vehicle speeds up the service, a factor greater than one means that it slows the service down.
	ServiceTimeFactor *float64 `json:"serviceTimeFactor,omitempty"`
	// Indicates whether the mixed loading prohibitions are relevant for this vehicle. If set to false, the mixed loading prohibitions -- if there are any -- must be respected on every trip of the vehicle. If set to true, the mixed loading prohibitions are ignored by the vehicle.
	IgnoreMixedLoadingProhibitions *bool `json:"ignoreMixedLoadingProhibitions,omitempty"`
	// Interval in which the vehicle has to start its route. Start and end of the interval may be the same. Leaving this parameter empty means that the route start is unrestricted.
	RouteStartInterval *TimeInterval `json:"routeStartInterval,omitempty"`
	// Restricts the maximum allowed total driving distance [m] for the route of this vehicle.
	MaximumDistance NullableInt32 `json:"maximumDistance,omitempty"`
	// Restricts the maximum allowed total number of customer stops, i.e. stops at customer locations, for the route of this vehicle.
	MaximumNumberOfCustomerStops NullableInt32 `json:"maximumNumberOfCustomerStops,omitempty"`
}

type _Vehicle Vehicle

// NewVehicle instantiates a new Vehicle object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicle(id string) *Vehicle {
	this := Vehicle{}
	this.Id = id
	var capacitiesChangePosition CapacitiesChangePosition = BETWEEN_TRIPS_CAPACITIES
	this.CapacitiesChangePosition = &capacitiesChangePosition
	var serviceTimePerTransportStop int32 = 0
	this.ServiceTimePerTransportStop = &serviceTimePerTransportStop
	var serviceTimeFactor float64 = 1
	this.ServiceTimeFactor = &serviceTimeFactor
	var ignoreMixedLoadingProhibitions bool = false
	this.IgnoreMixedLoadingProhibitions = &ignoreMixedLoadingProhibitions
	return &this
}

// NewVehicleWithDefaults instantiates a new Vehicle object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleWithDefaults() *Vehicle {
	this := Vehicle{}
	var capacitiesChangePosition CapacitiesChangePosition = BETWEEN_TRIPS_CAPACITIES
	this.CapacitiesChangePosition = &capacitiesChangePosition
	var serviceTimePerTransportStop int32 = 0
	this.ServiceTimePerTransportStop = &serviceTimePerTransportStop
	var serviceTimeFactor float64 = 1
	this.ServiceTimeFactor = &serviceTimeFactor
	var ignoreMixedLoadingProhibitions bool = false
	this.IgnoreMixedLoadingProhibitions = &ignoreMixedLoadingProhibitions
	return &this
}

// GetId returns the Id field value
func (o *Vehicle) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Vehicle) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Vehicle) SetId(v string) {
	o.Id = v
}

// GetCapacities returns the Capacities field value if set, zero value otherwise.
func (o *Vehicle) GetCapacities() []int32 {
	if o == nil || IsNil(o.Capacities) {
		var ret []int32
		return ret
	}
	return o.Capacities
}

// GetCapacitiesOk returns a tuple with the Capacities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCapacitiesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Capacities) {
		return nil, false
	}
	return o.Capacities, true
}

// HasCapacities returns a boolean if a field has been set.
func (o *Vehicle) HasCapacities() bool {
	if o != nil && !IsNil(o.Capacities) {
		return true
	}

	return false
}

// SetCapacities gets a reference to the given []int32 and assigns it to the Capacities field.
func (o *Vehicle) SetCapacities(v []int32) {
	o.Capacities = v
}

// GetAlternativeCapacities returns the AlternativeCapacities field value if set, zero value otherwise.
func (o *Vehicle) GetAlternativeCapacities() [][]int32 {
	if o == nil || IsNil(o.AlternativeCapacities) {
		var ret [][]int32
		return ret
	}
	return o.AlternativeCapacities
}

// GetAlternativeCapacitiesOk returns a tuple with the AlternativeCapacities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetAlternativeCapacitiesOk() ([][]int32, bool) {
	if o == nil || IsNil(o.AlternativeCapacities) {
		return nil, false
	}
	return o.AlternativeCapacities, true
}

// HasAlternativeCapacities returns a boolean if a field has been set.
func (o *Vehicle) HasAlternativeCapacities() bool {
	if o != nil && !IsNil(o.AlternativeCapacities) {
		return true
	}

	return false
}

// SetAlternativeCapacities gets a reference to the given [][]int32 and assigns it to the AlternativeCapacities field.
func (o *Vehicle) SetAlternativeCapacities(v [][]int32) {
	o.AlternativeCapacities = v
}

// GetCapacitiesChangePosition returns the CapacitiesChangePosition field value if set, zero value otherwise.
func (o *Vehicle) GetCapacitiesChangePosition() CapacitiesChangePosition {
	if o == nil || IsNil(o.CapacitiesChangePosition) {
		var ret CapacitiesChangePosition
		return ret
	}
	return *o.CapacitiesChangePosition
}

// GetCapacitiesChangePositionOk returns a tuple with the CapacitiesChangePosition field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetCapacitiesChangePositionOk() (*CapacitiesChangePosition, bool) {
	if o == nil || IsNil(o.CapacitiesChangePosition) {
		return nil, false
	}
	return o.CapacitiesChangePosition, true
}

// HasCapacitiesChangePosition returns a boolean if a field has been set.
func (o *Vehicle) HasCapacitiesChangePosition() bool {
	if o != nil && !IsNil(o.CapacitiesChangePosition) {
		return true
	}

	return false
}

// SetCapacitiesChangePosition gets a reference to the given CapacitiesChangePosition and assigns it to the CapacitiesChangePosition field.
func (o *Vehicle) SetCapacitiesChangePosition(v CapacitiesChangePosition) {
	o.CapacitiesChangePosition = &v
}

// GetEquipment returns the Equipment field value if set, zero value otherwise.
func (o *Vehicle) GetEquipment() []string {
	if o == nil || IsNil(o.Equipment) {
		var ret []string
		return ret
	}
	return o.Equipment
}

// GetEquipmentOk returns a tuple with the Equipment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetEquipmentOk() ([]string, bool) {
	if o == nil || IsNil(o.Equipment) {
		return nil, false
	}
	return o.Equipment, true
}

// HasEquipment returns a boolean if a field has been set.
func (o *Vehicle) HasEquipment() bool {
	if o != nil && !IsNil(o.Equipment) {
		return true
	}

	return false
}

// SetEquipment gets a reference to the given []string and assigns it to the Equipment field.
func (o *Vehicle) SetEquipment(v []string) {
	o.Equipment = v
}

// GetProfile returns the Profile field value if set, zero value otherwise.
func (o *Vehicle) GetProfile() string {
	if o == nil || IsNil(o.Profile) {
		var ret string
		return ret
	}
	return *o.Profile
}

// GetProfileOk returns a tuple with the Profile field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetProfileOk() (*string, bool) {
	if o == nil || IsNil(o.Profile) {
		return nil, false
	}
	return o.Profile, true
}

// HasProfile returns a boolean if a field has been set.
func (o *Vehicle) HasProfile() bool {
	if o != nil && !IsNil(o.Profile) {
		return true
	}

	return false
}

// SetProfile gets a reference to the given string and assigns it to the Profile field.
func (o *Vehicle) SetProfile(v string) {
	o.Profile = &v
}

// GetStartLocationId returns the StartLocationId field value if set, zero value otherwise.
func (o *Vehicle) GetStartLocationId() string {
	if o == nil || IsNil(o.StartLocationId) {
		var ret string
		return ret
	}
	return *o.StartLocationId
}

// GetStartLocationIdOk returns a tuple with the StartLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetStartLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.StartLocationId) {
		return nil, false
	}
	return o.StartLocationId, true
}

// HasStartLocationId returns a boolean if a field has been set.
func (o *Vehicle) HasStartLocationId() bool {
	if o != nil && !IsNil(o.StartLocationId) {
		return true
	}

	return false
}

// SetStartLocationId gets a reference to the given string and assigns it to the StartLocationId field.
func (o *Vehicle) SetStartLocationId(v string) {
	o.StartLocationId = &v
}

// GetEndLocationId returns the EndLocationId field value if set, zero value otherwise.
func (o *Vehicle) GetEndLocationId() string {
	if o == nil || IsNil(o.EndLocationId) {
		var ret string
		return ret
	}
	return *o.EndLocationId
}

// GetEndLocationIdOk returns a tuple with the EndLocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetEndLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.EndLocationId) {
		return nil, false
	}
	return o.EndLocationId, true
}

// HasEndLocationId returns a boolean if a field has been set.
func (o *Vehicle) HasEndLocationId() bool {
	if o != nil && !IsNil(o.EndLocationId) {
		return true
	}

	return false
}

// SetEndLocationId gets a reference to the given string and assigns it to the EndLocationId field.
func (o *Vehicle) SetEndLocationId(v string) {
	o.EndLocationId = &v
}

// GetServiceTimePerTransportStop returns the ServiceTimePerTransportStop field value if set, zero value otherwise.
func (o *Vehicle) GetServiceTimePerTransportStop() int32 {
	if o == nil || IsNil(o.ServiceTimePerTransportStop) {
		var ret int32
		return ret
	}
	return *o.ServiceTimePerTransportStop
}

// GetServiceTimePerTransportStopOk returns a tuple with the ServiceTimePerTransportStop field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetServiceTimePerTransportStopOk() (*int32, bool) {
	if o == nil || IsNil(o.ServiceTimePerTransportStop) {
		return nil, false
	}
	return o.ServiceTimePerTransportStop, true
}

// HasServiceTimePerTransportStop returns a boolean if a field has been set.
func (o *Vehicle) HasServiceTimePerTransportStop() bool {
	if o != nil && !IsNil(o.ServiceTimePerTransportStop) {
		return true
	}

	return false
}

// SetServiceTimePerTransportStop gets a reference to the given int32 and assigns it to the ServiceTimePerTransportStop field.
func (o *Vehicle) SetServiceTimePerTransportStop(v int32) {
	o.ServiceTimePerTransportStop = &v
}

// GetServiceTimeFactor returns the ServiceTimeFactor field value if set, zero value otherwise.
func (o *Vehicle) GetServiceTimeFactor() float64 {
	if o == nil || IsNil(o.ServiceTimeFactor) {
		var ret float64
		return ret
	}
	return *o.ServiceTimeFactor
}

// GetServiceTimeFactorOk returns a tuple with the ServiceTimeFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetServiceTimeFactorOk() (*float64, bool) {
	if o == nil || IsNil(o.ServiceTimeFactor) {
		return nil, false
	}
	return o.ServiceTimeFactor, true
}

// HasServiceTimeFactor returns a boolean if a field has been set.
func (o *Vehicle) HasServiceTimeFactor() bool {
	if o != nil && !IsNil(o.ServiceTimeFactor) {
		return true
	}

	return false
}

// SetServiceTimeFactor gets a reference to the given float64 and assigns it to the ServiceTimeFactor field.
func (o *Vehicle) SetServiceTimeFactor(v float64) {
	o.ServiceTimeFactor = &v
}

// GetIgnoreMixedLoadingProhibitions returns the IgnoreMixedLoadingProhibitions field value if set, zero value otherwise.
func (o *Vehicle) GetIgnoreMixedLoadingProhibitions() bool {
	if o == nil || IsNil(o.IgnoreMixedLoadingProhibitions) {
		var ret bool
		return ret
	}
	return *o.IgnoreMixedLoadingProhibitions
}

// GetIgnoreMixedLoadingProhibitionsOk returns a tuple with the IgnoreMixedLoadingProhibitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetIgnoreMixedLoadingProhibitionsOk() (*bool, bool) {
	if o == nil || IsNil(o.IgnoreMixedLoadingProhibitions) {
		return nil, false
	}
	return o.IgnoreMixedLoadingProhibitions, true
}

// HasIgnoreMixedLoadingProhibitions returns a boolean if a field has been set.
func (o *Vehicle) HasIgnoreMixedLoadingProhibitions() bool {
	if o != nil && !IsNil(o.IgnoreMixedLoadingProhibitions) {
		return true
	}

	return false
}

// SetIgnoreMixedLoadingProhibitions gets a reference to the given bool and assigns it to the IgnoreMixedLoadingProhibitions field.
func (o *Vehicle) SetIgnoreMixedLoadingProhibitions(v bool) {
	o.IgnoreMixedLoadingProhibitions = &v
}

// GetRouteStartInterval returns the RouteStartInterval field value if set, zero value otherwise.
func (o *Vehicle) GetRouteStartInterval() TimeInterval {
	if o == nil || IsNil(o.RouteStartInterval) {
		var ret TimeInterval
		return ret
	}
	return *o.RouteStartInterval
}

// GetRouteStartIntervalOk returns a tuple with the RouteStartInterval field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Vehicle) GetRouteStartIntervalOk() (*TimeInterval, bool) {
	if o == nil || IsNil(o.RouteStartInterval) {
		return nil, false
	}
	return o.RouteStartInterval, true
}

// HasRouteStartInterval returns a boolean if a field has been set.
func (o *Vehicle) HasRouteStartInterval() bool {
	if o != nil && !IsNil(o.RouteStartInterval) {
		return true
	}

	return false
}

// SetRouteStartInterval gets a reference to the given TimeInterval and assigns it to the RouteStartInterval field.
func (o *Vehicle) SetRouteStartInterval(v TimeInterval) {
	o.RouteStartInterval = &v
}

// GetMaximumDistance returns the MaximumDistance field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vehicle) GetMaximumDistance() int32 {
	if o == nil || IsNil(o.MaximumDistance.Get()) {
		var ret int32
		return ret
	}
	return *o.MaximumDistance.Get()
}

// GetMaximumDistanceOk returns a tuple with the MaximumDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vehicle) GetMaximumDistanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaximumDistance.Get(), o.MaximumDistance.IsSet()
}

// HasMaximumDistance returns a boolean if a field has been set.
func (o *Vehicle) HasMaximumDistance() bool {
	if o != nil && o.MaximumDistance.IsSet() {
		return true
	}

	return false
}

// SetMaximumDistance gets a reference to the given NullableInt32 and assigns it to the MaximumDistance field.
func (o *Vehicle) SetMaximumDistance(v int32) {
	o.MaximumDistance.Set(&v)
}
// SetMaximumDistanceNil sets the value for MaximumDistance to be an explicit nil
func (o *Vehicle) SetMaximumDistanceNil() {
	o.MaximumDistance.Set(nil)
}

// UnsetMaximumDistance ensures that no value is present for MaximumDistance, not even an explicit nil
func (o *Vehicle) UnsetMaximumDistance() {
	o.MaximumDistance.Unset()
}

// GetMaximumNumberOfCustomerStops returns the MaximumNumberOfCustomerStops field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Vehicle) GetMaximumNumberOfCustomerStops() int32 {
	if o == nil || IsNil(o.MaximumNumberOfCustomerStops.Get()) {
		var ret int32
		return ret
	}
	return *o.MaximumNumberOfCustomerStops.Get()
}

// GetMaximumNumberOfCustomerStopsOk returns a tuple with the MaximumNumberOfCustomerStops field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Vehicle) GetMaximumNumberOfCustomerStopsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaximumNumberOfCustomerStops.Get(), o.MaximumNumberOfCustomerStops.IsSet()
}

// HasMaximumNumberOfCustomerStops returns a boolean if a field has been set.
func (o *Vehicle) HasMaximumNumberOfCustomerStops() bool {
	if o != nil && o.MaximumNumberOfCustomerStops.IsSet() {
		return true
	}

	return false
}

// SetMaximumNumberOfCustomerStops gets a reference to the given NullableInt32 and assigns it to the MaximumNumberOfCustomerStops field.
func (o *Vehicle) SetMaximumNumberOfCustomerStops(v int32) {
	o.MaximumNumberOfCustomerStops.Set(&v)
}
// SetMaximumNumberOfCustomerStopsNil sets the value for MaximumNumberOfCustomerStops to be an explicit nil
func (o *Vehicle) SetMaximumNumberOfCustomerStopsNil() {
	o.MaximumNumberOfCustomerStops.Set(nil)
}

// UnsetMaximumNumberOfCustomerStops ensures that no value is present for MaximumNumberOfCustomerStops, not even an explicit nil
func (o *Vehicle) UnsetMaximumNumberOfCustomerStops() {
	o.MaximumNumberOfCustomerStops.Unset()
}

func (o Vehicle) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Vehicle) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Capacities) {
		toSerialize["capacities"] = o.Capacities
	}
	if !IsNil(o.AlternativeCapacities) {
		toSerialize["alternativeCapacities"] = o.AlternativeCapacities
	}
	if !IsNil(o.CapacitiesChangePosition) {
		toSerialize["capacitiesChangePosition"] = o.CapacitiesChangePosition
	}
	if !IsNil(o.Equipment) {
		toSerialize["equipment"] = o.Equipment
	}
	if !IsNil(o.Profile) {
		toSerialize["profile"] = o.Profile
	}
	if !IsNil(o.StartLocationId) {
		toSerialize["startLocationId"] = o.StartLocationId
	}
	if !IsNil(o.EndLocationId) {
		toSerialize["endLocationId"] = o.EndLocationId
	}
	if !IsNil(o.ServiceTimePerTransportStop) {
		toSerialize["serviceTimePerTransportStop"] = o.ServiceTimePerTransportStop
	}
	if !IsNil(o.ServiceTimeFactor) {
		toSerialize["serviceTimeFactor"] = o.ServiceTimeFactor
	}
	if !IsNil(o.IgnoreMixedLoadingProhibitions) {
		toSerialize["ignoreMixedLoadingProhibitions"] = o.IgnoreMixedLoadingProhibitions
	}
	if !IsNil(o.RouteStartInterval) {
		toSerialize["routeStartInterval"] = o.RouteStartInterval
	}
	if o.MaximumDistance.IsSet() {
		toSerialize["maximumDistance"] = o.MaximumDistance.Get()
	}
	if o.MaximumNumberOfCustomerStops.IsSet() {
		toSerialize["maximumNumberOfCustomerStops"] = o.MaximumNumberOfCustomerStops.Get()
	}
	return toSerialize, nil
}

func (o *Vehicle) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varVehicle := _Vehicle{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varVehicle)

	if err != nil {
		return err
	}

	*o = Vehicle(varVehicle)

	return err
}

type NullableVehicle struct {
	value *Vehicle
	isSet bool
}

func (v NullableVehicle) Get() *Vehicle {
	return v.value
}

func (v *NullableVehicle) Set(val *Vehicle) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicle) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicle) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicle(val *Vehicle) *NullableVehicle {
	return &NullableVehicle{value: val, isSet: true}
}

func (v NullableVehicle) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicle) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


