/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"fmt"
)

// CapacitiesChangePosition Position where the **capacities** or **alternativeCapacities** of the vehicle may be changed.
type CapacitiesChangePosition string

// List of CapacitiesChangePosition
const (
	BETWEEN_TRIPS_CAPACITIES CapacitiesChangePosition = "BETWEEN_TRIPS"
	AT_STOP CapacitiesChangePosition = "AT_STOP"
)

// All allowed values of CapacitiesChangePosition enum
var AllowedCapacitiesChangePositionEnumValues = []CapacitiesChangePosition{
	"BETWEEN_TRIPS",
	"AT_STOP",
}

func (v *CapacitiesChangePosition) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := CapacitiesChangePosition(value)
	for _, existing := range AllowedCapacitiesChangePositionEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid CapacitiesChangePosition", value)
}

// NewCapacitiesChangePositionFromValue returns a pointer to a valid CapacitiesChangePosition
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewCapacitiesChangePositionFromValue(v string) (*CapacitiesChangePosition, error) {
	ev := CapacitiesChangePosition(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for CapacitiesChangePosition: valid values are %v", v, AllowedCapacitiesChangePositionEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v CapacitiesChangePosition) IsValid() bool {
	for _, existing := range AllowedCapacitiesChangePositionEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to CapacitiesChangePosition value
func (v CapacitiesChangePosition) Ptr() *CapacitiesChangePosition {
	return &v
}

type NullableCapacitiesChangePosition struct {
	value *CapacitiesChangePosition
	isSet bool
}

func (v NullableCapacitiesChangePosition) Get() *CapacitiesChangePosition {
	return v.value
}

func (v *NullableCapacitiesChangePosition) Set(val *CapacitiesChangePosition) {
	v.value = val
	v.isSet = true
}

func (v NullableCapacitiesChangePosition) IsSet() bool {
	return v.isSet
}

func (v *NullableCapacitiesChangePosition) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCapacitiesChangePosition(val *CapacitiesChangePosition) *NullableCapacitiesChangePosition {
	return &NullableCapacitiesChangePosition{value: val, isSet: true}
}

func (v NullableCapacitiesChangePosition) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCapacitiesChangePosition) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

