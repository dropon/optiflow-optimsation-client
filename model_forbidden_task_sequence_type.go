/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.16
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// ForbiddenTaskSequenceType Determines in which cases the sequence is forbidden. * `NOT_IMMEDIATELY_BEFORE` - The task immediately before a task belonging to the second category must not belong to the first category. * `NOT_BEFORE` - Tasks from the first category cannot be executed before a task from the second category, regardless of whether there are other tasks in between.
type ForbiddenTaskSequenceType string

// List of ForbiddenTaskSequenceType
const (
	NOT_IMMEDIATELY_BEFORE ForbiddenTaskSequenceType = "NOT_IMMEDIATELY_BEFORE"
	NOT_BEFORE ForbiddenTaskSequenceType = "NOT_BEFORE"
)

// All allowed values of ForbiddenTaskSequenceType enum
var AllowedForbiddenTaskSequenceTypeEnumValues = []ForbiddenTaskSequenceType{
	"NOT_IMMEDIATELY_BEFORE",
	"NOT_BEFORE",
}

func (v *ForbiddenTaskSequenceType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := ForbiddenTaskSequenceType(value)
	for _, existing := range AllowedForbiddenTaskSequenceTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid ForbiddenTaskSequenceType", value)
}

// NewForbiddenTaskSequenceTypeFromValue returns a pointer to a valid ForbiddenTaskSequenceType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewForbiddenTaskSequenceTypeFromValue(v string) (*ForbiddenTaskSequenceType, error) {
	ev := ForbiddenTaskSequenceType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for ForbiddenTaskSequenceType: valid values are %v", v, AllowedForbiddenTaskSequenceTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v ForbiddenTaskSequenceType) IsValid() bool {
	for _, existing := range AllowedForbiddenTaskSequenceTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to ForbiddenTaskSequenceType value
func (v ForbiddenTaskSequenceType) Ptr() *ForbiddenTaskSequenceType {
	return &v
}

type NullableForbiddenTaskSequenceType struct {
	value *ForbiddenTaskSequenceType
	isSet bool
}

func (v NullableForbiddenTaskSequenceType) Get() *ForbiddenTaskSequenceType {
	return v.value
}

func (v *NullableForbiddenTaskSequenceType) Set(val *ForbiddenTaskSequenceType) {
	v.value = val
	v.isSet = true
}

func (v NullableForbiddenTaskSequenceType) IsSet() bool {
	return v.isSet
}

func (v *NullableForbiddenTaskSequenceType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableForbiddenTaskSequenceType(val *ForbiddenTaskSequenceType) *NullableForbiddenTaskSequenceType {
	return &NullableForbiddenTaskSequenceType{value: val, isSet: true}
}

func (v NullableForbiddenTaskSequenceType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableForbiddenTaskSequenceType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

