/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.20
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OverdistanceCost type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OverdistanceCost{}

// OverdistanceCost Specifies an extra fixed cost and an increased cost per kilometer if the total distance of a route exceeds a threshold. Either the fixed cost or the extra cost per kilometer must not be zero.
type OverdistanceCost struct {
	// The threshold for the route's total distance [m] above which the extra cost per kilometer applies.
	Threshold int32 `json:"threshold"`
	// Specifies the extra fixed cost when exceeding the threshold.
	ExtraFixed *float64 `json:"extraFixed,omitempty"`
	// Specifies the extra cost for every kilometer above the threshold.
	ExtraPerKilometer *float64 `json:"extraPerKilometer,omitempty"`
}

type _OverdistanceCost OverdistanceCost

// NewOverdistanceCost instantiates a new OverdistanceCost object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOverdistanceCost(threshold int32) *OverdistanceCost {
	this := OverdistanceCost{}
	this.Threshold = threshold
	var extraFixed float64 = 0
	this.ExtraFixed = &extraFixed
	var extraPerKilometer float64 = 0
	this.ExtraPerKilometer = &extraPerKilometer
	return &this
}

// NewOverdistanceCostWithDefaults instantiates a new OverdistanceCost object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOverdistanceCostWithDefaults() *OverdistanceCost {
	this := OverdistanceCost{}
	var extraFixed float64 = 0
	this.ExtraFixed = &extraFixed
	var extraPerKilometer float64 = 0
	this.ExtraPerKilometer = &extraPerKilometer
	return &this
}

// GetThreshold returns the Threshold field value
func (o *OverdistanceCost) GetThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Threshold
}

// GetThresholdOk returns a tuple with the Threshold field value
// and a boolean to check if the value has been set.
func (o *OverdistanceCost) GetThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Threshold, true
}

// SetThreshold sets field value
func (o *OverdistanceCost) SetThreshold(v int32) {
	o.Threshold = v
}

// GetExtraFixed returns the ExtraFixed field value if set, zero value otherwise.
func (o *OverdistanceCost) GetExtraFixed() float64 {
	if o == nil || IsNil(o.ExtraFixed) {
		var ret float64
		return ret
	}
	return *o.ExtraFixed
}

// GetExtraFixedOk returns a tuple with the ExtraFixed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverdistanceCost) GetExtraFixedOk() (*float64, bool) {
	if o == nil || IsNil(o.ExtraFixed) {
		return nil, false
	}
	return o.ExtraFixed, true
}

// HasExtraFixed returns a boolean if a field has been set.
func (o *OverdistanceCost) HasExtraFixed() bool {
	if o != nil && !IsNil(o.ExtraFixed) {
		return true
	}

	return false
}

// SetExtraFixed gets a reference to the given float64 and assigns it to the ExtraFixed field.
func (o *OverdistanceCost) SetExtraFixed(v float64) {
	o.ExtraFixed = &v
}

// GetExtraPerKilometer returns the ExtraPerKilometer field value if set, zero value otherwise.
func (o *OverdistanceCost) GetExtraPerKilometer() float64 {
	if o == nil || IsNil(o.ExtraPerKilometer) {
		var ret float64
		return ret
	}
	return *o.ExtraPerKilometer
}

// GetExtraPerKilometerOk returns a tuple with the ExtraPerKilometer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OverdistanceCost) GetExtraPerKilometerOk() (*float64, bool) {
	if o == nil || IsNil(o.ExtraPerKilometer) {
		return nil, false
	}
	return o.ExtraPerKilometer, true
}

// HasExtraPerKilometer returns a boolean if a field has been set.
func (o *OverdistanceCost) HasExtraPerKilometer() bool {
	if o != nil && !IsNil(o.ExtraPerKilometer) {
		return true
	}

	return false
}

// SetExtraPerKilometer gets a reference to the given float64 and assigns it to the ExtraPerKilometer field.
func (o *OverdistanceCost) SetExtraPerKilometer(v float64) {
	o.ExtraPerKilometer = &v
}

func (o OverdistanceCost) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OverdistanceCost) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["threshold"] = o.Threshold
	if !IsNil(o.ExtraFixed) {
		toSerialize["extraFixed"] = o.ExtraFixed
	}
	if !IsNil(o.ExtraPerKilometer) {
		toSerialize["extraPerKilometer"] = o.ExtraPerKilometer
	}
	return toSerialize, nil
}

func (o *OverdistanceCost) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"threshold",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOverdistanceCost := _OverdistanceCost{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOverdistanceCost)

	if err != nil {
		return err
	}

	*o = OverdistanceCost(varOverdistanceCost)

	return err
}

type NullableOverdistanceCost struct {
	value *OverdistanceCost
	isSet bool
}

func (v NullableOverdistanceCost) Get() *OverdistanceCost {
	return v.value
}

func (v *NullableOverdistanceCost) Set(val *OverdistanceCost) {
	v.value = val
	v.isSet = true
}

func (v NullableOverdistanceCost) IsSet() bool {
	return v.isSet
}

func (v *NullableOverdistanceCost) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOverdistanceCost(val *OverdistanceCost) *NullableOverdistanceCost {
	return &NullableOverdistanceCost{value: val, isSet: true}
}

func (v NullableOverdistanceCost) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOverdistanceCost) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


