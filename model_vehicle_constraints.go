/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.22
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the VehicleConstraints type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VehicleConstraints{}

// VehicleConstraints Defines constraints on the tasks that can be executed with the vehicle.
type VehicleConstraints struct {
	// A list of load dimensions that describe the capacity of the vehicle. For each dimension specified in this list, the sum of the values of the orders loaded in the vehicle must be lower than or equal to the value of the vehicle. For unspecified dimensions, the load of the vehicle is assumed to be unconstrained for this dimension.
	MaximumLoads []Load `json:"maximumLoads,omitempty"`
	Route *RouteConstraints `json:"route,omitempty"`
}

// NewVehicleConstraints instantiates a new VehicleConstraints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVehicleConstraints() *VehicleConstraints {
	this := VehicleConstraints{}
	return &this
}

// NewVehicleConstraintsWithDefaults instantiates a new VehicleConstraints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVehicleConstraintsWithDefaults() *VehicleConstraints {
	this := VehicleConstraints{}
	return &this
}

// GetMaximumLoads returns the MaximumLoads field value if set, zero value otherwise.
func (o *VehicleConstraints) GetMaximumLoads() []Load {
	if o == nil || IsNil(o.MaximumLoads) {
		var ret []Load
		return ret
	}
	return o.MaximumLoads
}

// GetMaximumLoadsOk returns a tuple with the MaximumLoads field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleConstraints) GetMaximumLoadsOk() ([]Load, bool) {
	if o == nil || IsNil(o.MaximumLoads) {
		return nil, false
	}
	return o.MaximumLoads, true
}

// HasMaximumLoads returns a boolean if a field has been set.
func (o *VehicleConstraints) HasMaximumLoads() bool {
	if o != nil && !IsNil(o.MaximumLoads) {
		return true
	}

	return false
}

// SetMaximumLoads gets a reference to the given []Load and assigns it to the MaximumLoads field.
func (o *VehicleConstraints) SetMaximumLoads(v []Load) {
	o.MaximumLoads = v
}

// GetRoute returns the Route field value if set, zero value otherwise.
func (o *VehicleConstraints) GetRoute() RouteConstraints {
	if o == nil || IsNil(o.Route) {
		var ret RouteConstraints
		return ret
	}
	return *o.Route
}

// GetRouteOk returns a tuple with the Route field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VehicleConstraints) GetRouteOk() (*RouteConstraints, bool) {
	if o == nil || IsNil(o.Route) {
		return nil, false
	}
	return o.Route, true
}

// HasRoute returns a boolean if a field has been set.
func (o *VehicleConstraints) HasRoute() bool {
	if o != nil && !IsNil(o.Route) {
		return true
	}

	return false
}

// SetRoute gets a reference to the given RouteConstraints and assigns it to the Route field.
func (o *VehicleConstraints) SetRoute(v RouteConstraints) {
	o.Route = &v
}

func (o VehicleConstraints) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VehicleConstraints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaximumLoads) {
		toSerialize["maximumLoads"] = o.MaximumLoads
	}
	if !IsNil(o.Route) {
		toSerialize["route"] = o.Route
	}
	return toSerialize, nil
}

type NullableVehicleConstraints struct {
	value *VehicleConstraints
	isSet bool
}

func (v NullableVehicleConstraints) Get() *VehicleConstraints {
	return v.value
}

func (v *NullableVehicleConstraints) Set(val *VehicleConstraints) {
	v.value = val
	v.isSet = true
}

func (v NullableVehicleConstraints) IsSet() bool {
	return v.isSet
}

func (v *NullableVehicleConstraints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVehicleConstraints(val *VehicleConstraints) *NullableVehicleConstraints {
	return &NullableVehicleConstraints{value: val, isSet: true}
}

func (v NullableVehicleConstraints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVehicleConstraints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


