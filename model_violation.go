/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Violation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Violation{}

// Violation Specifies a violation of a route.
type Violation struct {
	Type ViolationType `json:"type"`
	// Specifies a violation that involves a time limit: Time by which the limit is exceeded. Is only filled for the following violation types: _PLANNING_HORIZON_, _ROUTE_START_INTERVAL_, _DRIVER_AVAILABILITY_, _OPENING_INTERVAL_, _MAXIMUM_TRAVEL_TIME_OF_DRIVER_, _MAXIMUM_DRIVING_TIME_OF_DRIVER_.
	TimeExceedance *int32 `json:"timeExceedance,omitempty"`
	// Specifies a violation that involves a distance limit: Distance by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_DISTANCE_.
	DistanceExceedance *int32 `json:"distanceExceedance,omitempty"`
	// Specifies a violation that involves a stop limit: Number of stops by which the limit is exceeded. Is only filled for the following violation type: _MAXIMUM_NUMBER_OF_CUSTOMER_STOPS_.
	NumberOfStopsExceedance *int32 `json:"numberOfStopsExceedance,omitempty"`
	// Specifies a violation of the capacities of the used vehicle: Exceedance of the capacity in each quantity dimension of goods. Is only filled for the following violation type: _VEHICLE_CAPACITY_.
	CapacityExceedance []int32 `json:"capacityExceedance,omitempty"`
	// Specifies a violation for missing equipment (e.g. missing equipment of the used vehicle) that is required by the transports of the route. Is only filled for the following violation type: _VEHICLE_EQUIPMENT_.
	MissingEquipment []string `json:"missingEquipment,omitempty"`
	// Is only filled for the following violation type: _MIXED_LOADING_PROHIBITION_.
	MixedLoadingProhibitions []MixedLoadingProhibition `json:"mixedLoadingProhibitions,omitempty"`
}

type _Violation Violation

// NewViolation instantiates a new Violation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewViolation(type_ ViolationType) *Violation {
	this := Violation{}
	this.Type = type_
	return &this
}

// NewViolationWithDefaults instantiates a new Violation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewViolationWithDefaults() *Violation {
	this := Violation{}
	return &this
}

// GetType returns the Type field value
func (o *Violation) GetType() ViolationType {
	if o == nil {
		var ret ViolationType
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Violation) GetTypeOk() (*ViolationType, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Violation) SetType(v ViolationType) {
	o.Type = v
}

// GetTimeExceedance returns the TimeExceedance field value if set, zero value otherwise.
func (o *Violation) GetTimeExceedance() int32 {
	if o == nil || IsNil(o.TimeExceedance) {
		var ret int32
		return ret
	}
	return *o.TimeExceedance
}

// GetTimeExceedanceOk returns a tuple with the TimeExceedance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Violation) GetTimeExceedanceOk() (*int32, bool) {
	if o == nil || IsNil(o.TimeExceedance) {
		return nil, false
	}
	return o.TimeExceedance, true
}

// HasTimeExceedance returns a boolean if a field has been set.
func (o *Violation) HasTimeExceedance() bool {
	if o != nil && !IsNil(o.TimeExceedance) {
		return true
	}

	return false
}

// SetTimeExceedance gets a reference to the given int32 and assigns it to the TimeExceedance field.
func (o *Violation) SetTimeExceedance(v int32) {
	o.TimeExceedance = &v
}

// GetDistanceExceedance returns the DistanceExceedance field value if set, zero value otherwise.
func (o *Violation) GetDistanceExceedance() int32 {
	if o == nil || IsNil(o.DistanceExceedance) {
		var ret int32
		return ret
	}
	return *o.DistanceExceedance
}

// GetDistanceExceedanceOk returns a tuple with the DistanceExceedance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Violation) GetDistanceExceedanceOk() (*int32, bool) {
	if o == nil || IsNil(o.DistanceExceedance) {
		return nil, false
	}
	return o.DistanceExceedance, true
}

// HasDistanceExceedance returns a boolean if a field has been set.
func (o *Violation) HasDistanceExceedance() bool {
	if o != nil && !IsNil(o.DistanceExceedance) {
		return true
	}

	return false
}

// SetDistanceExceedance gets a reference to the given int32 and assigns it to the DistanceExceedance field.
func (o *Violation) SetDistanceExceedance(v int32) {
	o.DistanceExceedance = &v
}

// GetNumberOfStopsExceedance returns the NumberOfStopsExceedance field value if set, zero value otherwise.
func (o *Violation) GetNumberOfStopsExceedance() int32 {
	if o == nil || IsNil(o.NumberOfStopsExceedance) {
		var ret int32
		return ret
	}
	return *o.NumberOfStopsExceedance
}

// GetNumberOfStopsExceedanceOk returns a tuple with the NumberOfStopsExceedance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Violation) GetNumberOfStopsExceedanceOk() (*int32, bool) {
	if o == nil || IsNil(o.NumberOfStopsExceedance) {
		return nil, false
	}
	return o.NumberOfStopsExceedance, true
}

// HasNumberOfStopsExceedance returns a boolean if a field has been set.
func (o *Violation) HasNumberOfStopsExceedance() bool {
	if o != nil && !IsNil(o.NumberOfStopsExceedance) {
		return true
	}

	return false
}

// SetNumberOfStopsExceedance gets a reference to the given int32 and assigns it to the NumberOfStopsExceedance field.
func (o *Violation) SetNumberOfStopsExceedance(v int32) {
	o.NumberOfStopsExceedance = &v
}

// GetCapacityExceedance returns the CapacityExceedance field value if set, zero value otherwise.
func (o *Violation) GetCapacityExceedance() []int32 {
	if o == nil || IsNil(o.CapacityExceedance) {
		var ret []int32
		return ret
	}
	return o.CapacityExceedance
}

// GetCapacityExceedanceOk returns a tuple with the CapacityExceedance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Violation) GetCapacityExceedanceOk() ([]int32, bool) {
	if o == nil || IsNil(o.CapacityExceedance) {
		return nil, false
	}
	return o.CapacityExceedance, true
}

// HasCapacityExceedance returns a boolean if a field has been set.
func (o *Violation) HasCapacityExceedance() bool {
	if o != nil && !IsNil(o.CapacityExceedance) {
		return true
	}

	return false
}

// SetCapacityExceedance gets a reference to the given []int32 and assigns it to the CapacityExceedance field.
func (o *Violation) SetCapacityExceedance(v []int32) {
	o.CapacityExceedance = v
}

// GetMissingEquipment returns the MissingEquipment field value if set, zero value otherwise.
func (o *Violation) GetMissingEquipment() []string {
	if o == nil || IsNil(o.MissingEquipment) {
		var ret []string
		return ret
	}
	return o.MissingEquipment
}

// GetMissingEquipmentOk returns a tuple with the MissingEquipment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Violation) GetMissingEquipmentOk() ([]string, bool) {
	if o == nil || IsNil(o.MissingEquipment) {
		return nil, false
	}
	return o.MissingEquipment, true
}

// HasMissingEquipment returns a boolean if a field has been set.
func (o *Violation) HasMissingEquipment() bool {
	if o != nil && !IsNil(o.MissingEquipment) {
		return true
	}

	return false
}

// SetMissingEquipment gets a reference to the given []string and assigns it to the MissingEquipment field.
func (o *Violation) SetMissingEquipment(v []string) {
	o.MissingEquipment = v
}

// GetMixedLoadingProhibitions returns the MixedLoadingProhibitions field value if set, zero value otherwise.
func (o *Violation) GetMixedLoadingProhibitions() []MixedLoadingProhibition {
	if o == nil || IsNil(o.MixedLoadingProhibitions) {
		var ret []MixedLoadingProhibition
		return ret
	}
	return o.MixedLoadingProhibitions
}

// GetMixedLoadingProhibitionsOk returns a tuple with the MixedLoadingProhibitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Violation) GetMixedLoadingProhibitionsOk() ([]MixedLoadingProhibition, bool) {
	if o == nil || IsNil(o.MixedLoadingProhibitions) {
		return nil, false
	}
	return o.MixedLoadingProhibitions, true
}

// HasMixedLoadingProhibitions returns a boolean if a field has been set.
func (o *Violation) HasMixedLoadingProhibitions() bool {
	if o != nil && !IsNil(o.MixedLoadingProhibitions) {
		return true
	}

	return false
}

// SetMixedLoadingProhibitions gets a reference to the given []MixedLoadingProhibition and assigns it to the MixedLoadingProhibitions field.
func (o *Violation) SetMixedLoadingProhibitions(v []MixedLoadingProhibition) {
	o.MixedLoadingProhibitions = v
}

func (o Violation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Violation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	if !IsNil(o.TimeExceedance) {
		toSerialize["timeExceedance"] = o.TimeExceedance
	}
	if !IsNil(o.DistanceExceedance) {
		toSerialize["distanceExceedance"] = o.DistanceExceedance
	}
	if !IsNil(o.NumberOfStopsExceedance) {
		toSerialize["numberOfStopsExceedance"] = o.NumberOfStopsExceedance
	}
	if !IsNil(o.CapacityExceedance) {
		toSerialize["capacityExceedance"] = o.CapacityExceedance
	}
	if !IsNil(o.MissingEquipment) {
		toSerialize["missingEquipment"] = o.MissingEquipment
	}
	if !IsNil(o.MixedLoadingProhibitions) {
		toSerialize["mixedLoadingProhibitions"] = o.MixedLoadingProhibitions
	}
	return toSerialize, nil
}

func (o *Violation) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varViolation := _Violation{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varViolation)

	if err != nil {
		return err
	}

	*o = Violation(varViolation)

	return err
}

type NullableViolation struct {
	value *Violation
	isSet bool
}

func (v NullableViolation) Get() *Violation {
	return v.value
}

func (v *NullableViolation) Set(val *Violation) {
	v.value = val
	v.isSet = true
}

func (v NullableViolation) IsSet() bool {
	return v.isSet
}

func (v *NullableViolation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableViolation(val *Violation) *NullableViolation {
	return &NullableViolation{value: val, isSet: true}
}

func (v NullableViolation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableViolation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


