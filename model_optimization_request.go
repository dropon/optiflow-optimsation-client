/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.26
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OptimizationRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptimizationRequest{}

// OptimizationRequest The request data needed to start an optimization.
type OptimizationRequest struct {
	Settings OptimizationSettings `json:"settings"`
	// A list of locations where goods have to be picked up or delivered, or where vehicles are located. Please note that the upper bound on number of locations is a technical limit. Check your individual price plan or contract to see which limits apply.
	Locations []Location `json:"locations"`
	Orders Orders `json:"orders"`
	// A list of vehicles that can be used by optimization to schedule routes. Optimization can only assign a single route to a vehicle and must respect the properties and constraints of the vehicle. Please note that the upper bound on number of vehicles is a technical limit. Check your individual price plan or contract to see which limits apply.
	Vehicles []Vehicle `json:"vehicles"`
	// A list of resources that can be assigned to vehicles. Resources are shared assets that cannot be used simultaneously by multiple vehicles. When vehicles share a resource, their routes must be scheduled such that they do not overlap in time.
	Resources []Resource `json:"resources,omitempty"`
	// A list of depots where pickup orders can be delivered to or delivery orders can be picked up from. When providing pickup or delivery orders, at least one depot must be specified. When stopping at a depot, all pickup orders present in the vehicle are unloaded first. Afterwards, delivery orders can be loaded into the vehicle. Those must be delivered before stopping at the next depot.
	Depots []Depot `json:"depots,omitempty"`
	// A list of routes that should be reconstructed prior to optimization. Reconstruction ensures all constraints are met and may involve removing orders, changing breaks, or adjusting the start time of the route. After the reconstruction, the optimization will try to improve the routes. The structure of the routes can be changed by the optimization as long as the constraints are satisfied. Check your individual price plan or contract to see whether or not the request may contain routes.
	Routes []RouteStructure `json:"routes,omitempty"`
	Constraints *Constraints `json:"constraints,omitempty"`
	Rules *Rules `json:"rules,omitempty"`
	Metadata *OptimizationRequestMetadata `json:"metadata,omitempty"`
}

type _OptimizationRequest OptimizationRequest

// NewOptimizationRequest instantiates a new OptimizationRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptimizationRequest(settings OptimizationSettings, locations []Location, orders Orders, vehicles []Vehicle) *OptimizationRequest {
	this := OptimizationRequest{}
	this.Settings = settings
	this.Locations = locations
	this.Orders = orders
	this.Vehicles = vehicles
	return &this
}

// NewOptimizationRequestWithDefaults instantiates a new OptimizationRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptimizationRequestWithDefaults() *OptimizationRequest {
	this := OptimizationRequest{}
	return &this
}

// GetSettings returns the Settings field value
func (o *OptimizationRequest) GetSettings() OptimizationSettings {
	if o == nil {
		var ret OptimizationSettings
		return ret
	}

	return o.Settings
}

// GetSettingsOk returns a tuple with the Settings field value
// and a boolean to check if the value has been set.
func (o *OptimizationRequest) GetSettingsOk() (*OptimizationSettings, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Settings, true
}

// SetSettings sets field value
func (o *OptimizationRequest) SetSettings(v OptimizationSettings) {
	o.Settings = v
}

// GetLocations returns the Locations field value
func (o *OptimizationRequest) GetLocations() []Location {
	if o == nil {
		var ret []Location
		return ret
	}

	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value
// and a boolean to check if the value has been set.
func (o *OptimizationRequest) GetLocationsOk() ([]Location, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locations, true
}

// SetLocations sets field value
func (o *OptimizationRequest) SetLocations(v []Location) {
	o.Locations = v
}

// GetOrders returns the Orders field value
func (o *OptimizationRequest) GetOrders() Orders {
	if o == nil {
		var ret Orders
		return ret
	}

	return o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value
// and a boolean to check if the value has been set.
func (o *OptimizationRequest) GetOrdersOk() (*Orders, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Orders, true
}

// SetOrders sets field value
func (o *OptimizationRequest) SetOrders(v Orders) {
	o.Orders = v
}

// GetVehicles returns the Vehicles field value
func (o *OptimizationRequest) GetVehicles() []Vehicle {
	if o == nil {
		var ret []Vehicle
		return ret
	}

	return o.Vehicles
}

// GetVehiclesOk returns a tuple with the Vehicles field value
// and a boolean to check if the value has been set.
func (o *OptimizationRequest) GetVehiclesOk() ([]Vehicle, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vehicles, true
}

// SetVehicles sets field value
func (o *OptimizationRequest) SetVehicles(v []Vehicle) {
	o.Vehicles = v
}

// GetResources returns the Resources field value if set, zero value otherwise.
func (o *OptimizationRequest) GetResources() []Resource {
	if o == nil || IsNil(o.Resources) {
		var ret []Resource
		return ret
	}
	return o.Resources
}

// GetResourcesOk returns a tuple with the Resources field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptimizationRequest) GetResourcesOk() ([]Resource, bool) {
	if o == nil || IsNil(o.Resources) {
		return nil, false
	}
	return o.Resources, true
}

// HasResources returns a boolean if a field has been set.
func (o *OptimizationRequest) HasResources() bool {
	if o != nil && !IsNil(o.Resources) {
		return true
	}

	return false
}

// SetResources gets a reference to the given []Resource and assigns it to the Resources field.
func (o *OptimizationRequest) SetResources(v []Resource) {
	o.Resources = v
}

// GetDepots returns the Depots field value if set, zero value otherwise.
func (o *OptimizationRequest) GetDepots() []Depot {
	if o == nil || IsNil(o.Depots) {
		var ret []Depot
		return ret
	}
	return o.Depots
}

// GetDepotsOk returns a tuple with the Depots field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptimizationRequest) GetDepotsOk() ([]Depot, bool) {
	if o == nil || IsNil(o.Depots) {
		return nil, false
	}
	return o.Depots, true
}

// HasDepots returns a boolean if a field has been set.
func (o *OptimizationRequest) HasDepots() bool {
	if o != nil && !IsNil(o.Depots) {
		return true
	}

	return false
}

// SetDepots gets a reference to the given []Depot and assigns it to the Depots field.
func (o *OptimizationRequest) SetDepots(v []Depot) {
	o.Depots = v
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *OptimizationRequest) GetRoutes() []RouteStructure {
	if o == nil || IsNil(o.Routes) {
		var ret []RouteStructure
		return ret
	}
	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptimizationRequest) GetRoutesOk() ([]RouteStructure, bool) {
	if o == nil || IsNil(o.Routes) {
		return nil, false
	}
	return o.Routes, true
}

// HasRoutes returns a boolean if a field has been set.
func (o *OptimizationRequest) HasRoutes() bool {
	if o != nil && !IsNil(o.Routes) {
		return true
	}

	return false
}

// SetRoutes gets a reference to the given []RouteStructure and assigns it to the Routes field.
func (o *OptimizationRequest) SetRoutes(v []RouteStructure) {
	o.Routes = v
}

// GetConstraints returns the Constraints field value if set, zero value otherwise.
func (o *OptimizationRequest) GetConstraints() Constraints {
	if o == nil || IsNil(o.Constraints) {
		var ret Constraints
		return ret
	}
	return *o.Constraints
}

// GetConstraintsOk returns a tuple with the Constraints field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptimizationRequest) GetConstraintsOk() (*Constraints, bool) {
	if o == nil || IsNil(o.Constraints) {
		return nil, false
	}
	return o.Constraints, true
}

// HasConstraints returns a boolean if a field has been set.
func (o *OptimizationRequest) HasConstraints() bool {
	if o != nil && !IsNil(o.Constraints) {
		return true
	}

	return false
}

// SetConstraints gets a reference to the given Constraints and assigns it to the Constraints field.
func (o *OptimizationRequest) SetConstraints(v Constraints) {
	o.Constraints = &v
}

// GetRules returns the Rules field value if set, zero value otherwise.
func (o *OptimizationRequest) GetRules() Rules {
	if o == nil || IsNil(o.Rules) {
		var ret Rules
		return ret
	}
	return *o.Rules
}

// GetRulesOk returns a tuple with the Rules field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptimizationRequest) GetRulesOk() (*Rules, bool) {
	if o == nil || IsNil(o.Rules) {
		return nil, false
	}
	return o.Rules, true
}

// HasRules returns a boolean if a field has been set.
func (o *OptimizationRequest) HasRules() bool {
	if o != nil && !IsNil(o.Rules) {
		return true
	}

	return false
}

// SetRules gets a reference to the given Rules and assigns it to the Rules field.
func (o *OptimizationRequest) SetRules(v Rules) {
	o.Rules = &v
}

// GetMetadata returns the Metadata field value if set, zero value otherwise.
func (o *OptimizationRequest) GetMetadata() OptimizationRequestMetadata {
	if o == nil || IsNil(o.Metadata) {
		var ret OptimizationRequestMetadata
		return ret
	}
	return *o.Metadata
}

// GetMetadataOk returns a tuple with the Metadata field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OptimizationRequest) GetMetadataOk() (*OptimizationRequestMetadata, bool) {
	if o == nil || IsNil(o.Metadata) {
		return nil, false
	}
	return o.Metadata, true
}

// HasMetadata returns a boolean if a field has been set.
func (o *OptimizationRequest) HasMetadata() bool {
	if o != nil && !IsNil(o.Metadata) {
		return true
	}

	return false
}

// SetMetadata gets a reference to the given OptimizationRequestMetadata and assigns it to the Metadata field.
func (o *OptimizationRequest) SetMetadata(v OptimizationRequestMetadata) {
	o.Metadata = &v
}

func (o OptimizationRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptimizationRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["settings"] = o.Settings
	toSerialize["locations"] = o.Locations
	toSerialize["orders"] = o.Orders
	toSerialize["vehicles"] = o.Vehicles
	if !IsNil(o.Resources) {
		toSerialize["resources"] = o.Resources
	}
	if !IsNil(o.Depots) {
		toSerialize["depots"] = o.Depots
	}
	if !IsNil(o.Routes) {
		toSerialize["routes"] = o.Routes
	}
	if !IsNil(o.Constraints) {
		toSerialize["constraints"] = o.Constraints
	}
	if !IsNil(o.Rules) {
		toSerialize["rules"] = o.Rules
	}
	if !IsNil(o.Metadata) {
		toSerialize["metadata"] = o.Metadata
	}
	return toSerialize, nil
}

func (o *OptimizationRequest) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"settings",
		"locations",
		"orders",
		"vehicles",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOptimizationRequest := _OptimizationRequest{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOptimizationRequest)

	if err != nil {
		return err
	}

	*o = OptimizationRequest(varOptimizationRequest)

	return err
}

type NullableOptimizationRequest struct {
	value *OptimizationRequest
	isSet bool
}

func (v NullableOptimizationRequest) Get() *OptimizationRequest {
	return v.value
}

func (v *NullableOptimizationRequest) Set(val *OptimizationRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableOptimizationRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableOptimizationRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptimizationRequest(val *OptimizationRequest) *NullableOptimizationRequest {
	return &NullableOptimizationRequest{value: val, isSet: true}
}

func (v NullableOptimizationRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptimizationRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


