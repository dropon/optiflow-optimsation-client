/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DrivingBreakSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DrivingBreakSettings{}

// DrivingBreakSettings Restricts how long the driver of the vehicle may drive without taking a break of at least the specified duration.
type DrivingBreakSettings struct {
	// Describes how long [s] the driver may drive without taking a break of at least the specified duration.
	MaximumDrivingDuration int32 `json:"maximumDrivingDuration"`
	// Specifies the duration [s] of a break a driver has to take if they exceed the maximum driving duration.
	MinimumBreakDuration int32 `json:"minimumBreakDuration"`
}

type _DrivingBreakSettings DrivingBreakSettings

// NewDrivingBreakSettings instantiates a new DrivingBreakSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDrivingBreakSettings(maximumDrivingDuration int32, minimumBreakDuration int32) *DrivingBreakSettings {
	this := DrivingBreakSettings{}
	this.MaximumDrivingDuration = maximumDrivingDuration
	this.MinimumBreakDuration = minimumBreakDuration
	return &this
}

// NewDrivingBreakSettingsWithDefaults instantiates a new DrivingBreakSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDrivingBreakSettingsWithDefaults() *DrivingBreakSettings {
	this := DrivingBreakSettings{}
	return &this
}

// GetMaximumDrivingDuration returns the MaximumDrivingDuration field value
func (o *DrivingBreakSettings) GetMaximumDrivingDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaximumDrivingDuration
}

// GetMaximumDrivingDurationOk returns a tuple with the MaximumDrivingDuration field value
// and a boolean to check if the value has been set.
func (o *DrivingBreakSettings) GetMaximumDrivingDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaximumDrivingDuration, true
}

// SetMaximumDrivingDuration sets field value
func (o *DrivingBreakSettings) SetMaximumDrivingDuration(v int32) {
	o.MaximumDrivingDuration = v
}

// GetMinimumBreakDuration returns the MinimumBreakDuration field value
func (o *DrivingBreakSettings) GetMinimumBreakDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MinimumBreakDuration
}

// GetMinimumBreakDurationOk returns a tuple with the MinimumBreakDuration field value
// and a boolean to check if the value has been set.
func (o *DrivingBreakSettings) GetMinimumBreakDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinimumBreakDuration, true
}

// SetMinimumBreakDuration sets field value
func (o *DrivingBreakSettings) SetMinimumBreakDuration(v int32) {
	o.MinimumBreakDuration = v
}

func (o DrivingBreakSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DrivingBreakSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["maximumDrivingDuration"] = o.MaximumDrivingDuration
	toSerialize["minimumBreakDuration"] = o.MinimumBreakDuration
	return toSerialize, nil
}

func (o *DrivingBreakSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"maximumDrivingDuration",
		"minimumBreakDuration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDrivingBreakSettings := _DrivingBreakSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDrivingBreakSettings)

	if err != nil {
		return err
	}

	*o = DrivingBreakSettings(varDrivingBreakSettings)

	return err
}

type NullableDrivingBreakSettings struct {
	value *DrivingBreakSettings
	isSet bool
}

func (v NullableDrivingBreakSettings) Get() *DrivingBreakSettings {
	return v.value
}

func (v *NullableDrivingBreakSettings) Set(val *DrivingBreakSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDrivingBreakSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDrivingBreakSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDrivingBreakSettings(val *DrivingBreakSettings) *NullableDrivingBreakSettings {
	return &NullableDrivingBreakSettings{value: val, isSet: true}
}

func (v NullableDrivingBreakSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDrivingBreakSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


