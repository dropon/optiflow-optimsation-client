/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.23
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the DrivingBreakSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DrivingBreakSettings{}

// DrivingBreakSettings Restricts how long the driver of the vehicle may drive without taking a break of at least the specified duration(s). Either a minimum break duration or a list of minimum break durations should be provided.
type DrivingBreakSettings struct {
	// Describes how long [s] the driver may drive without taking a break of at least the specified duration.
	MaximumDrivingDuration int32 `json:"maximumDrivingDuration"`
	// **Deprecated, instead use `minimumBreakDurations` by specifying a list containing only this minimum break duration.** Specifies the duration [s] of a break a driver has to take if they exceed the maximum driving duration.
	// Deprecated
	MinimumBreakDuration *int32 `json:"minimumBreakDuration,omitempty"`
	// Specifies the durations [s] of the breaks a driver has to take before exceeding the maximum driving duration. The breaks must be taken in the order provided in this list but consecutive elements in this list may be combined into single breaks. For example, when specifying `[300, 900, 1200]`, the possible break configurations are `[300, 900, 1200]`, `[300 + 900 = 1200, 1200]`, `[300, 900 + 1200 = 2100]` and a single break `[300 + 900 + 1200 = 2400]`.
	MinimumBreakDurations []int32 `json:"minimumBreakDurations,omitempty"`
}

type _DrivingBreakSettings DrivingBreakSettings

// NewDrivingBreakSettings instantiates a new DrivingBreakSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDrivingBreakSettings(maximumDrivingDuration int32) *DrivingBreakSettings {
	this := DrivingBreakSettings{}
	this.MaximumDrivingDuration = maximumDrivingDuration
	return &this
}

// NewDrivingBreakSettingsWithDefaults instantiates a new DrivingBreakSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDrivingBreakSettingsWithDefaults() *DrivingBreakSettings {
	this := DrivingBreakSettings{}
	return &this
}

// GetMaximumDrivingDuration returns the MaximumDrivingDuration field value
func (o *DrivingBreakSettings) GetMaximumDrivingDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.MaximumDrivingDuration
}

// GetMaximumDrivingDurationOk returns a tuple with the MaximumDrivingDuration field value
// and a boolean to check if the value has been set.
func (o *DrivingBreakSettings) GetMaximumDrivingDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaximumDrivingDuration, true
}

// SetMaximumDrivingDuration sets field value
func (o *DrivingBreakSettings) SetMaximumDrivingDuration(v int32) {
	o.MaximumDrivingDuration = v
}

// GetMinimumBreakDuration returns the MinimumBreakDuration field value if set, zero value otherwise.
// Deprecated
func (o *DrivingBreakSettings) GetMinimumBreakDuration() int32 {
	if o == nil || IsNil(o.MinimumBreakDuration) {
		var ret int32
		return ret
	}
	return *o.MinimumBreakDuration
}

// GetMinimumBreakDurationOk returns a tuple with the MinimumBreakDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *DrivingBreakSettings) GetMinimumBreakDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.MinimumBreakDuration) {
		return nil, false
	}
	return o.MinimumBreakDuration, true
}

// HasMinimumBreakDuration returns a boolean if a field has been set.
func (o *DrivingBreakSettings) HasMinimumBreakDuration() bool {
	if o != nil && !IsNil(o.MinimumBreakDuration) {
		return true
	}

	return false
}

// SetMinimumBreakDuration gets a reference to the given int32 and assigns it to the MinimumBreakDuration field.
// Deprecated
func (o *DrivingBreakSettings) SetMinimumBreakDuration(v int32) {
	o.MinimumBreakDuration = &v
}

// GetMinimumBreakDurations returns the MinimumBreakDurations field value if set, zero value otherwise.
func (o *DrivingBreakSettings) GetMinimumBreakDurations() []int32 {
	if o == nil || IsNil(o.MinimumBreakDurations) {
		var ret []int32
		return ret
	}
	return o.MinimumBreakDurations
}

// GetMinimumBreakDurationsOk returns a tuple with the MinimumBreakDurations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DrivingBreakSettings) GetMinimumBreakDurationsOk() ([]int32, bool) {
	if o == nil || IsNil(o.MinimumBreakDurations) {
		return nil, false
	}
	return o.MinimumBreakDurations, true
}

// HasMinimumBreakDurations returns a boolean if a field has been set.
func (o *DrivingBreakSettings) HasMinimumBreakDurations() bool {
	if o != nil && !IsNil(o.MinimumBreakDurations) {
		return true
	}

	return false
}

// SetMinimumBreakDurations gets a reference to the given []int32 and assigns it to the MinimumBreakDurations field.
func (o *DrivingBreakSettings) SetMinimumBreakDurations(v []int32) {
	o.MinimumBreakDurations = v
}

func (o DrivingBreakSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DrivingBreakSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["maximumDrivingDuration"] = o.MaximumDrivingDuration
	if !IsNil(o.MinimumBreakDuration) {
		toSerialize["minimumBreakDuration"] = o.MinimumBreakDuration
	}
	if !IsNil(o.MinimumBreakDurations) {
		toSerialize["minimumBreakDurations"] = o.MinimumBreakDurations
	}
	return toSerialize, nil
}

func (o *DrivingBreakSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"maximumDrivingDuration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDrivingBreakSettings := _DrivingBreakSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDrivingBreakSettings)

	if err != nil {
		return err
	}

	*o = DrivingBreakSettings(varDrivingBreakSettings)

	return err
}

type NullableDrivingBreakSettings struct {
	value *DrivingBreakSettings
	isSet bool
}

func (v NullableDrivingBreakSettings) Get() *DrivingBreakSettings {
	return v.value
}

func (v *NullableDrivingBreakSettings) Set(val *DrivingBreakSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableDrivingBreakSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableDrivingBreakSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDrivingBreakSettings(val *DrivingBreakSettings) *NullableDrivingBreakSettings {
	return &NullableDrivingBreakSettings{value: val, isSet: true}
}

func (v NullableDrivingBreakSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDrivingBreakSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


