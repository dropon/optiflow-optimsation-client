/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.20
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Constraints type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Constraints{}

// Constraints Constraints that should be taken into account by optimization.
type Constraints struct {
	Combinations *CombinationConstraints `json:"combinations,omitempty"`
	Orders *OrderConstraints `json:"orders,omitempty"`
	Tasks *TaskConstraints `json:"tasks,omitempty"`
}

// NewConstraints instantiates a new Constraints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewConstraints() *Constraints {
	this := Constraints{}
	return &this
}

// NewConstraintsWithDefaults instantiates a new Constraints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewConstraintsWithDefaults() *Constraints {
	this := Constraints{}
	return &this
}

// GetCombinations returns the Combinations field value if set, zero value otherwise.
func (o *Constraints) GetCombinations() CombinationConstraints {
	if o == nil || IsNil(o.Combinations) {
		var ret CombinationConstraints
		return ret
	}
	return *o.Combinations
}

// GetCombinationsOk returns a tuple with the Combinations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraints) GetCombinationsOk() (*CombinationConstraints, bool) {
	if o == nil || IsNil(o.Combinations) {
		return nil, false
	}
	return o.Combinations, true
}

// HasCombinations returns a boolean if a field has been set.
func (o *Constraints) HasCombinations() bool {
	if o != nil && !IsNil(o.Combinations) {
		return true
	}

	return false
}

// SetCombinations gets a reference to the given CombinationConstraints and assigns it to the Combinations field.
func (o *Constraints) SetCombinations(v CombinationConstraints) {
	o.Combinations = &v
}

// GetOrders returns the Orders field value if set, zero value otherwise.
func (o *Constraints) GetOrders() OrderConstraints {
	if o == nil || IsNil(o.Orders) {
		var ret OrderConstraints
		return ret
	}
	return *o.Orders
}

// GetOrdersOk returns a tuple with the Orders field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraints) GetOrdersOk() (*OrderConstraints, bool) {
	if o == nil || IsNil(o.Orders) {
		return nil, false
	}
	return o.Orders, true
}

// HasOrders returns a boolean if a field has been set.
func (o *Constraints) HasOrders() bool {
	if o != nil && !IsNil(o.Orders) {
		return true
	}

	return false
}

// SetOrders gets a reference to the given OrderConstraints and assigns it to the Orders field.
func (o *Constraints) SetOrders(v OrderConstraints) {
	o.Orders = &v
}

// GetTasks returns the Tasks field value if set, zero value otherwise.
func (o *Constraints) GetTasks() TaskConstraints {
	if o == nil || IsNil(o.Tasks) {
		var ret TaskConstraints
		return ret
	}
	return *o.Tasks
}

// GetTasksOk returns a tuple with the Tasks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Constraints) GetTasksOk() (*TaskConstraints, bool) {
	if o == nil || IsNil(o.Tasks) {
		return nil, false
	}
	return o.Tasks, true
}

// HasTasks returns a boolean if a field has been set.
func (o *Constraints) HasTasks() bool {
	if o != nil && !IsNil(o.Tasks) {
		return true
	}

	return false
}

// SetTasks gets a reference to the given TaskConstraints and assigns it to the Tasks field.
func (o *Constraints) SetTasks(v TaskConstraints) {
	o.Tasks = &v
}

func (o Constraints) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Constraints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Combinations) {
		toSerialize["combinations"] = o.Combinations
	}
	if !IsNil(o.Orders) {
		toSerialize["orders"] = o.Orders
	}
	if !IsNil(o.Tasks) {
		toSerialize["tasks"] = o.Tasks
	}
	return toSerialize, nil
}

type NullableConstraints struct {
	value *Constraints
	isSet bool
}

func (v NullableConstraints) Get() *Constraints {
	return v.value
}

func (v *NullableConstraints) Set(val *Constraints) {
	v.value = val
	v.isSet = true
}

func (v NullableConstraints) IsSet() bool {
	return v.isSet
}

func (v *NullableConstraints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableConstraints(val *Constraints) *NullableConstraints {
	return &NullableConstraints{value: val, isSet: true}
}

func (v NullableConstraints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableConstraints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


