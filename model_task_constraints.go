/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.25
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TaskConstraints type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TaskConstraints{}

// TaskConstraints Constraints on the way tasks can be scheduled together on routes.
type TaskConstraints struct {
	// A list of task groups. Tasks belonging to the same task group must be planned on the same route, or consecutively if they are on the same route, depending on the constraint defined in the task group.
	Groups []TaskGroup `json:"groups,omitempty"`
	// A list of sequences that must be respected when scheduling routes. Tasks belonging to a category that occurs earlier in the sequence must be scheduled on the route before a task belonging to a category later in the sequence.
	RespectedSequences []RespectedTaskSequence `json:"respectedSequences,omitempty"`
	// A list of sequences that are forbidden to be scheduled on a route. Tasks belonging to certain categories must not be scheduled before, or immediately before, tasks belonging to another specific category.
	ForbiddenSequences []ForbiddenTaskSequence `json:"forbiddenSequences,omitempty"`
	// A list of constraints that prevent tasks to be loaded or unloaded depending on which other orders are loaded in the vehicle.
	LoadingIncompatibilities []TaskLoadingIncompatibilityConstraint `json:"loadingIncompatibilities,omitempty"`
}

// NewTaskConstraints instantiates a new TaskConstraints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTaskConstraints() *TaskConstraints {
	this := TaskConstraints{}
	return &this
}

// NewTaskConstraintsWithDefaults instantiates a new TaskConstraints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskConstraintsWithDefaults() *TaskConstraints {
	this := TaskConstraints{}
	return &this
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *TaskConstraints) GetGroups() []TaskGroup {
	if o == nil || IsNil(o.Groups) {
		var ret []TaskGroup
		return ret
	}
	return o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskConstraints) GetGroupsOk() ([]TaskGroup, bool) {
	if o == nil || IsNil(o.Groups) {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *TaskConstraints) HasGroups() bool {
	if o != nil && !IsNil(o.Groups) {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []TaskGroup and assigns it to the Groups field.
func (o *TaskConstraints) SetGroups(v []TaskGroup) {
	o.Groups = v
}

// GetRespectedSequences returns the RespectedSequences field value if set, zero value otherwise.
func (o *TaskConstraints) GetRespectedSequences() []RespectedTaskSequence {
	if o == nil || IsNil(o.RespectedSequences) {
		var ret []RespectedTaskSequence
		return ret
	}
	return o.RespectedSequences
}

// GetRespectedSequencesOk returns a tuple with the RespectedSequences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskConstraints) GetRespectedSequencesOk() ([]RespectedTaskSequence, bool) {
	if o == nil || IsNil(o.RespectedSequences) {
		return nil, false
	}
	return o.RespectedSequences, true
}

// HasRespectedSequences returns a boolean if a field has been set.
func (o *TaskConstraints) HasRespectedSequences() bool {
	if o != nil && !IsNil(o.RespectedSequences) {
		return true
	}

	return false
}

// SetRespectedSequences gets a reference to the given []RespectedTaskSequence and assigns it to the RespectedSequences field.
func (o *TaskConstraints) SetRespectedSequences(v []RespectedTaskSequence) {
	o.RespectedSequences = v
}

// GetForbiddenSequences returns the ForbiddenSequences field value if set, zero value otherwise.
func (o *TaskConstraints) GetForbiddenSequences() []ForbiddenTaskSequence {
	if o == nil || IsNil(o.ForbiddenSequences) {
		var ret []ForbiddenTaskSequence
		return ret
	}
	return o.ForbiddenSequences
}

// GetForbiddenSequencesOk returns a tuple with the ForbiddenSequences field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskConstraints) GetForbiddenSequencesOk() ([]ForbiddenTaskSequence, bool) {
	if o == nil || IsNil(o.ForbiddenSequences) {
		return nil, false
	}
	return o.ForbiddenSequences, true
}

// HasForbiddenSequences returns a boolean if a field has been set.
func (o *TaskConstraints) HasForbiddenSequences() bool {
	if o != nil && !IsNil(o.ForbiddenSequences) {
		return true
	}

	return false
}

// SetForbiddenSequences gets a reference to the given []ForbiddenTaskSequence and assigns it to the ForbiddenSequences field.
func (o *TaskConstraints) SetForbiddenSequences(v []ForbiddenTaskSequence) {
	o.ForbiddenSequences = v
}

// GetLoadingIncompatibilities returns the LoadingIncompatibilities field value if set, zero value otherwise.
func (o *TaskConstraints) GetLoadingIncompatibilities() []TaskLoadingIncompatibilityConstraint {
	if o == nil || IsNil(o.LoadingIncompatibilities) {
		var ret []TaskLoadingIncompatibilityConstraint
		return ret
	}
	return o.LoadingIncompatibilities
}

// GetLoadingIncompatibilitiesOk returns a tuple with the LoadingIncompatibilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TaskConstraints) GetLoadingIncompatibilitiesOk() ([]TaskLoadingIncompatibilityConstraint, bool) {
	if o == nil || IsNil(o.LoadingIncompatibilities) {
		return nil, false
	}
	return o.LoadingIncompatibilities, true
}

// HasLoadingIncompatibilities returns a boolean if a field has been set.
func (o *TaskConstraints) HasLoadingIncompatibilities() bool {
	if o != nil && !IsNil(o.LoadingIncompatibilities) {
		return true
	}

	return false
}

// SetLoadingIncompatibilities gets a reference to the given []TaskLoadingIncompatibilityConstraint and assigns it to the LoadingIncompatibilities field.
func (o *TaskConstraints) SetLoadingIncompatibilities(v []TaskLoadingIncompatibilityConstraint) {
	o.LoadingIncompatibilities = v
}

func (o TaskConstraints) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TaskConstraints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Groups) {
		toSerialize["groups"] = o.Groups
	}
	if !IsNil(o.RespectedSequences) {
		toSerialize["respectedSequences"] = o.RespectedSequences
	}
	if !IsNil(o.ForbiddenSequences) {
		toSerialize["forbiddenSequences"] = o.ForbiddenSequences
	}
	if !IsNil(o.LoadingIncompatibilities) {
		toSerialize["loadingIncompatibilities"] = o.LoadingIncompatibilities
	}
	return toSerialize, nil
}

type NullableTaskConstraints struct {
	value *TaskConstraints
	isSet bool
}

func (v NullableTaskConstraints) Get() *TaskConstraints {
	return v.value
}

func (v *NullableTaskConstraints) Set(val *TaskConstraints) {
	v.value = val
	v.isSet = true
}

func (v NullableTaskConstraints) IsSet() bool {
	return v.isSet
}

func (v *NullableTaskConstraints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTaskConstraints(val *TaskConstraints) *NullableTaskConstraints {
	return &NullableTaskConstraints{value: val, isSet: true}
}

func (v NullableTaskConstraints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTaskConstraints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


