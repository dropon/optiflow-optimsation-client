/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.20
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RouteConstraints type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteConstraints{}

// RouteConstraints Describes constraints on the route that may be assigned to the vehicle.
type RouteConstraints struct {
	// Restricts the maximum duration [s] of the route assigned to the vehicle.
	MaximumDuration *int32 `json:"maximumDuration,omitempty"`
	// Restricts the maximum distance [m] travelled on the route assigned to the vehicle.
	MaximumDistance *int32 `json:"maximumDistance,omitempty"`
}

// NewRouteConstraints instantiates a new RouteConstraints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteConstraints() *RouteConstraints {
	this := RouteConstraints{}
	return &this
}

// NewRouteConstraintsWithDefaults instantiates a new RouteConstraints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteConstraintsWithDefaults() *RouteConstraints {
	this := RouteConstraints{}
	return &this
}

// GetMaximumDuration returns the MaximumDuration field value if set, zero value otherwise.
func (o *RouteConstraints) GetMaximumDuration() int32 {
	if o == nil || IsNil(o.MaximumDuration) {
		var ret int32
		return ret
	}
	return *o.MaximumDuration
}

// GetMaximumDurationOk returns a tuple with the MaximumDuration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteConstraints) GetMaximumDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumDuration) {
		return nil, false
	}
	return o.MaximumDuration, true
}

// HasMaximumDuration returns a boolean if a field has been set.
func (o *RouteConstraints) HasMaximumDuration() bool {
	if o != nil && !IsNil(o.MaximumDuration) {
		return true
	}

	return false
}

// SetMaximumDuration gets a reference to the given int32 and assigns it to the MaximumDuration field.
func (o *RouteConstraints) SetMaximumDuration(v int32) {
	o.MaximumDuration = &v
}

// GetMaximumDistance returns the MaximumDistance field value if set, zero value otherwise.
func (o *RouteConstraints) GetMaximumDistance() int32 {
	if o == nil || IsNil(o.MaximumDistance) {
		var ret int32
		return ret
	}
	return *o.MaximumDistance
}

// GetMaximumDistanceOk returns a tuple with the MaximumDistance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteConstraints) GetMaximumDistanceOk() (*int32, bool) {
	if o == nil || IsNil(o.MaximumDistance) {
		return nil, false
	}
	return o.MaximumDistance, true
}

// HasMaximumDistance returns a boolean if a field has been set.
func (o *RouteConstraints) HasMaximumDistance() bool {
	if o != nil && !IsNil(o.MaximumDistance) {
		return true
	}

	return false
}

// SetMaximumDistance gets a reference to the given int32 and assigns it to the MaximumDistance field.
func (o *RouteConstraints) SetMaximumDistance(v int32) {
	o.MaximumDistance = &v
}

func (o RouteConstraints) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteConstraints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MaximumDuration) {
		toSerialize["maximumDuration"] = o.MaximumDuration
	}
	if !IsNil(o.MaximumDistance) {
		toSerialize["maximumDistance"] = o.MaximumDistance
	}
	return toSerialize, nil
}

type NullableRouteConstraints struct {
	value *RouteConstraints
	isSet bool
}

func (v NullableRouteConstraints) Get() *RouteConstraints {
	return v.value
}

func (v *NullableRouteConstraints) Set(val *RouteConstraints) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteConstraints) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteConstraints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteConstraints(val *RouteConstraints) *NullableRouteConstraints {
	return &NullableRouteConstraints{value: val, isSet: true}
}

func (v NullableRouteConstraints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteConstraints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


