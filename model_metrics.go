/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.27
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Metrics type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Metrics{}

// Metrics Metrics providing insights into the result of the optimization.
type Metrics struct {
	// The number of orders that are not planned by the optimization.
	NumberOfUnscheduledOrders int32 `json:"numberOfUnscheduledOrders"`
	// The number of routes that where scheduled by the optimization.
	NumberOfRoutes int32 `json:"numberOfRoutes"`
	// The total cost of the scheduled routes. This includes the cost of the routes and the outsourcing cost of the unplanned orders.
	TotalCost float64 `json:"totalCost"`
	// The sum of the distances [m] of the scheduled routes.
	TotalDistance int64 `json:"totalDistance"`
	// The sum of the durations [s] of the scheduled routes.
	TotalDuration int64 `json:"totalDuration"`
}

type _Metrics Metrics

// NewMetrics instantiates a new Metrics object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetrics(numberOfUnscheduledOrders int32, numberOfRoutes int32, totalCost float64, totalDistance int64, totalDuration int64) *Metrics {
	this := Metrics{}
	this.NumberOfUnscheduledOrders = numberOfUnscheduledOrders
	this.NumberOfRoutes = numberOfRoutes
	this.TotalCost = totalCost
	this.TotalDistance = totalDistance
	this.TotalDuration = totalDuration
	return &this
}

// NewMetricsWithDefaults instantiates a new Metrics object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetricsWithDefaults() *Metrics {
	this := Metrics{}
	return &this
}

// GetNumberOfUnscheduledOrders returns the NumberOfUnscheduledOrders field value
func (o *Metrics) GetNumberOfUnscheduledOrders() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfUnscheduledOrders
}

// GetNumberOfUnscheduledOrdersOk returns a tuple with the NumberOfUnscheduledOrders field value
// and a boolean to check if the value has been set.
func (o *Metrics) GetNumberOfUnscheduledOrdersOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfUnscheduledOrders, true
}

// SetNumberOfUnscheduledOrders sets field value
func (o *Metrics) SetNumberOfUnscheduledOrders(v int32) {
	o.NumberOfUnscheduledOrders = v
}

// GetNumberOfRoutes returns the NumberOfRoutes field value
func (o *Metrics) GetNumberOfRoutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfRoutes
}

// GetNumberOfRoutesOk returns a tuple with the NumberOfRoutes field value
// and a boolean to check if the value has been set.
func (o *Metrics) GetNumberOfRoutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfRoutes, true
}

// SetNumberOfRoutes sets field value
func (o *Metrics) SetNumberOfRoutes(v int32) {
	o.NumberOfRoutes = v
}

// GetTotalCost returns the TotalCost field value
func (o *Metrics) GetTotalCost() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.TotalCost
}

// GetTotalCostOk returns a tuple with the TotalCost field value
// and a boolean to check if the value has been set.
func (o *Metrics) GetTotalCostOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalCost, true
}

// SetTotalCost sets field value
func (o *Metrics) SetTotalCost(v float64) {
	o.TotalCost = v
}

// GetTotalDistance returns the TotalDistance field value
func (o *Metrics) GetTotalDistance() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalDistance
}

// GetTotalDistanceOk returns a tuple with the TotalDistance field value
// and a boolean to check if the value has been set.
func (o *Metrics) GetTotalDistanceOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalDistance, true
}

// SetTotalDistance sets field value
func (o *Metrics) SetTotalDistance(v int64) {
	o.TotalDistance = v
}

// GetTotalDuration returns the TotalDuration field value
func (o *Metrics) GetTotalDuration() int64 {
	if o == nil {
		var ret int64
		return ret
	}

	return o.TotalDuration
}

// GetTotalDurationOk returns a tuple with the TotalDuration field value
// and a boolean to check if the value has been set.
func (o *Metrics) GetTotalDurationOk() (*int64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.TotalDuration, true
}

// SetTotalDuration sets field value
func (o *Metrics) SetTotalDuration(v int64) {
	o.TotalDuration = v
}

func (o Metrics) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Metrics) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["numberOfUnscheduledOrders"] = o.NumberOfUnscheduledOrders
	toSerialize["numberOfRoutes"] = o.NumberOfRoutes
	toSerialize["totalCost"] = o.TotalCost
	toSerialize["totalDistance"] = o.TotalDistance
	toSerialize["totalDuration"] = o.TotalDuration
	return toSerialize, nil
}

func (o *Metrics) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"numberOfUnscheduledOrders",
		"numberOfRoutes",
		"totalCost",
		"totalDistance",
		"totalDuration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetrics := _Metrics{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetrics)

	if err != nil {
		return err
	}

	*o = Metrics(varMetrics)

	return err
}

type NullableMetrics struct {
	value *Metrics
	isSet bool
}

func (v NullableMetrics) Get() *Metrics {
	return v.value
}

func (v *NullableMetrics) Set(val *Metrics) {
	v.value = val
	v.isSet = true
}

func (v NullableMetrics) IsSet() bool {
	return v.isSet
}

func (v *NullableMetrics) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetrics(val *Metrics) *NullableMetrics {
	return &NullableMetrics{value: val, isSet: true}
}

func (v NullableMetrics) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetrics) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


