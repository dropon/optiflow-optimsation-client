/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Location type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Location{}

// Location A specific location where goods have to be picked up or delivered, or where vehicles are located. A location is either a depot location or a customer location. Depot locations act as trip delimiters.  See [here](./concepts/locations-transports-and-stops) for more information.
type Location struct {
	// A unique ID for this location. This ID can be used to reference the location from other elements, for example from transports or vehicles. The ID does not influence the result.
	Id string `json:"id" validate:"regexp=.*[^ ].*"`
	Type *LocationType `json:"type,omitempty"`
	// The latitude value of the location in degrees (WGS84/EPSG:4326) from south to north.
	Latitude float64 `json:"latitude"`
	// The longitude value of the location in degrees (WGS84/EPSG:4326) from west to east.
	Longitude float64 `json:"longitude"`
	RoadAccess *RoadAccess `json:"roadAccess,omitempty"`
	// Include the air-line connection between given and matched coordinates in the relation distance and travel time. Will be ignored when **roadAccess** is specified. We will refer to this type of location as an _off-road location_.
	IncludeLastMeters *bool `json:"includeLastMeters,omitempty"`
	// Specifies that this waypoint will be reached at the side of street on which it is located. This is useful to prevent the driver from crossing the street to actually reach the location. Is disabled if an OSM profile is used.
	MatchSideOfStreet *bool `json:"matchSideOfStreet,omitempty"`
	// Indicates if vehicle-dependent service time factors are relevant for this location. The factors are typically relevant when the vehicles are (un)loaded by the drivers and may be irrelevant when the vehicles are (un)loaded by the location's staff. If this parameter is set to false, no vehicle-dependent service time factors are taken into account for this location when processing transports.
	ApplyVehicleDependentServiceTimeFactor *bool `json:"applyVehicleDependentServiceTimeFactor,omitempty"`
	// The opening intervals at this location, each specified by two points in time - the beginning and the end of the interval. Leaving this parameter empty means that the location is always open. Service (pickup or delivery) can only start within one of the opening intervals. If a planning horizon is defined for the request, all opening intervals outside of this horizon are not considered during the route optimization process. If no planning horizon is defined, it is required that the opening intervals of all locations do not span a horizon longer than two weeks.
	OpeningIntervals []TimeInterval `json:"openingIntervals,omitempty"`
	DepotLocationAttributes *DepotLocationAttributes `json:"depotLocationAttributes,omitempty"`
	CustomerLocationAttributes *CustomerLocationAttributes `json:"customerLocationAttributes,omitempty"`
}

type _Location Location

// NewLocation instantiates a new Location object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocation(id string, latitude float64, longitude float64) *Location {
	this := Location{}
	this.Id = id
	var type_ LocationType = CUSTOMER
	this.Type = &type_
	this.Latitude = latitude
	this.Longitude = longitude
	var includeLastMeters bool = true
	this.IncludeLastMeters = &includeLastMeters
	var matchSideOfStreet bool = false
	this.MatchSideOfStreet = &matchSideOfStreet
	var applyVehicleDependentServiceTimeFactor bool = true
	this.ApplyVehicleDependentServiceTimeFactor = &applyVehicleDependentServiceTimeFactor
	return &this
}

// NewLocationWithDefaults instantiates a new Location object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationWithDefaults() *Location {
	this := Location{}
	var type_ LocationType = CUSTOMER
	this.Type = &type_
	var includeLastMeters bool = true
	this.IncludeLastMeters = &includeLastMeters
	var matchSideOfStreet bool = false
	this.MatchSideOfStreet = &matchSideOfStreet
	var applyVehicleDependentServiceTimeFactor bool = true
	this.ApplyVehicleDependentServiceTimeFactor = &applyVehicleDependentServiceTimeFactor
	return &this
}

// GetId returns the Id field value
func (o *Location) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Location) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Location) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Location) GetType() LocationType {
	if o == nil || IsNil(o.Type) {
		var ret LocationType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetTypeOk() (*LocationType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Location) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given LocationType and assigns it to the Type field.
func (o *Location) SetType(v LocationType) {
	o.Type = &v
}

// GetLatitude returns the Latitude field value
func (o *Location) GetLatitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *Location) GetLatitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *Location) SetLatitude(v float64) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *Location) GetLongitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *Location) GetLongitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *Location) SetLongitude(v float64) {
	o.Longitude = v
}

// GetRoadAccess returns the RoadAccess field value if set, zero value otherwise.
func (o *Location) GetRoadAccess() RoadAccess {
	if o == nil || IsNil(o.RoadAccess) {
		var ret RoadAccess
		return ret
	}
	return *o.RoadAccess
}

// GetRoadAccessOk returns a tuple with the RoadAccess field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetRoadAccessOk() (*RoadAccess, bool) {
	if o == nil || IsNil(o.RoadAccess) {
		return nil, false
	}
	return o.RoadAccess, true
}

// HasRoadAccess returns a boolean if a field has been set.
func (o *Location) HasRoadAccess() bool {
	if o != nil && !IsNil(o.RoadAccess) {
		return true
	}

	return false
}

// SetRoadAccess gets a reference to the given RoadAccess and assigns it to the RoadAccess field.
func (o *Location) SetRoadAccess(v RoadAccess) {
	o.RoadAccess = &v
}

// GetIncludeLastMeters returns the IncludeLastMeters field value if set, zero value otherwise.
func (o *Location) GetIncludeLastMeters() bool {
	if o == nil || IsNil(o.IncludeLastMeters) {
		var ret bool
		return ret
	}
	return *o.IncludeLastMeters
}

// GetIncludeLastMetersOk returns a tuple with the IncludeLastMeters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetIncludeLastMetersOk() (*bool, bool) {
	if o == nil || IsNil(o.IncludeLastMeters) {
		return nil, false
	}
	return o.IncludeLastMeters, true
}

// HasIncludeLastMeters returns a boolean if a field has been set.
func (o *Location) HasIncludeLastMeters() bool {
	if o != nil && !IsNil(o.IncludeLastMeters) {
		return true
	}

	return false
}

// SetIncludeLastMeters gets a reference to the given bool and assigns it to the IncludeLastMeters field.
func (o *Location) SetIncludeLastMeters(v bool) {
	o.IncludeLastMeters = &v
}

// GetMatchSideOfStreet returns the MatchSideOfStreet field value if set, zero value otherwise.
func (o *Location) GetMatchSideOfStreet() bool {
	if o == nil || IsNil(o.MatchSideOfStreet) {
		var ret bool
		return ret
	}
	return *o.MatchSideOfStreet
}

// GetMatchSideOfStreetOk returns a tuple with the MatchSideOfStreet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetMatchSideOfStreetOk() (*bool, bool) {
	if o == nil || IsNil(o.MatchSideOfStreet) {
		return nil, false
	}
	return o.MatchSideOfStreet, true
}

// HasMatchSideOfStreet returns a boolean if a field has been set.
func (o *Location) HasMatchSideOfStreet() bool {
	if o != nil && !IsNil(o.MatchSideOfStreet) {
		return true
	}

	return false
}

// SetMatchSideOfStreet gets a reference to the given bool and assigns it to the MatchSideOfStreet field.
func (o *Location) SetMatchSideOfStreet(v bool) {
	o.MatchSideOfStreet = &v
}

// GetApplyVehicleDependentServiceTimeFactor returns the ApplyVehicleDependentServiceTimeFactor field value if set, zero value otherwise.
func (o *Location) GetApplyVehicleDependentServiceTimeFactor() bool {
	if o == nil || IsNil(o.ApplyVehicleDependentServiceTimeFactor) {
		var ret bool
		return ret
	}
	return *o.ApplyVehicleDependentServiceTimeFactor
}

// GetApplyVehicleDependentServiceTimeFactorOk returns a tuple with the ApplyVehicleDependentServiceTimeFactor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetApplyVehicleDependentServiceTimeFactorOk() (*bool, bool) {
	if o == nil || IsNil(o.ApplyVehicleDependentServiceTimeFactor) {
		return nil, false
	}
	return o.ApplyVehicleDependentServiceTimeFactor, true
}

// HasApplyVehicleDependentServiceTimeFactor returns a boolean if a field has been set.
func (o *Location) HasApplyVehicleDependentServiceTimeFactor() bool {
	if o != nil && !IsNil(o.ApplyVehicleDependentServiceTimeFactor) {
		return true
	}

	return false
}

// SetApplyVehicleDependentServiceTimeFactor gets a reference to the given bool and assigns it to the ApplyVehicleDependentServiceTimeFactor field.
func (o *Location) SetApplyVehicleDependentServiceTimeFactor(v bool) {
	o.ApplyVehicleDependentServiceTimeFactor = &v
}

// GetOpeningIntervals returns the OpeningIntervals field value if set, zero value otherwise.
func (o *Location) GetOpeningIntervals() []TimeInterval {
	if o == nil || IsNil(o.OpeningIntervals) {
		var ret []TimeInterval
		return ret
	}
	return o.OpeningIntervals
}

// GetOpeningIntervalsOk returns a tuple with the OpeningIntervals field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetOpeningIntervalsOk() ([]TimeInterval, bool) {
	if o == nil || IsNil(o.OpeningIntervals) {
		return nil, false
	}
	return o.OpeningIntervals, true
}

// HasOpeningIntervals returns a boolean if a field has been set.
func (o *Location) HasOpeningIntervals() bool {
	if o != nil && !IsNil(o.OpeningIntervals) {
		return true
	}

	return false
}

// SetOpeningIntervals gets a reference to the given []TimeInterval and assigns it to the OpeningIntervals field.
func (o *Location) SetOpeningIntervals(v []TimeInterval) {
	o.OpeningIntervals = v
}

// GetDepotLocationAttributes returns the DepotLocationAttributes field value if set, zero value otherwise.
func (o *Location) GetDepotLocationAttributes() DepotLocationAttributes {
	if o == nil || IsNil(o.DepotLocationAttributes) {
		var ret DepotLocationAttributes
		return ret
	}
	return *o.DepotLocationAttributes
}

// GetDepotLocationAttributesOk returns a tuple with the DepotLocationAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetDepotLocationAttributesOk() (*DepotLocationAttributes, bool) {
	if o == nil || IsNil(o.DepotLocationAttributes) {
		return nil, false
	}
	return o.DepotLocationAttributes, true
}

// HasDepotLocationAttributes returns a boolean if a field has been set.
func (o *Location) HasDepotLocationAttributes() bool {
	if o != nil && !IsNil(o.DepotLocationAttributes) {
		return true
	}

	return false
}

// SetDepotLocationAttributes gets a reference to the given DepotLocationAttributes and assigns it to the DepotLocationAttributes field.
func (o *Location) SetDepotLocationAttributes(v DepotLocationAttributes) {
	o.DepotLocationAttributes = &v
}

// GetCustomerLocationAttributes returns the CustomerLocationAttributes field value if set, zero value otherwise.
func (o *Location) GetCustomerLocationAttributes() CustomerLocationAttributes {
	if o == nil || IsNil(o.CustomerLocationAttributes) {
		var ret CustomerLocationAttributes
		return ret
	}
	return *o.CustomerLocationAttributes
}

// GetCustomerLocationAttributesOk returns a tuple with the CustomerLocationAttributes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetCustomerLocationAttributesOk() (*CustomerLocationAttributes, bool) {
	if o == nil || IsNil(o.CustomerLocationAttributes) {
		return nil, false
	}
	return o.CustomerLocationAttributes, true
}

// HasCustomerLocationAttributes returns a boolean if a field has been set.
func (o *Location) HasCustomerLocationAttributes() bool {
	if o != nil && !IsNil(o.CustomerLocationAttributes) {
		return true
	}

	return false
}

// SetCustomerLocationAttributes gets a reference to the given CustomerLocationAttributes and assigns it to the CustomerLocationAttributes field.
func (o *Location) SetCustomerLocationAttributes(v CustomerLocationAttributes) {
	o.CustomerLocationAttributes = &v
}

func (o Location) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Location) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	if !IsNil(o.RoadAccess) {
		toSerialize["roadAccess"] = o.RoadAccess
	}
	if !IsNil(o.IncludeLastMeters) {
		toSerialize["includeLastMeters"] = o.IncludeLastMeters
	}
	if !IsNil(o.MatchSideOfStreet) {
		toSerialize["matchSideOfStreet"] = o.MatchSideOfStreet
	}
	if !IsNil(o.ApplyVehicleDependentServiceTimeFactor) {
		toSerialize["applyVehicleDependentServiceTimeFactor"] = o.ApplyVehicleDependentServiceTimeFactor
	}
	if !IsNil(o.OpeningIntervals) {
		toSerialize["openingIntervals"] = o.OpeningIntervals
	}
	if !IsNil(o.DepotLocationAttributes) {
		toSerialize["depotLocationAttributes"] = o.DepotLocationAttributes
	}
	if !IsNil(o.CustomerLocationAttributes) {
		toSerialize["customerLocationAttributes"] = o.CustomerLocationAttributes
	}
	return toSerialize, nil
}

func (o *Location) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"latitude",
		"longitude",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocation := _Location{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLocation)

	if err != nil {
		return err
	}

	*o = Location(varLocation)

	return err
}

type NullableLocation struct {
	value *Location
	isSet bool
}

func (v NullableLocation) Get() *Location {
	return v.value
}

func (v *NullableLocation) Set(val *Location) {
	v.value = val
	v.isSet = true
}

func (v NullableLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocation(val *Location) *NullableLocation {
	return &NullableLocation{value: val, isSet: true}
}

func (v NullableLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


