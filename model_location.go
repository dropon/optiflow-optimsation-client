/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.21
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Location type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Location{}

// Location A specific location where goods have to be picked up or delivered, or where vehicles are located.
type Location struct {
	// A unique identifier of the location.
	Id string `json:"id" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The latitude value of the location in degrees (WGS84/EPSG:4326) from south to north.
	Latitude float64 `json:"latitude"`
	// The longitude value of the location in degrees (WGS84/EPSG:4326) from west to east.
	Longitude float64 `json:"longitude"`
	// Requires the vehicle to approach from the side of the street where the location is situated. This prevents the driver from needing to cross the street.
	MatchSideOfStreet *bool `json:"matchSideOfStreet,omitempty"`
	StopProperties *StopProperties `json:"stopProperties,omitempty"`
	// A list of categories the location belongs to that can be used to describe constraints or rules.
	Categories []string `json:"categories,omitempty"`
}

type _Location Location

// NewLocation instantiates a new Location object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewLocation(id string, latitude float64, longitude float64) *Location {
	this := Location{}
	this.Id = id
	this.Latitude = latitude
	this.Longitude = longitude
	var matchSideOfStreet bool = false
	this.MatchSideOfStreet = &matchSideOfStreet
	return &this
}

// NewLocationWithDefaults instantiates a new Location object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewLocationWithDefaults() *Location {
	this := Location{}
	var matchSideOfStreet bool = false
	this.MatchSideOfStreet = &matchSideOfStreet
	return &this
}

// GetId returns the Id field value
func (o *Location) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Location) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Location) SetId(v string) {
	o.Id = v
}

// GetLatitude returns the Latitude field value
func (o *Location) GetLatitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Latitude
}

// GetLatitudeOk returns a tuple with the Latitude field value
// and a boolean to check if the value has been set.
func (o *Location) GetLatitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Latitude, true
}

// SetLatitude sets field value
func (o *Location) SetLatitude(v float64) {
	o.Latitude = v
}

// GetLongitude returns the Longitude field value
func (o *Location) GetLongitude() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Longitude
}

// GetLongitudeOk returns a tuple with the Longitude field value
// and a boolean to check if the value has been set.
func (o *Location) GetLongitudeOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Longitude, true
}

// SetLongitude sets field value
func (o *Location) SetLongitude(v float64) {
	o.Longitude = v
}

// GetMatchSideOfStreet returns the MatchSideOfStreet field value if set, zero value otherwise.
func (o *Location) GetMatchSideOfStreet() bool {
	if o == nil || IsNil(o.MatchSideOfStreet) {
		var ret bool
		return ret
	}
	return *o.MatchSideOfStreet
}

// GetMatchSideOfStreetOk returns a tuple with the MatchSideOfStreet field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetMatchSideOfStreetOk() (*bool, bool) {
	if o == nil || IsNil(o.MatchSideOfStreet) {
		return nil, false
	}
	return o.MatchSideOfStreet, true
}

// HasMatchSideOfStreet returns a boolean if a field has been set.
func (o *Location) HasMatchSideOfStreet() bool {
	if o != nil && !IsNil(o.MatchSideOfStreet) {
		return true
	}

	return false
}

// SetMatchSideOfStreet gets a reference to the given bool and assigns it to the MatchSideOfStreet field.
func (o *Location) SetMatchSideOfStreet(v bool) {
	o.MatchSideOfStreet = &v
}

// GetStopProperties returns the StopProperties field value if set, zero value otherwise.
func (o *Location) GetStopProperties() StopProperties {
	if o == nil || IsNil(o.StopProperties) {
		var ret StopProperties
		return ret
	}
	return *o.StopProperties
}

// GetStopPropertiesOk returns a tuple with the StopProperties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetStopPropertiesOk() (*StopProperties, bool) {
	if o == nil || IsNil(o.StopProperties) {
		return nil, false
	}
	return o.StopProperties, true
}

// HasStopProperties returns a boolean if a field has been set.
func (o *Location) HasStopProperties() bool {
	if o != nil && !IsNil(o.StopProperties) {
		return true
	}

	return false
}

// SetStopProperties gets a reference to the given StopProperties and assigns it to the StopProperties field.
func (o *Location) SetStopProperties(v StopProperties) {
	o.StopProperties = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *Location) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Location) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *Location) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *Location) SetCategories(v []string) {
	o.Categories = v
}

func (o Location) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Location) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["latitude"] = o.Latitude
	toSerialize["longitude"] = o.Longitude
	if !IsNil(o.MatchSideOfStreet) {
		toSerialize["matchSideOfStreet"] = o.MatchSideOfStreet
	}
	if !IsNil(o.StopProperties) {
		toSerialize["stopProperties"] = o.StopProperties
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	return toSerialize, nil
}

func (o *Location) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"latitude",
		"longitude",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varLocation := _Location{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varLocation)

	if err != nil {
		return err
	}

	*o = Location(varLocation)

	return err
}

type NullableLocation struct {
	value *Location
	isSet bool
}

func (v NullableLocation) Get() *Location {
	return v.value
}

func (v *NullableLocation) Set(val *Location) {
	v.value = val
	v.isSet = true
}

func (v NullableLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLocation(val *Location) *NullableLocation {
	return &NullableLocation{value: val, isSet: true}
}

func (v NullableLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


