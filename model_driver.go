/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Driver type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Driver{}

// Driver A driver is always assigned to a specific vehicle and may not always be available to operate it. To be precise, a driver can only operate the corresponding vehicle within given time intervals.
type Driver struct {
	// The unique ID of the driver.
	Id string `json:"id" validate:"regexp=.*[^ ].*"`
	// The ID of the driver's vehicle. This vehicle must not be referenced by another driver.
	VehicleId string `json:"vehicleId" validate:"regexp=.*[^ ].*"`
	// Intervals during which the driver is available, each specified by two points in time - the beginning and the end of the interval. Each trip must lie completely within one of the intervals. The route start and trip start events must lie within one of the intervals. The intervals must have a gap of more than 1 second. Leaving this parameter empty means that the driver is always available.
	Availabilities []TimeInterval `json:"availabilities,omitempty"`
	WorkingHoursPreset NullableWorkingHoursPreset `json:"workingHoursPreset,omitempty"`
	BreakRule *BreakRule `json:"breakRule,omitempty"`
	DailyRestRule *DailyRestRule `json:"dailyRestRule,omitempty"`
	WorkLogbook *WorkLogbook `json:"workLogbook,omitempty"`
	// The maximum driving time of the driver [s].   This includes the driving time before the start of the route (see **accumulatedDrivingTimeSinceLastDailyRest** in **workLogbook**). The maximum driving time is considered as infinite if it is not set. Currently, each driver must have the same value specified.
	MaximumDrivingTime NullableInt32 `json:"maximumDrivingTime,omitempty"`
	// The maximum travel time of the driver [s]. The travel time contains all waiting, service and driving times.  This includes the travel time before the start of the route (see **accumulatedTravelTimeSinceLastDailyRest** in **workLogbook**). The maximum travel time is considered as infinite if it is not set. Currently, each driver must have the same value specified.
	MaximumTravelTime NullableInt32 `json:"maximumTravelTime,omitempty"`
}

type _Driver Driver

// NewDriver instantiates a new Driver object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDriver(id string, vehicleId string) *Driver {
	this := Driver{}
	this.Id = id
	this.VehicleId = vehicleId
	return &this
}

// NewDriverWithDefaults instantiates a new Driver object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDriverWithDefaults() *Driver {
	this := Driver{}
	return &this
}

// GetId returns the Id field value
func (o *Driver) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Driver) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Driver) SetId(v string) {
	o.Id = v
}

// GetVehicleId returns the VehicleId field value
func (o *Driver) GetVehicleId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.VehicleId
}

// GetVehicleIdOk returns a tuple with the VehicleId field value
// and a boolean to check if the value has been set.
func (o *Driver) GetVehicleIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.VehicleId, true
}

// SetVehicleId sets field value
func (o *Driver) SetVehicleId(v string) {
	o.VehicleId = v
}

// GetAvailabilities returns the Availabilities field value if set, zero value otherwise.
func (o *Driver) GetAvailabilities() []TimeInterval {
	if o == nil || IsNil(o.Availabilities) {
		var ret []TimeInterval
		return ret
	}
	return o.Availabilities
}

// GetAvailabilitiesOk returns a tuple with the Availabilities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetAvailabilitiesOk() ([]TimeInterval, bool) {
	if o == nil || IsNil(o.Availabilities) {
		return nil, false
	}
	return o.Availabilities, true
}

// HasAvailabilities returns a boolean if a field has been set.
func (o *Driver) HasAvailabilities() bool {
	if o != nil && !IsNil(o.Availabilities) {
		return true
	}

	return false
}

// SetAvailabilities gets a reference to the given []TimeInterval and assigns it to the Availabilities field.
func (o *Driver) SetAvailabilities(v []TimeInterval) {
	o.Availabilities = v
}

// GetWorkingHoursPreset returns the WorkingHoursPreset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Driver) GetWorkingHoursPreset() WorkingHoursPreset {
	if o == nil || IsNil(o.WorkingHoursPreset.Get()) {
		var ret WorkingHoursPreset
		return ret
	}
	return *o.WorkingHoursPreset.Get()
}

// GetWorkingHoursPresetOk returns a tuple with the WorkingHoursPreset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Driver) GetWorkingHoursPresetOk() (*WorkingHoursPreset, bool) {
	if o == nil {
		return nil, false
	}
	return o.WorkingHoursPreset.Get(), o.WorkingHoursPreset.IsSet()
}

// HasWorkingHoursPreset returns a boolean if a field has been set.
func (o *Driver) HasWorkingHoursPreset() bool {
	if o != nil && o.WorkingHoursPreset.IsSet() {
		return true
	}

	return false
}

// SetWorkingHoursPreset gets a reference to the given NullableWorkingHoursPreset and assigns it to the WorkingHoursPreset field.
func (o *Driver) SetWorkingHoursPreset(v WorkingHoursPreset) {
	o.WorkingHoursPreset.Set(&v)
}
// SetWorkingHoursPresetNil sets the value for WorkingHoursPreset to be an explicit nil
func (o *Driver) SetWorkingHoursPresetNil() {
	o.WorkingHoursPreset.Set(nil)
}

// UnsetWorkingHoursPreset ensures that no value is present for WorkingHoursPreset, not even an explicit nil
func (o *Driver) UnsetWorkingHoursPreset() {
	o.WorkingHoursPreset.Unset()
}

// GetBreakRule returns the BreakRule field value if set, zero value otherwise.
func (o *Driver) GetBreakRule() BreakRule {
	if o == nil || IsNil(o.BreakRule) {
		var ret BreakRule
		return ret
	}
	return *o.BreakRule
}

// GetBreakRuleOk returns a tuple with the BreakRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetBreakRuleOk() (*BreakRule, bool) {
	if o == nil || IsNil(o.BreakRule) {
		return nil, false
	}
	return o.BreakRule, true
}

// HasBreakRule returns a boolean if a field has been set.
func (o *Driver) HasBreakRule() bool {
	if o != nil && !IsNil(o.BreakRule) {
		return true
	}

	return false
}

// SetBreakRule gets a reference to the given BreakRule and assigns it to the BreakRule field.
func (o *Driver) SetBreakRule(v BreakRule) {
	o.BreakRule = &v
}

// GetDailyRestRule returns the DailyRestRule field value if set, zero value otherwise.
func (o *Driver) GetDailyRestRule() DailyRestRule {
	if o == nil || IsNil(o.DailyRestRule) {
		var ret DailyRestRule
		return ret
	}
	return *o.DailyRestRule
}

// GetDailyRestRuleOk returns a tuple with the DailyRestRule field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetDailyRestRuleOk() (*DailyRestRule, bool) {
	if o == nil || IsNil(o.DailyRestRule) {
		return nil, false
	}
	return o.DailyRestRule, true
}

// HasDailyRestRule returns a boolean if a field has been set.
func (o *Driver) HasDailyRestRule() bool {
	if o != nil && !IsNil(o.DailyRestRule) {
		return true
	}

	return false
}

// SetDailyRestRule gets a reference to the given DailyRestRule and assigns it to the DailyRestRule field.
func (o *Driver) SetDailyRestRule(v DailyRestRule) {
	o.DailyRestRule = &v
}

// GetWorkLogbook returns the WorkLogbook field value if set, zero value otherwise.
func (o *Driver) GetWorkLogbook() WorkLogbook {
	if o == nil || IsNil(o.WorkLogbook) {
		var ret WorkLogbook
		return ret
	}
	return *o.WorkLogbook
}

// GetWorkLogbookOk returns a tuple with the WorkLogbook field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Driver) GetWorkLogbookOk() (*WorkLogbook, bool) {
	if o == nil || IsNil(o.WorkLogbook) {
		return nil, false
	}
	return o.WorkLogbook, true
}

// HasWorkLogbook returns a boolean if a field has been set.
func (o *Driver) HasWorkLogbook() bool {
	if o != nil && !IsNil(o.WorkLogbook) {
		return true
	}

	return false
}

// SetWorkLogbook gets a reference to the given WorkLogbook and assigns it to the WorkLogbook field.
func (o *Driver) SetWorkLogbook(v WorkLogbook) {
	o.WorkLogbook = &v
}

// GetMaximumDrivingTime returns the MaximumDrivingTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Driver) GetMaximumDrivingTime() int32 {
	if o == nil || IsNil(o.MaximumDrivingTime.Get()) {
		var ret int32
		return ret
	}
	return *o.MaximumDrivingTime.Get()
}

// GetMaximumDrivingTimeOk returns a tuple with the MaximumDrivingTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Driver) GetMaximumDrivingTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaximumDrivingTime.Get(), o.MaximumDrivingTime.IsSet()
}

// HasMaximumDrivingTime returns a boolean if a field has been set.
func (o *Driver) HasMaximumDrivingTime() bool {
	if o != nil && o.MaximumDrivingTime.IsSet() {
		return true
	}

	return false
}

// SetMaximumDrivingTime gets a reference to the given NullableInt32 and assigns it to the MaximumDrivingTime field.
func (o *Driver) SetMaximumDrivingTime(v int32) {
	o.MaximumDrivingTime.Set(&v)
}
// SetMaximumDrivingTimeNil sets the value for MaximumDrivingTime to be an explicit nil
func (o *Driver) SetMaximumDrivingTimeNil() {
	o.MaximumDrivingTime.Set(nil)
}

// UnsetMaximumDrivingTime ensures that no value is present for MaximumDrivingTime, not even an explicit nil
func (o *Driver) UnsetMaximumDrivingTime() {
	o.MaximumDrivingTime.Unset()
}

// GetMaximumTravelTime returns the MaximumTravelTime field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Driver) GetMaximumTravelTime() int32 {
	if o == nil || IsNil(o.MaximumTravelTime.Get()) {
		var ret int32
		return ret
	}
	return *o.MaximumTravelTime.Get()
}

// GetMaximumTravelTimeOk returns a tuple with the MaximumTravelTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Driver) GetMaximumTravelTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaximumTravelTime.Get(), o.MaximumTravelTime.IsSet()
}

// HasMaximumTravelTime returns a boolean if a field has been set.
func (o *Driver) HasMaximumTravelTime() bool {
	if o != nil && o.MaximumTravelTime.IsSet() {
		return true
	}

	return false
}

// SetMaximumTravelTime gets a reference to the given NullableInt32 and assigns it to the MaximumTravelTime field.
func (o *Driver) SetMaximumTravelTime(v int32) {
	o.MaximumTravelTime.Set(&v)
}
// SetMaximumTravelTimeNil sets the value for MaximumTravelTime to be an explicit nil
func (o *Driver) SetMaximumTravelTimeNil() {
	o.MaximumTravelTime.Set(nil)
}

// UnsetMaximumTravelTime ensures that no value is present for MaximumTravelTime, not even an explicit nil
func (o *Driver) UnsetMaximumTravelTime() {
	o.MaximumTravelTime.Unset()
}

func (o Driver) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Driver) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["vehicleId"] = o.VehicleId
	if !IsNil(o.Availabilities) {
		toSerialize["availabilities"] = o.Availabilities
	}
	if o.WorkingHoursPreset.IsSet() {
		toSerialize["workingHoursPreset"] = o.WorkingHoursPreset.Get()
	}
	if !IsNil(o.BreakRule) {
		toSerialize["breakRule"] = o.BreakRule
	}
	if !IsNil(o.DailyRestRule) {
		toSerialize["dailyRestRule"] = o.DailyRestRule
	}
	if !IsNil(o.WorkLogbook) {
		toSerialize["workLogbook"] = o.WorkLogbook
	}
	if o.MaximumDrivingTime.IsSet() {
		toSerialize["maximumDrivingTime"] = o.MaximumDrivingTime.Get()
	}
	if o.MaximumTravelTime.IsSet() {
		toSerialize["maximumTravelTime"] = o.MaximumTravelTime.Get()
	}
	return toSerialize, nil
}

func (o *Driver) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"vehicleId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varDriver := _Driver{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varDriver)

	if err != nil {
		return err
	}

	*o = Driver(varDriver)

	return err
}

type NullableDriver struct {
	value *Driver
	isSet bool
}

func (v NullableDriver) Get() *Driver {
	return v.value
}

func (v *NullableDriver) Set(val *Driver) {
	v.value = val
	v.isSet = true
}

func (v NullableDriver) IsSet() bool {
	return v.isSet
}

func (v *NullableDriver) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDriver(val *Driver) *NullableDriver {
	return &NullableDriver{value: val, isSet: true}
}

func (v NullableDriver) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDriver) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


