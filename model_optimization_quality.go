/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"fmt"
)

// OptimizationQuality the model 'OptimizationQuality'
type OptimizationQuality string

// List of OptimizationQuality
const (
	STANDARD OptimizationQuality = "STANDARD"
	HIGH OptimizationQuality = "HIGH"
)

// All allowed values of OptimizationQuality enum
var AllowedOptimizationQualityEnumValues = []OptimizationQuality{
	"STANDARD",
	"HIGH",
}

func (v *OptimizationQuality) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OptimizationQuality(value)
	for _, existing := range AllowedOptimizationQualityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OptimizationQuality", value)
}

// NewOptimizationQualityFromValue returns a pointer to a valid OptimizationQuality
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOptimizationQualityFromValue(v string) (*OptimizationQuality, error) {
	ev := OptimizationQuality(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OptimizationQuality: valid values are %v", v, AllowedOptimizationQualityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OptimizationQuality) IsValid() bool {
	for _, existing := range AllowedOptimizationQualityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OptimizationQuality value
func (v OptimizationQuality) Ptr() *OptimizationQuality {
	return &v
}

type NullableOptimizationQuality struct {
	value *OptimizationQuality
	isSet bool
}

func (v NullableOptimizationQuality) Get() *OptimizationQuality {
	return v.value
}

func (v *NullableOptimizationQuality) Set(val *OptimizationQuality) {
	v.value = val
	v.isSet = true
}

func (v NullableOptimizationQuality) IsSet() bool {
	return v.isSet
}

func (v *NullableOptimizationQuality) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptimizationQuality(val *OptimizationQuality) *NullableOptimizationQuality {
	return &NullableOptimizationQuality{value: val, isSet: true}
}

func (v NullableOptimizationQuality) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptimizationQuality) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

