/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"fmt"
)

// WorkingHoursPreset Specifies break and daily rest rule as well as maximum driving and travel time according to the chosen law.  If one of the concerned fields is specified as well the most restrictive rule holds. For example if a preset and maximumDrivingTime or maximumTravelTime are specified, the minimum of the specified value and the value defined by the preset counts. Currently, each driver must have the same value specified.  See [here](./concepts/drivers-working-hours-break-and-rest-rules) for more information.
type WorkingHoursPreset string

// List of WorkingHoursPreset
const (
	EU_DRIVING_TIME_REGULATION_FOR_SINGLE_DAY WorkingHoursPreset = "EU_DRIVING_TIME_REGULATION_FOR_SINGLE_DAY"
	EU_DRIVING_TIME_REGULATION_FOR_LONG_SINGLE_DAY WorkingHoursPreset = "EU_DRIVING_TIME_REGULATION_FOR_LONG_SINGLE_DAY"
	EU_WORKING_TIME_DIRECTIVE_FOR_SINGLE_DAY WorkingHoursPreset = "EU_WORKING_TIME_DIRECTIVE_FOR_SINGLE_DAY"
	EU_WORKING_TIME_DIRECTIVE_FOR_LONG_SINGLE_DAY WorkingHoursPreset = "EU_WORKING_TIME_DIRECTIVE_FOR_LONG_SINGLE_DAY"
	EU_DRIVING_TIME_REGULATION_FOR_MULTIPLE_DAYS WorkingHoursPreset = "EU_DRIVING_TIME_REGULATION_FOR_MULTIPLE_DAYS"
	EU_DRIVING_TIME_REGULATION_FOR_MULTIPLE_SINGLE_DAYS WorkingHoursPreset = "EU_DRIVING_TIME_REGULATION_FOR_MULTIPLE_SINGLE_DAYS"
	EU_DRIVING_TIME_REGULATION_FOR_TEAM_AND_MULTIPLE_DAYS WorkingHoursPreset = "EU_DRIVING_TIME_REGULATION_FOR_TEAM_AND_MULTIPLE_DAYS"
	US_HOURS_OF_SERVICE_REGULATIONS_FOR_SINGLE_DAY WorkingHoursPreset = "US_HOURS_OF_SERVICE_REGULATIONS_FOR_SINGLE_DAY"
	US_HOURS_OF_SERVICE_REGULATIONS_FOR_SHORT_HAUL_AND_SINGLE_DAY WorkingHoursPreset = "US_HOURS_OF_SERVICE_REGULATIONS_FOR_SHORT_HAUL_AND_SINGLE_DAY"
	US_HOURS_OF_SERVICE_REGULATIONS_FOR_MULTIPLE_DAYS WorkingHoursPreset = "US_HOURS_OF_SERVICE_REGULATIONS_FOR_MULTIPLE_DAYS"
	US_HOURS_OF_SERVICE_REGULATIONS_FOR_MULTIPLE_SINGLE_DAYS WorkingHoursPreset = "US_HOURS_OF_SERVICE_REGULATIONS_FOR_MULTIPLE_SINGLE_DAYS"
	US_HOURS_OF_SERVICE_REGULATIONS_FOR_SHORT_HAUL_AND_MULTIPLE_SINGLE_DAYS WorkingHoursPreset = "US_HOURS_OF_SERVICE_REGULATIONS_FOR_SHORT_HAUL_AND_MULTIPLE_SINGLE_DAYS"
)

// All allowed values of WorkingHoursPreset enum
var AllowedWorkingHoursPresetEnumValues = []WorkingHoursPreset{
	"EU_DRIVING_TIME_REGULATION_FOR_SINGLE_DAY",
	"EU_DRIVING_TIME_REGULATION_FOR_LONG_SINGLE_DAY",
	"EU_WORKING_TIME_DIRECTIVE_FOR_SINGLE_DAY",
	"EU_WORKING_TIME_DIRECTIVE_FOR_LONG_SINGLE_DAY",
	"EU_DRIVING_TIME_REGULATION_FOR_MULTIPLE_DAYS",
	"EU_DRIVING_TIME_REGULATION_FOR_MULTIPLE_SINGLE_DAYS",
	"EU_DRIVING_TIME_REGULATION_FOR_TEAM_AND_MULTIPLE_DAYS",
	"US_HOURS_OF_SERVICE_REGULATIONS_FOR_SINGLE_DAY",
	"US_HOURS_OF_SERVICE_REGULATIONS_FOR_SHORT_HAUL_AND_SINGLE_DAY",
	"US_HOURS_OF_SERVICE_REGULATIONS_FOR_MULTIPLE_DAYS",
	"US_HOURS_OF_SERVICE_REGULATIONS_FOR_MULTIPLE_SINGLE_DAYS",
	"US_HOURS_OF_SERVICE_REGULATIONS_FOR_SHORT_HAUL_AND_MULTIPLE_SINGLE_DAYS",
}

func (v *WorkingHoursPreset) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := WorkingHoursPreset(value)
	for _, existing := range AllowedWorkingHoursPresetEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid WorkingHoursPreset", value)
}

// NewWorkingHoursPresetFromValue returns a pointer to a valid WorkingHoursPreset
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewWorkingHoursPresetFromValue(v string) (*WorkingHoursPreset, error) {
	ev := WorkingHoursPreset(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for WorkingHoursPreset: valid values are %v", v, AllowedWorkingHoursPresetEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v WorkingHoursPreset) IsValid() bool {
	for _, existing := range AllowedWorkingHoursPresetEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to WorkingHoursPreset value
func (v WorkingHoursPreset) Ptr() *WorkingHoursPreset {
	return &v
}

type NullableWorkingHoursPreset struct {
	value *WorkingHoursPreset
	isSet bool
}

func (v NullableWorkingHoursPreset) Get() *WorkingHoursPreset {
	return v.value
}

func (v *NullableWorkingHoursPreset) Set(val *WorkingHoursPreset) {
	v.value = val
	v.isSet = true
}

func (v NullableWorkingHoursPreset) IsSet() bool {
	return v.isSet
}

func (v *NullableWorkingHoursPreset) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWorkingHoursPreset(val *WorkingHoursPreset) *NullableWorkingHoursPreset {
	return &NullableWorkingHoursPreset{value: val, isSet: true}
}

func (v NullableWorkingHoursPreset) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWorkingHoursPreset) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

