/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BreakRule type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BreakRule{}

// BreakRule Defines when a break becomes necessary and how long it should be. Currently, each driver must have the same values specified.  See [here](./concepts/drivers-working-hours-break-and-rest-rules) for more information.
type BreakRule struct {
	// The minimum duration of a break [s]. Minimum is 15 minutes, maximum is 1 hour 30 minutes.
	BreakTime int32 `json:"breakTime"`
	// Maximum duration that the driver is allowed to drive [s] before taking a break. The maximum driving time is considered as infinite if it is not set.
	MaximumDrivingTimeBetweenBreaks NullableInt32 `json:"maximumDrivingTimeBetweenBreaks,omitempty"`
	// Maximum duration that the driver is allowed to work [s] before taking a break. The maximum working time is considered as infinite if it is not set.
	MaximumWorkingTimeBetweenBreaks NullableInt32 `json:"maximumWorkingTimeBetweenBreaks,omitempty"`
	// Idle time of the driver counts as working time if it is shorter than this value [s]. May not be higher than **breakTime**.
	WorkingTimeThreshold *int32 `json:"workingTimeThreshold,omitempty"`
}

type _BreakRule BreakRule

// NewBreakRule instantiates a new BreakRule object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBreakRule(breakTime int32) *BreakRule {
	this := BreakRule{}
	this.BreakTime = breakTime
	var workingTimeThreshold int32 = 0
	this.WorkingTimeThreshold = &workingTimeThreshold
	return &this
}

// NewBreakRuleWithDefaults instantiates a new BreakRule object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBreakRuleWithDefaults() *BreakRule {
	this := BreakRule{}
	var workingTimeThreshold int32 = 0
	this.WorkingTimeThreshold = &workingTimeThreshold
	return &this
}

// GetBreakTime returns the BreakTime field value
func (o *BreakRule) GetBreakTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BreakTime
}

// GetBreakTimeOk returns a tuple with the BreakTime field value
// and a boolean to check if the value has been set.
func (o *BreakRule) GetBreakTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BreakTime, true
}

// SetBreakTime sets field value
func (o *BreakRule) SetBreakTime(v int32) {
	o.BreakTime = v
}

// GetMaximumDrivingTimeBetweenBreaks returns the MaximumDrivingTimeBetweenBreaks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BreakRule) GetMaximumDrivingTimeBetweenBreaks() int32 {
	if o == nil || IsNil(o.MaximumDrivingTimeBetweenBreaks.Get()) {
		var ret int32
		return ret
	}
	return *o.MaximumDrivingTimeBetweenBreaks.Get()
}

// GetMaximumDrivingTimeBetweenBreaksOk returns a tuple with the MaximumDrivingTimeBetweenBreaks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BreakRule) GetMaximumDrivingTimeBetweenBreaksOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaximumDrivingTimeBetweenBreaks.Get(), o.MaximumDrivingTimeBetweenBreaks.IsSet()
}

// HasMaximumDrivingTimeBetweenBreaks returns a boolean if a field has been set.
func (o *BreakRule) HasMaximumDrivingTimeBetweenBreaks() bool {
	if o != nil && o.MaximumDrivingTimeBetweenBreaks.IsSet() {
		return true
	}

	return false
}

// SetMaximumDrivingTimeBetweenBreaks gets a reference to the given NullableInt32 and assigns it to the MaximumDrivingTimeBetweenBreaks field.
func (o *BreakRule) SetMaximumDrivingTimeBetweenBreaks(v int32) {
	o.MaximumDrivingTimeBetweenBreaks.Set(&v)
}
// SetMaximumDrivingTimeBetweenBreaksNil sets the value for MaximumDrivingTimeBetweenBreaks to be an explicit nil
func (o *BreakRule) SetMaximumDrivingTimeBetweenBreaksNil() {
	o.MaximumDrivingTimeBetweenBreaks.Set(nil)
}

// UnsetMaximumDrivingTimeBetweenBreaks ensures that no value is present for MaximumDrivingTimeBetweenBreaks, not even an explicit nil
func (o *BreakRule) UnsetMaximumDrivingTimeBetweenBreaks() {
	o.MaximumDrivingTimeBetweenBreaks.Unset()
}

// GetMaximumWorkingTimeBetweenBreaks returns the MaximumWorkingTimeBetweenBreaks field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *BreakRule) GetMaximumWorkingTimeBetweenBreaks() int32 {
	if o == nil || IsNil(o.MaximumWorkingTimeBetweenBreaks.Get()) {
		var ret int32
		return ret
	}
	return *o.MaximumWorkingTimeBetweenBreaks.Get()
}

// GetMaximumWorkingTimeBetweenBreaksOk returns a tuple with the MaximumWorkingTimeBetweenBreaks field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *BreakRule) GetMaximumWorkingTimeBetweenBreaksOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.MaximumWorkingTimeBetweenBreaks.Get(), o.MaximumWorkingTimeBetweenBreaks.IsSet()
}

// HasMaximumWorkingTimeBetweenBreaks returns a boolean if a field has been set.
func (o *BreakRule) HasMaximumWorkingTimeBetweenBreaks() bool {
	if o != nil && o.MaximumWorkingTimeBetweenBreaks.IsSet() {
		return true
	}

	return false
}

// SetMaximumWorkingTimeBetweenBreaks gets a reference to the given NullableInt32 and assigns it to the MaximumWorkingTimeBetweenBreaks field.
func (o *BreakRule) SetMaximumWorkingTimeBetweenBreaks(v int32) {
	o.MaximumWorkingTimeBetweenBreaks.Set(&v)
}
// SetMaximumWorkingTimeBetweenBreaksNil sets the value for MaximumWorkingTimeBetweenBreaks to be an explicit nil
func (o *BreakRule) SetMaximumWorkingTimeBetweenBreaksNil() {
	o.MaximumWorkingTimeBetweenBreaks.Set(nil)
}

// UnsetMaximumWorkingTimeBetweenBreaks ensures that no value is present for MaximumWorkingTimeBetweenBreaks, not even an explicit nil
func (o *BreakRule) UnsetMaximumWorkingTimeBetweenBreaks() {
	o.MaximumWorkingTimeBetweenBreaks.Unset()
}

// GetWorkingTimeThreshold returns the WorkingTimeThreshold field value if set, zero value otherwise.
func (o *BreakRule) GetWorkingTimeThreshold() int32 {
	if o == nil || IsNil(o.WorkingTimeThreshold) {
		var ret int32
		return ret
	}
	return *o.WorkingTimeThreshold
}

// GetWorkingTimeThresholdOk returns a tuple with the WorkingTimeThreshold field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *BreakRule) GetWorkingTimeThresholdOk() (*int32, bool) {
	if o == nil || IsNil(o.WorkingTimeThreshold) {
		return nil, false
	}
	return o.WorkingTimeThreshold, true
}

// HasWorkingTimeThreshold returns a boolean if a field has been set.
func (o *BreakRule) HasWorkingTimeThreshold() bool {
	if o != nil && !IsNil(o.WorkingTimeThreshold) {
		return true
	}

	return false
}

// SetWorkingTimeThreshold gets a reference to the given int32 and assigns it to the WorkingTimeThreshold field.
func (o *BreakRule) SetWorkingTimeThreshold(v int32) {
	o.WorkingTimeThreshold = &v
}

func (o BreakRule) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BreakRule) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["breakTime"] = o.BreakTime
	if o.MaximumDrivingTimeBetweenBreaks.IsSet() {
		toSerialize["maximumDrivingTimeBetweenBreaks"] = o.MaximumDrivingTimeBetweenBreaks.Get()
	}
	if o.MaximumWorkingTimeBetweenBreaks.IsSet() {
		toSerialize["maximumWorkingTimeBetweenBreaks"] = o.MaximumWorkingTimeBetweenBreaks.Get()
	}
	if !IsNil(o.WorkingTimeThreshold) {
		toSerialize["workingTimeThreshold"] = o.WorkingTimeThreshold
	}
	return toSerialize, nil
}

func (o *BreakRule) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"breakTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBreakRule := _BreakRule{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBreakRule)

	if err != nil {
		return err
	}

	*o = BreakRule(varBreakRule)

	return err
}

type NullableBreakRule struct {
	value *BreakRule
	isSet bool
}

func (v NullableBreakRule) Get() *BreakRule {
	return v.value
}

func (v *NullableBreakRule) Set(val *BreakRule) {
	v.value = val
	v.isSet = true
}

func (v NullableBreakRule) IsSet() bool {
	return v.isSet
}

func (v *NullableBreakRule) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBreakRule(val *BreakRule) *NullableBreakRule {
	return &NullableBreakRule{value: val, isSet: true}
}

func (v NullableBreakRule) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBreakRule) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


