/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.20
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the RouteEnd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RouteEnd{}

// RouteEnd Describes the end of a route.
type RouteEnd struct {
	// The unique identifier of the location where the route ends.
	LocationId *string `json:"locationId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	Approach *Leg `json:"approach,omitempty"`
	// The point in time when the vehicle arrives at its end location. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	Arrival *time.Time `json:"arrival,omitempty"`
	// The duration [s] between the arrival at the end location and the end of the route.
	Duration *int32 `json:"duration,omitempty"`
	// The point in time when the route ends. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	End *time.Time `json:"end,omitempty"`
}

// NewRouteEnd instantiates a new RouteEnd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRouteEnd() *RouteEnd {
	this := RouteEnd{}
	return &this
}

// NewRouteEndWithDefaults instantiates a new RouteEnd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteEndWithDefaults() *RouteEnd {
	this := RouteEnd{}
	return &this
}

// GetLocationId returns the LocationId field value if set, zero value otherwise.
func (o *RouteEnd) GetLocationId() string {
	if o == nil || IsNil(o.LocationId) {
		var ret string
		return ret
	}
	return *o.LocationId
}

// GetLocationIdOk returns a tuple with the LocationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEnd) GetLocationIdOk() (*string, bool) {
	if o == nil || IsNil(o.LocationId) {
		return nil, false
	}
	return o.LocationId, true
}

// HasLocationId returns a boolean if a field has been set.
func (o *RouteEnd) HasLocationId() bool {
	if o != nil && !IsNil(o.LocationId) {
		return true
	}

	return false
}

// SetLocationId gets a reference to the given string and assigns it to the LocationId field.
func (o *RouteEnd) SetLocationId(v string) {
	o.LocationId = &v
}

// GetApproach returns the Approach field value if set, zero value otherwise.
func (o *RouteEnd) GetApproach() Leg {
	if o == nil || IsNil(o.Approach) {
		var ret Leg
		return ret
	}
	return *o.Approach
}

// GetApproachOk returns a tuple with the Approach field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEnd) GetApproachOk() (*Leg, bool) {
	if o == nil || IsNil(o.Approach) {
		return nil, false
	}
	return o.Approach, true
}

// HasApproach returns a boolean if a field has been set.
func (o *RouteEnd) HasApproach() bool {
	if o != nil && !IsNil(o.Approach) {
		return true
	}

	return false
}

// SetApproach gets a reference to the given Leg and assigns it to the Approach field.
func (o *RouteEnd) SetApproach(v Leg) {
	o.Approach = &v
}

// GetArrival returns the Arrival field value if set, zero value otherwise.
func (o *RouteEnd) GetArrival() time.Time {
	if o == nil || IsNil(o.Arrival) {
		var ret time.Time
		return ret
	}
	return *o.Arrival
}

// GetArrivalOk returns a tuple with the Arrival field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEnd) GetArrivalOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Arrival) {
		return nil, false
	}
	return o.Arrival, true
}

// HasArrival returns a boolean if a field has been set.
func (o *RouteEnd) HasArrival() bool {
	if o != nil && !IsNil(o.Arrival) {
		return true
	}

	return false
}

// SetArrival gets a reference to the given time.Time and assigns it to the Arrival field.
func (o *RouteEnd) SetArrival(v time.Time) {
	o.Arrival = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *RouteEnd) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEnd) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *RouteEnd) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *RouteEnd) SetDuration(v int32) {
	o.Duration = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *RouteEnd) GetEnd() time.Time {
	if o == nil || IsNil(o.End) {
		var ret time.Time
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RouteEnd) GetEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *RouteEnd) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given time.Time and assigns it to the End field.
func (o *RouteEnd) SetEnd(v time.Time) {
	o.End = &v
}

func (o RouteEnd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RouteEnd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.LocationId) {
		toSerialize["locationId"] = o.LocationId
	}
	if !IsNil(o.Approach) {
		toSerialize["approach"] = o.Approach
	}
	if !IsNil(o.Arrival) {
		toSerialize["arrival"] = o.Arrival
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

type NullableRouteEnd struct {
	value *RouteEnd
	isSet bool
}

func (v NullableRouteEnd) Get() *RouteEnd {
	return v.value
}

func (v *NullableRouteEnd) Set(val *RouteEnd) {
	v.value = val
	v.isSet = true
}

func (v NullableRouteEnd) IsSet() bool {
	return v.isSet
}

func (v *NullableRouteEnd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRouteEnd(val *RouteEnd) *NullableRouteEnd {
	return &NullableRouteEnd{value: val, isSet: true}
}

func (v NullableRouteEnd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRouteEnd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


