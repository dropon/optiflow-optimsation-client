/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
)

// checks if the PlanningRestrictions type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanningRestrictions{}

// PlanningRestrictions Planning restrictions that must hold for all routes.
type PlanningRestrictions struct {
	// Restricts the number of trips per route to one.  See [here](./concepts/route-structure-control) for more information.
	SingleTripPerRoute *bool `json:"singleTripPerRoute,omitempty"`
	// Restricts the number of different depot locations in the route of a vehicle to at most one. The vehicle start and end locations do not count here.  See [here](./concepts/route-structure-control) for more information.
	SingleDepotPerRoute *bool `json:"singleDepotPerRoute,omitempty"`
	// Defines restrictions regarding which load categories of transports are disallowed to be mixed on the same trip. 
	MixedLoadingProhibitions []MixedLoadingProhibition `json:"mixedLoadingProhibitions,omitempty"`
}

// NewPlanningRestrictions instantiates a new PlanningRestrictions object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanningRestrictions() *PlanningRestrictions {
	this := PlanningRestrictions{}
	var singleTripPerRoute bool = false
	this.SingleTripPerRoute = &singleTripPerRoute
	var singleDepotPerRoute bool = false
	this.SingleDepotPerRoute = &singleDepotPerRoute
	return &this
}

// NewPlanningRestrictionsWithDefaults instantiates a new PlanningRestrictions object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanningRestrictionsWithDefaults() *PlanningRestrictions {
	this := PlanningRestrictions{}
	var singleTripPerRoute bool = false
	this.SingleTripPerRoute = &singleTripPerRoute
	var singleDepotPerRoute bool = false
	this.SingleDepotPerRoute = &singleDepotPerRoute
	return &this
}

// GetSingleTripPerRoute returns the SingleTripPerRoute field value if set, zero value otherwise.
func (o *PlanningRestrictions) GetSingleTripPerRoute() bool {
	if o == nil || IsNil(o.SingleTripPerRoute) {
		var ret bool
		return ret
	}
	return *o.SingleTripPerRoute
}

// GetSingleTripPerRouteOk returns a tuple with the SingleTripPerRoute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanningRestrictions) GetSingleTripPerRouteOk() (*bool, bool) {
	if o == nil || IsNil(o.SingleTripPerRoute) {
		return nil, false
	}
	return o.SingleTripPerRoute, true
}

// HasSingleTripPerRoute returns a boolean if a field has been set.
func (o *PlanningRestrictions) HasSingleTripPerRoute() bool {
	if o != nil && !IsNil(o.SingleTripPerRoute) {
		return true
	}

	return false
}

// SetSingleTripPerRoute gets a reference to the given bool and assigns it to the SingleTripPerRoute field.
func (o *PlanningRestrictions) SetSingleTripPerRoute(v bool) {
	o.SingleTripPerRoute = &v
}

// GetSingleDepotPerRoute returns the SingleDepotPerRoute field value if set, zero value otherwise.
func (o *PlanningRestrictions) GetSingleDepotPerRoute() bool {
	if o == nil || IsNil(o.SingleDepotPerRoute) {
		var ret bool
		return ret
	}
	return *o.SingleDepotPerRoute
}

// GetSingleDepotPerRouteOk returns a tuple with the SingleDepotPerRoute field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanningRestrictions) GetSingleDepotPerRouteOk() (*bool, bool) {
	if o == nil || IsNil(o.SingleDepotPerRoute) {
		return nil, false
	}
	return o.SingleDepotPerRoute, true
}

// HasSingleDepotPerRoute returns a boolean if a field has been set.
func (o *PlanningRestrictions) HasSingleDepotPerRoute() bool {
	if o != nil && !IsNil(o.SingleDepotPerRoute) {
		return true
	}

	return false
}

// SetSingleDepotPerRoute gets a reference to the given bool and assigns it to the SingleDepotPerRoute field.
func (o *PlanningRestrictions) SetSingleDepotPerRoute(v bool) {
	o.SingleDepotPerRoute = &v
}

// GetMixedLoadingProhibitions returns the MixedLoadingProhibitions field value if set, zero value otherwise.
func (o *PlanningRestrictions) GetMixedLoadingProhibitions() []MixedLoadingProhibition {
	if o == nil || IsNil(o.MixedLoadingProhibitions) {
		var ret []MixedLoadingProhibition
		return ret
	}
	return o.MixedLoadingProhibitions
}

// GetMixedLoadingProhibitionsOk returns a tuple with the MixedLoadingProhibitions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanningRestrictions) GetMixedLoadingProhibitionsOk() ([]MixedLoadingProhibition, bool) {
	if o == nil || IsNil(o.MixedLoadingProhibitions) {
		return nil, false
	}
	return o.MixedLoadingProhibitions, true
}

// HasMixedLoadingProhibitions returns a boolean if a field has been set.
func (o *PlanningRestrictions) HasMixedLoadingProhibitions() bool {
	if o != nil && !IsNil(o.MixedLoadingProhibitions) {
		return true
	}

	return false
}

// SetMixedLoadingProhibitions gets a reference to the given []MixedLoadingProhibition and assigns it to the MixedLoadingProhibitions field.
func (o *PlanningRestrictions) SetMixedLoadingProhibitions(v []MixedLoadingProhibition) {
	o.MixedLoadingProhibitions = v
}

func (o PlanningRestrictions) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanningRestrictions) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.SingleTripPerRoute) {
		toSerialize["singleTripPerRoute"] = o.SingleTripPerRoute
	}
	if !IsNil(o.SingleDepotPerRoute) {
		toSerialize["singleDepotPerRoute"] = o.SingleDepotPerRoute
	}
	if !IsNil(o.MixedLoadingProhibitions) {
		toSerialize["mixedLoadingProhibitions"] = o.MixedLoadingProhibitions
	}
	return toSerialize, nil
}

type NullablePlanningRestrictions struct {
	value *PlanningRestrictions
	isSet bool
}

func (v NullablePlanningRestrictions) Get() *PlanningRestrictions {
	return v.value
}

func (v *NullablePlanningRestrictions) Set(val *PlanningRestrictions) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanningRestrictions) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanningRestrictions) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanningRestrictions(val *PlanningRestrictions) *NullablePlanningRestrictions {
	return &NullablePlanningRestrictions{value: val, isSet: true}
}

func (v NullablePlanningRestrictions) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanningRestrictions) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


