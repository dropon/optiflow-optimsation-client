/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Plan type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Plan{}

// Plan The request object for the service method 'createPlan' and the result of the service method 'getPlan'.
type Plan struct {
	// The ID of the plan. It is generated when the plan is created.
	Id string `json:"id"`
	// A description of the plan.
	Description *string `json:"description,omitempty"`
	// A list of depot or customer locations that may be referenced by vehicles, transports and stops. A location is either a depot location or a customer location. Depot locations act as trip delimiters. Each location must be referenced by another object. If a request contains a location not referenced by any other object, the request will be rejected.
	Locations []Location `json:"locations"`
	// A list of vehicles that can be used to transport goods.
	Vehicles []Vehicle `json:"vehicles"`
	// A list of drivers. A driver is always assigned to a specific vehicle. In turn, a vehicle can but does not need to have a driver assigned to it. If a driver is assigned to a vehicle, the driver's restrictions apply, such as its limited availability. If no drivers are specified, the drivers of all vehicles are always available.
	Drivers []Driver `json:"drivers,omitempty"`
	// A list of transports, that is, orders to transport goods from one location to another location. Depending on your subscription, a more restrictive value for maximum number of transport may apply. Check request limits of your subscription.
	Transports []Transport `json:"transports"`
	// The planning horizon for the plan, described by start and end date and time. All routes have to start and end within this planning horizon. All opening intervals outside of this planning horizon are not considered by the algorithm. If specified, the planning horizon is restricted to a maximum duration of two weeks. If not specified, the planning horizon is infinite. If no other time interval is specified within this plan, the planning horizon is required.
	PlanningHorizon *TimeInterval `json:"planningHorizon,omitempty"`
	Restrictions *PlanningRestrictions `json:"restrictions,omitempty"`
	// A list of routes. A route contains a sequence of stops. It specifies where and in which order goods are to be picked up or delivered. Each stop can be assigned to a trip. A route is subdivided into trips. Each route has at least one trip and a trip consists of at least two stops. At the beginning and end of each trip the vehicle does not carry any load. A trip starts at the vehicle start location or at a depot location, and ends at the vehicle end location or at a depot location. If routes are already given in input they are considered during planning. Transports which are already planned in an input route will also remain planned in the output routes. This might lead to violations of the routes.   See [here](./concepts/routes-and-trips) for more information.
	Routes []Route `json:"routes,omitempty"`
	// Returns the vehicle IDs that are not used in the response of an optimization operation. These vehicles are not assigned to any route.
	UnplannedVehicleIds []string `json:"unplannedVehicleIds,omitempty"`
	// Returns the transport IDs that could not be planned in the response of an optimization operation. These transports are not part of the routes.
	UnplannedTransportIds []string `json:"unplannedTransportIds,omitempty"`
	// A list of warnings concerning the validity of the result.
	Warnings []Warning `json:"warnings,omitempty"`
}

type _Plan Plan

// NewPlan instantiates a new Plan object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlan(id string, locations []Location, vehicles []Vehicle, transports []Transport) *Plan {
	this := Plan{}
	this.Id = id
	this.Locations = locations
	this.Vehicles = vehicles
	this.Transports = transports
	return &this
}

// NewPlanWithDefaults instantiates a new Plan object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanWithDefaults() *Plan {
	this := Plan{}
	return &this
}

// GetId returns the Id field value
func (o *Plan) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Plan) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Plan) SetId(v string) {
	o.Id = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Plan) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Plan) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Plan) SetDescription(v string) {
	o.Description = &v
}

// GetLocations returns the Locations field value
func (o *Plan) GetLocations() []Location {
	if o == nil {
		var ret []Location
		return ret
	}

	return o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value
// and a boolean to check if the value has been set.
func (o *Plan) GetLocationsOk() ([]Location, bool) {
	if o == nil {
		return nil, false
	}
	return o.Locations, true
}

// SetLocations sets field value
func (o *Plan) SetLocations(v []Location) {
	o.Locations = v
}

// GetVehicles returns the Vehicles field value
func (o *Plan) GetVehicles() []Vehicle {
	if o == nil {
		var ret []Vehicle
		return ret
	}

	return o.Vehicles
}

// GetVehiclesOk returns a tuple with the Vehicles field value
// and a boolean to check if the value has been set.
func (o *Plan) GetVehiclesOk() ([]Vehicle, bool) {
	if o == nil {
		return nil, false
	}
	return o.Vehicles, true
}

// SetVehicles sets field value
func (o *Plan) SetVehicles(v []Vehicle) {
	o.Vehicles = v
}

// GetDrivers returns the Drivers field value if set, zero value otherwise.
func (o *Plan) GetDrivers() []Driver {
	if o == nil || IsNil(o.Drivers) {
		var ret []Driver
		return ret
	}
	return o.Drivers
}

// GetDriversOk returns a tuple with the Drivers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetDriversOk() ([]Driver, bool) {
	if o == nil || IsNil(o.Drivers) {
		return nil, false
	}
	return o.Drivers, true
}

// HasDrivers returns a boolean if a field has been set.
func (o *Plan) HasDrivers() bool {
	if o != nil && !IsNil(o.Drivers) {
		return true
	}

	return false
}

// SetDrivers gets a reference to the given []Driver and assigns it to the Drivers field.
func (o *Plan) SetDrivers(v []Driver) {
	o.Drivers = v
}

// GetTransports returns the Transports field value
func (o *Plan) GetTransports() []Transport {
	if o == nil {
		var ret []Transport
		return ret
	}

	return o.Transports
}

// GetTransportsOk returns a tuple with the Transports field value
// and a boolean to check if the value has been set.
func (o *Plan) GetTransportsOk() ([]Transport, bool) {
	if o == nil {
		return nil, false
	}
	return o.Transports, true
}

// SetTransports sets field value
func (o *Plan) SetTransports(v []Transport) {
	o.Transports = v
}

// GetPlanningHorizon returns the PlanningHorizon field value if set, zero value otherwise.
func (o *Plan) GetPlanningHorizon() TimeInterval {
	if o == nil || IsNil(o.PlanningHorizon) {
		var ret TimeInterval
		return ret
	}
	return *o.PlanningHorizon
}

// GetPlanningHorizonOk returns a tuple with the PlanningHorizon field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetPlanningHorizonOk() (*TimeInterval, bool) {
	if o == nil || IsNil(o.PlanningHorizon) {
		return nil, false
	}
	return o.PlanningHorizon, true
}

// HasPlanningHorizon returns a boolean if a field has been set.
func (o *Plan) HasPlanningHorizon() bool {
	if o != nil && !IsNil(o.PlanningHorizon) {
		return true
	}

	return false
}

// SetPlanningHorizon gets a reference to the given TimeInterval and assigns it to the PlanningHorizon field.
func (o *Plan) SetPlanningHorizon(v TimeInterval) {
	o.PlanningHorizon = &v
}

// GetRestrictions returns the Restrictions field value if set, zero value otherwise.
func (o *Plan) GetRestrictions() PlanningRestrictions {
	if o == nil || IsNil(o.Restrictions) {
		var ret PlanningRestrictions
		return ret
	}
	return *o.Restrictions
}

// GetRestrictionsOk returns a tuple with the Restrictions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetRestrictionsOk() (*PlanningRestrictions, bool) {
	if o == nil || IsNil(o.Restrictions) {
		return nil, false
	}
	return o.Restrictions, true
}

// HasRestrictions returns a boolean if a field has been set.
func (o *Plan) HasRestrictions() bool {
	if o != nil && !IsNil(o.Restrictions) {
		return true
	}

	return false
}

// SetRestrictions gets a reference to the given PlanningRestrictions and assigns it to the Restrictions field.
func (o *Plan) SetRestrictions(v PlanningRestrictions) {
	o.Restrictions = &v
}

// GetRoutes returns the Routes field value if set, zero value otherwise.
func (o *Plan) GetRoutes() []Route {
	if o == nil || IsNil(o.Routes) {
		var ret []Route
		return ret
	}
	return o.Routes
}

// GetRoutesOk returns a tuple with the Routes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetRoutesOk() ([]Route, bool) {
	if o == nil || IsNil(o.Routes) {
		return nil, false
	}
	return o.Routes, true
}

// HasRoutes returns a boolean if a field has been set.
func (o *Plan) HasRoutes() bool {
	if o != nil && !IsNil(o.Routes) {
		return true
	}

	return false
}

// SetRoutes gets a reference to the given []Route and assigns it to the Routes field.
func (o *Plan) SetRoutes(v []Route) {
	o.Routes = v
}

// GetUnplannedVehicleIds returns the UnplannedVehicleIds field value if set, zero value otherwise.
func (o *Plan) GetUnplannedVehicleIds() []string {
	if o == nil || IsNil(o.UnplannedVehicleIds) {
		var ret []string
		return ret
	}
	return o.UnplannedVehicleIds
}

// GetUnplannedVehicleIdsOk returns a tuple with the UnplannedVehicleIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetUnplannedVehicleIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UnplannedVehicleIds) {
		return nil, false
	}
	return o.UnplannedVehicleIds, true
}

// HasUnplannedVehicleIds returns a boolean if a field has been set.
func (o *Plan) HasUnplannedVehicleIds() bool {
	if o != nil && !IsNil(o.UnplannedVehicleIds) {
		return true
	}

	return false
}

// SetUnplannedVehicleIds gets a reference to the given []string and assigns it to the UnplannedVehicleIds field.
func (o *Plan) SetUnplannedVehicleIds(v []string) {
	o.UnplannedVehicleIds = v
}

// GetUnplannedTransportIds returns the UnplannedTransportIds field value if set, zero value otherwise.
func (o *Plan) GetUnplannedTransportIds() []string {
	if o == nil || IsNil(o.UnplannedTransportIds) {
		var ret []string
		return ret
	}
	return o.UnplannedTransportIds
}

// GetUnplannedTransportIdsOk returns a tuple with the UnplannedTransportIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetUnplannedTransportIdsOk() ([]string, bool) {
	if o == nil || IsNil(o.UnplannedTransportIds) {
		return nil, false
	}
	return o.UnplannedTransportIds, true
}

// HasUnplannedTransportIds returns a boolean if a field has been set.
func (o *Plan) HasUnplannedTransportIds() bool {
	if o != nil && !IsNil(o.UnplannedTransportIds) {
		return true
	}

	return false
}

// SetUnplannedTransportIds gets a reference to the given []string and assigns it to the UnplannedTransportIds field.
func (o *Plan) SetUnplannedTransportIds(v []string) {
	o.UnplannedTransportIds = v
}

// GetWarnings returns the Warnings field value if set, zero value otherwise.
func (o *Plan) GetWarnings() []Warning {
	if o == nil || IsNil(o.Warnings) {
		var ret []Warning
		return ret
	}
	return o.Warnings
}

// GetWarningsOk returns a tuple with the Warnings field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Plan) GetWarningsOk() ([]Warning, bool) {
	if o == nil || IsNil(o.Warnings) {
		return nil, false
	}
	return o.Warnings, true
}

// HasWarnings returns a boolean if a field has been set.
func (o *Plan) HasWarnings() bool {
	if o != nil && !IsNil(o.Warnings) {
		return true
	}

	return false
}

// SetWarnings gets a reference to the given []Warning and assigns it to the Warnings field.
func (o *Plan) SetWarnings(v []Warning) {
	o.Warnings = v
}

func (o Plan) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Plan) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["locations"] = o.Locations
	toSerialize["vehicles"] = o.Vehicles
	if !IsNil(o.Drivers) {
		toSerialize["drivers"] = o.Drivers
	}
	toSerialize["transports"] = o.Transports
	if !IsNil(o.PlanningHorizon) {
		toSerialize["planningHorizon"] = o.PlanningHorizon
	}
	if !IsNil(o.Restrictions) {
		toSerialize["restrictions"] = o.Restrictions
	}
	if !IsNil(o.Routes) {
		toSerialize["routes"] = o.Routes
	}
	if !IsNil(o.UnplannedVehicleIds) {
		toSerialize["unplannedVehicleIds"] = o.UnplannedVehicleIds
	}
	if !IsNil(o.UnplannedTransportIds) {
		toSerialize["unplannedTransportIds"] = o.UnplannedTransportIds
	}
	if !IsNil(o.Warnings) {
		toSerialize["warnings"] = o.Warnings
	}
	return toSerialize, nil
}

func (o *Plan) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"locations",
		"vehicles",
		"transports",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlan := _Plan{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlan)

	if err != nil {
		return err
	}

	*o = Plan(varPlan)

	return err
}

type NullablePlan struct {
	value *Plan
	isSet bool
}

func (v NullablePlan) Get() *Plan {
	return v.value
}

func (v *NullablePlan) Set(val *Plan) {
	v.value = val
	v.isSet = true
}

func (v NullablePlan) IsSet() bool {
	return v.isSet
}

func (v *NullablePlan) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlan(val *Plan) *NullablePlan {
	return &NullablePlan{value: val, isSet: true}
}

func (v NullablePlan) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlan) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


