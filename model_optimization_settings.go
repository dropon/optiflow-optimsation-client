/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the OptimizationSettings type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OptimizationSettings{}

// OptimizationSettings General settings of the optimization.
type OptimizationSettings struct {
	// Defines the maximum duration [s] the optimization can use to reduce the cost of the scheduled routes. Please note that the upper bound on optimization duration is a technical limit. Check your individual price plan or contract to see which limits apply. The optimization will automatically stop when this duration is spent in the `RUNNING` status but can also be stopped manually using the *stopOptimization* endpoint.
	Duration int32 `json:"duration"`
}

type _OptimizationSettings OptimizationSettings

// NewOptimizationSettings instantiates a new OptimizationSettings object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOptimizationSettings(duration int32) *OptimizationSettings {
	this := OptimizationSettings{}
	this.Duration = duration
	return &this
}

// NewOptimizationSettingsWithDefaults instantiates a new OptimizationSettings object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOptimizationSettingsWithDefaults() *OptimizationSettings {
	this := OptimizationSettings{}
	return &this
}

// GetDuration returns the Duration field value
func (o *OptimizationSettings) GetDuration() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Duration
}

// GetDurationOk returns a tuple with the Duration field value
// and a boolean to check if the value has been set.
func (o *OptimizationSettings) GetDurationOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Duration, true
}

// SetDuration sets field value
func (o *OptimizationSettings) SetDuration(v int32) {
	o.Duration = v
}

func (o OptimizationSettings) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OptimizationSettings) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["duration"] = o.Duration
	return toSerialize, nil
}

func (o *OptimizationSettings) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"duration",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varOptimizationSettings := _OptimizationSettings{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varOptimizationSettings)

	if err != nil {
		return err
	}

	*o = OptimizationSettings(varOptimizationSettings)

	return err
}

type NullableOptimizationSettings struct {
	value *OptimizationSettings
	isSet bool
}

func (v NullableOptimizationSettings) Get() *OptimizationSettings {
	return v.value
}

func (v *NullableOptimizationSettings) Set(val *OptimizationSettings) {
	v.value = val
	v.isSet = true
}

func (v NullableOptimizationSettings) IsSet() bool {
	return v.isSet
}

func (v *NullableOptimizationSettings) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOptimizationSettings(val *OptimizationSettings) *NullableOptimizationSettings {
	return &NullableOptimizationSettings{value: val, isSet: true}
}

func (v NullableOptimizationSettings) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOptimizationSettings) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


