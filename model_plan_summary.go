/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the PlanSummary type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &PlanSummary{}

// PlanSummary The summary of a plan.
type PlanSummary struct {
	// The ID of the plan.
	Id string `json:"id"`
	// Number of locations in the plan.
	NumberOfLocations int32 `json:"numberOfLocations"`
	// Number of vehicles in the plan.
	NumberOfVehicles int32 `json:"numberOfVehicles"`
	// Number of transports in the plan.
	NumberOfTransports int32 `json:"numberOfTransports"`
	// Number of routes in the plan.
	NumberOfRoutes int32 `json:"numberOfRoutes"`
	// The description of the plan.
	Description *string `json:"description,omitempty"`
	// Time of the latest update of the plan formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
	UpdateTime time.Time `json:"updateTime"`
	// Time of the creation of the plan formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
	CreationTime time.Time `json:"creationTime"`
}

type _PlanSummary PlanSummary

// NewPlanSummary instantiates a new PlanSummary object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPlanSummary(id string, numberOfLocations int32, numberOfVehicles int32, numberOfTransports int32, numberOfRoutes int32, updateTime time.Time, creationTime time.Time) *PlanSummary {
	this := PlanSummary{}
	this.Id = id
	this.NumberOfLocations = numberOfLocations
	this.NumberOfVehicles = numberOfVehicles
	this.NumberOfTransports = numberOfTransports
	this.NumberOfRoutes = numberOfRoutes
	this.UpdateTime = updateTime
	this.CreationTime = creationTime
	return &this
}

// NewPlanSummaryWithDefaults instantiates a new PlanSummary object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPlanSummaryWithDefaults() *PlanSummary {
	this := PlanSummary{}
	return &this
}

// GetId returns the Id field value
func (o *PlanSummary) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *PlanSummary) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *PlanSummary) SetId(v string) {
	o.Id = v
}

// GetNumberOfLocations returns the NumberOfLocations field value
func (o *PlanSummary) GetNumberOfLocations() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfLocations
}

// GetNumberOfLocationsOk returns a tuple with the NumberOfLocations field value
// and a boolean to check if the value has been set.
func (o *PlanSummary) GetNumberOfLocationsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfLocations, true
}

// SetNumberOfLocations sets field value
func (o *PlanSummary) SetNumberOfLocations(v int32) {
	o.NumberOfLocations = v
}

// GetNumberOfVehicles returns the NumberOfVehicles field value
func (o *PlanSummary) GetNumberOfVehicles() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfVehicles
}

// GetNumberOfVehiclesOk returns a tuple with the NumberOfVehicles field value
// and a boolean to check if the value has been set.
func (o *PlanSummary) GetNumberOfVehiclesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfVehicles, true
}

// SetNumberOfVehicles sets field value
func (o *PlanSummary) SetNumberOfVehicles(v int32) {
	o.NumberOfVehicles = v
}

// GetNumberOfTransports returns the NumberOfTransports field value
func (o *PlanSummary) GetNumberOfTransports() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfTransports
}

// GetNumberOfTransportsOk returns a tuple with the NumberOfTransports field value
// and a boolean to check if the value has been set.
func (o *PlanSummary) GetNumberOfTransportsOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfTransports, true
}

// SetNumberOfTransports sets field value
func (o *PlanSummary) SetNumberOfTransports(v int32) {
	o.NumberOfTransports = v
}

// GetNumberOfRoutes returns the NumberOfRoutes field value
func (o *PlanSummary) GetNumberOfRoutes() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.NumberOfRoutes
}

// GetNumberOfRoutesOk returns a tuple with the NumberOfRoutes field value
// and a boolean to check if the value has been set.
func (o *PlanSummary) GetNumberOfRoutesOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.NumberOfRoutes, true
}

// SetNumberOfRoutes sets field value
func (o *PlanSummary) SetNumberOfRoutes(v int32) {
	o.NumberOfRoutes = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *PlanSummary) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PlanSummary) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *PlanSummary) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *PlanSummary) SetDescription(v string) {
	o.Description = &v
}

// GetUpdateTime returns the UpdateTime field value
func (o *PlanSummary) GetUpdateTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.UpdateTime
}

// GetUpdateTimeOk returns a tuple with the UpdateTime field value
// and a boolean to check if the value has been set.
func (o *PlanSummary) GetUpdateTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UpdateTime, true
}

// SetUpdateTime sets field value
func (o *PlanSummary) SetUpdateTime(v time.Time) {
	o.UpdateTime = v
}

// GetCreationTime returns the CreationTime field value
func (o *PlanSummary) GetCreationTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.CreationTime
}

// GetCreationTimeOk returns a tuple with the CreationTime field value
// and a boolean to check if the value has been set.
func (o *PlanSummary) GetCreationTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CreationTime, true
}

// SetCreationTime sets field value
func (o *PlanSummary) SetCreationTime(v time.Time) {
	o.CreationTime = v
}

func (o PlanSummary) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o PlanSummary) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	toSerialize["numberOfLocations"] = o.NumberOfLocations
	toSerialize["numberOfVehicles"] = o.NumberOfVehicles
	toSerialize["numberOfTransports"] = o.NumberOfTransports
	toSerialize["numberOfRoutes"] = o.NumberOfRoutes
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["updateTime"] = o.UpdateTime
	toSerialize["creationTime"] = o.CreationTime
	return toSerialize, nil
}

func (o *PlanSummary) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"numberOfLocations",
		"numberOfVehicles",
		"numberOfTransports",
		"numberOfRoutes",
		"updateTime",
		"creationTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varPlanSummary := _PlanSummary{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varPlanSummary)

	if err != nil {
		return err
	}

	*o = PlanSummary(varPlanSummary)

	return err
}

type NullablePlanSummary struct {
	value *PlanSummary
	isSet bool
}

func (v NullablePlanSummary) Get() *PlanSummary {
	return v.value
}

func (v *NullablePlanSummary) Set(val *PlanSummary) {
	v.value = val
	v.isSet = true
}

func (v NullablePlanSummary) IsSet() bool {
	return v.isSet
}

func (v *NullablePlanSummary) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePlanSummary(val *PlanSummary) *NullablePlanSummary {
	return &NullablePlanSummary{value: val, isSet: true}
}

func (v NullablePlanSummary) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePlanSummary) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


