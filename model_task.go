/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.17
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Task type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Task{}

// Task A description of a task that is scheduled for execution on a route.
type Task struct {
	// The unique identifier of the order whose pickup or delivery is described by this task.
	OrderId *string `json:"orderId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	Type *TaskType `json:"type,omitempty"`
	// A list of breaks that are scheduled to be taken before the execution of the task.
	Breaks []Break `json:"breaks,omitempty"`
	// The point in time when the execution of the task is scheduled to start. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	Start *time.Time `json:"start,omitempty"`
	// The scheduled duration [s] for the task to be executed. This is the duration between the start and end of the task.
	Duration *int32 `json:"duration,omitempty"`
	// The point in time when the execution of the task is scheduled to end. Formatted according to [RFC 3339, section 5.6](https://tools.ietf.org/html/rfc3339#section-5.6).
	End *time.Time `json:"end,omitempty"`
	// The unique identifier of the compartment that the order needs to be loaded in or unloaded from.
	CompartmentId *string `json:"compartmentId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	// The unique identifier of the depot in case the task is a pickup or a delivery at a depot.
	DepotId *string `json:"depotId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
}

// NewTask instantiates a new Task object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTask() *Task {
	this := Task{}
	return &this
}

// NewTaskWithDefaults instantiates a new Task object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTaskWithDefaults() *Task {
	this := Task{}
	return &this
}

// GetOrderId returns the OrderId field value if set, zero value otherwise.
func (o *Task) GetOrderId() string {
	if o == nil || IsNil(o.OrderId) {
		var ret string
		return ret
	}
	return *o.OrderId
}

// GetOrderIdOk returns a tuple with the OrderId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetOrderIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrderId) {
		return nil, false
	}
	return o.OrderId, true
}

// HasOrderId returns a boolean if a field has been set.
func (o *Task) HasOrderId() bool {
	if o != nil && !IsNil(o.OrderId) {
		return true
	}

	return false
}

// SetOrderId gets a reference to the given string and assigns it to the OrderId field.
func (o *Task) SetOrderId(v string) {
	o.OrderId = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Task) GetType() TaskType {
	if o == nil || IsNil(o.Type) {
		var ret TaskType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetTypeOk() (*TaskType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Task) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given TaskType and assigns it to the Type field.
func (o *Task) SetType(v TaskType) {
	o.Type = &v
}

// GetBreaks returns the Breaks field value if set, zero value otherwise.
func (o *Task) GetBreaks() []Break {
	if o == nil || IsNil(o.Breaks) {
		var ret []Break
		return ret
	}
	return o.Breaks
}

// GetBreaksOk returns a tuple with the Breaks field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetBreaksOk() ([]Break, bool) {
	if o == nil || IsNil(o.Breaks) {
		return nil, false
	}
	return o.Breaks, true
}

// HasBreaks returns a boolean if a field has been set.
func (o *Task) HasBreaks() bool {
	if o != nil && !IsNil(o.Breaks) {
		return true
	}

	return false
}

// SetBreaks gets a reference to the given []Break and assigns it to the Breaks field.
func (o *Task) SetBreaks(v []Break) {
	o.Breaks = v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *Task) GetStart() time.Time {
	if o == nil || IsNil(o.Start) {
		var ret time.Time
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Task) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given time.Time and assigns it to the Start field.
func (o *Task) SetStart(v time.Time) {
	o.Start = &v
}

// GetDuration returns the Duration field value if set, zero value otherwise.
func (o *Task) GetDuration() int32 {
	if o == nil || IsNil(o.Duration) {
		var ret int32
		return ret
	}
	return *o.Duration
}

// GetDurationOk returns a tuple with the Duration field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDurationOk() (*int32, bool) {
	if o == nil || IsNil(o.Duration) {
		return nil, false
	}
	return o.Duration, true
}

// HasDuration returns a boolean if a field has been set.
func (o *Task) HasDuration() bool {
	if o != nil && !IsNil(o.Duration) {
		return true
	}

	return false
}

// SetDuration gets a reference to the given int32 and assigns it to the Duration field.
func (o *Task) SetDuration(v int32) {
	o.Duration = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *Task) GetEnd() time.Time {
	if o == nil || IsNil(o.End) {
		var ret time.Time
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Task) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given time.Time and assigns it to the End field.
func (o *Task) SetEnd(v time.Time) {
	o.End = &v
}

// GetCompartmentId returns the CompartmentId field value if set, zero value otherwise.
func (o *Task) GetCompartmentId() string {
	if o == nil || IsNil(o.CompartmentId) {
		var ret string
		return ret
	}
	return *o.CompartmentId
}

// GetCompartmentIdOk returns a tuple with the CompartmentId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetCompartmentIdOk() (*string, bool) {
	if o == nil || IsNil(o.CompartmentId) {
		return nil, false
	}
	return o.CompartmentId, true
}

// HasCompartmentId returns a boolean if a field has been set.
func (o *Task) HasCompartmentId() bool {
	if o != nil && !IsNil(o.CompartmentId) {
		return true
	}

	return false
}

// SetCompartmentId gets a reference to the given string and assigns it to the CompartmentId field.
func (o *Task) SetCompartmentId(v string) {
	o.CompartmentId = &v
}

// GetDepotId returns the DepotId field value if set, zero value otherwise.
func (o *Task) GetDepotId() string {
	if o == nil || IsNil(o.DepotId) {
		var ret string
		return ret
	}
	return *o.DepotId
}

// GetDepotIdOk returns a tuple with the DepotId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Task) GetDepotIdOk() (*string, bool) {
	if o == nil || IsNil(o.DepotId) {
		return nil, false
	}
	return o.DepotId, true
}

// HasDepotId returns a boolean if a field has been set.
func (o *Task) HasDepotId() bool {
	if o != nil && !IsNil(o.DepotId) {
		return true
	}

	return false
}

// SetDepotId gets a reference to the given string and assigns it to the DepotId field.
func (o *Task) SetDepotId(v string) {
	o.DepotId = &v
}

func (o Task) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Task) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrderId) {
		toSerialize["orderId"] = o.OrderId
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Breaks) {
		toSerialize["breaks"] = o.Breaks
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Duration) {
		toSerialize["duration"] = o.Duration
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.CompartmentId) {
		toSerialize["compartmentId"] = o.CompartmentId
	}
	if !IsNil(o.DepotId) {
		toSerialize["depotId"] = o.DepotId
	}
	return toSerialize, nil
}

type NullableTask struct {
	value *Task
	isSet bool
}

func (v NullableTask) Get() *Task {
	return v.value
}

func (v *NullableTask) Set(val *Task) {
	v.value = val
	v.isSet = true
}

func (v NullableTask) IsSet() bool {
	return v.isSet
}

func (v *NullableTask) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTask(val *Task) *NullableTask {
	return &NullableTask{value: val, isSet: true}
}

func (v NullableTask) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTask) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


