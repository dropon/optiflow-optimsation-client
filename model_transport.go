/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Transport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Transport{}

// Transport A transport is the order to transport goods, that is, to pick them up at one location and deliver them to another location.  See [here](./concepts/locations-transports-and-stops) for more information.
type Transport struct {
	// A unique ID across all transports. The ID does not influence the result.
	Id string `json:"id" validate:"regexp=.*[^ ].*"`
	// A list of quantity dimensions of goods that have to be transported from pickup location to delivery location. The maximum length of this list is 100. That is, up to 100 different quantity dimensions (e.g. number of pallets, weight, volume, etc.) can be distinguished. Transports can only be executed by a vehicle with a higher (or an equal) maximum capacity in every quantity dimension. The length of this list has to be the same for all transports and all capacities of all vehicles. If and only if this list of quantities is empty for all transports, the capacities of each vehicle must be empty.
	Quantities []int32 `json:"quantities,omitempty"`
	// The ID of the location where goods have to be picked up.
	PickupLocationId string `json:"pickupLocationId" validate:"regexp=.*[^ ].*"`
	// The transport-dependent service time [s] that is required to pick up the transport goods at the pickup location.
	PickupServiceTime *int32 `json:"pickupServiceTime,omitempty"`
	// The ID of the location where goods have to be delivered to.
	DeliveryLocationId string `json:"deliveryLocationId" validate:"regexp=.*[^ ].*"`
	// The transport-dependent service time [s] that is required to deliver the transport goods at the delivery location.
	DeliveryServiceTime *int32 `json:"deliveryServiceTime,omitempty"`
	// A list of required vehicle equipment. If empty, no equipment is required. A vehicle can only be assigned to the transport if this list is a subset of (or equal to) the vehicle's equipment.
	RequiredEquipment []string `json:"requiredEquipment,omitempty"`
	// The priority of this transport. 0 is the lowest priority, 9 the highest. This field is only considered during the optimization if considerTransportPriorities is set. In this case every transport must have a priority set otherwise an exception is thrown. If considerTransportPriorities is set to false either every or no transport may have a priority set.  See [here](./concepts/transport-priorities) for more information.
	Priority NullableInt32 `json:"priority,omitempty"`
	// The load category of this transport. To specify a load category is useful if there are transports with one load category that shall not be mixed with transports with another load category on one trip. If two load categories are mutually exclusive on a trip, this can be specified as a mixed loading prohibition. Transports with conflicting load categories will not be planned together on one trip.  See [here](./concepts/mixed-loading-prohibition) for more information.
	LoadCategory *string `json:"loadCategory,omitempty"`
}

type _Transport Transport

// NewTransport instantiates a new Transport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTransport(id string, pickupLocationId string, deliveryLocationId string) *Transport {
	this := Transport{}
	this.Id = id
	this.PickupLocationId = pickupLocationId
	var pickupServiceTime int32 = 0
	this.PickupServiceTime = &pickupServiceTime
	this.DeliveryLocationId = deliveryLocationId
	var deliveryServiceTime int32 = 0
	this.DeliveryServiceTime = &deliveryServiceTime
	return &this
}

// NewTransportWithDefaults instantiates a new Transport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTransportWithDefaults() *Transport {
	this := Transport{}
	var pickupServiceTime int32 = 0
	this.PickupServiceTime = &pickupServiceTime
	var deliveryServiceTime int32 = 0
	this.DeliveryServiceTime = &deliveryServiceTime
	return &this
}

// GetId returns the Id field value
func (o *Transport) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Transport) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Transport) SetId(v string) {
	o.Id = v
}

// GetQuantities returns the Quantities field value if set, zero value otherwise.
func (o *Transport) GetQuantities() []int32 {
	if o == nil || IsNil(o.Quantities) {
		var ret []int32
		return ret
	}
	return o.Quantities
}

// GetQuantitiesOk returns a tuple with the Quantities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transport) GetQuantitiesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Quantities) {
		return nil, false
	}
	return o.Quantities, true
}

// HasQuantities returns a boolean if a field has been set.
func (o *Transport) HasQuantities() bool {
	if o != nil && !IsNil(o.Quantities) {
		return true
	}

	return false
}

// SetQuantities gets a reference to the given []int32 and assigns it to the Quantities field.
func (o *Transport) SetQuantities(v []int32) {
	o.Quantities = v
}

// GetPickupLocationId returns the PickupLocationId field value
func (o *Transport) GetPickupLocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.PickupLocationId
}

// GetPickupLocationIdOk returns a tuple with the PickupLocationId field value
// and a boolean to check if the value has been set.
func (o *Transport) GetPickupLocationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PickupLocationId, true
}

// SetPickupLocationId sets field value
func (o *Transport) SetPickupLocationId(v string) {
	o.PickupLocationId = v
}

// GetPickupServiceTime returns the PickupServiceTime field value if set, zero value otherwise.
func (o *Transport) GetPickupServiceTime() int32 {
	if o == nil || IsNil(o.PickupServiceTime) {
		var ret int32
		return ret
	}
	return *o.PickupServiceTime
}

// GetPickupServiceTimeOk returns a tuple with the PickupServiceTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transport) GetPickupServiceTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.PickupServiceTime) {
		return nil, false
	}
	return o.PickupServiceTime, true
}

// HasPickupServiceTime returns a boolean if a field has been set.
func (o *Transport) HasPickupServiceTime() bool {
	if o != nil && !IsNil(o.PickupServiceTime) {
		return true
	}

	return false
}

// SetPickupServiceTime gets a reference to the given int32 and assigns it to the PickupServiceTime field.
func (o *Transport) SetPickupServiceTime(v int32) {
	o.PickupServiceTime = &v
}

// GetDeliveryLocationId returns the DeliveryLocationId field value
func (o *Transport) GetDeliveryLocationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DeliveryLocationId
}

// GetDeliveryLocationIdOk returns a tuple with the DeliveryLocationId field value
// and a boolean to check if the value has been set.
func (o *Transport) GetDeliveryLocationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DeliveryLocationId, true
}

// SetDeliveryLocationId sets field value
func (o *Transport) SetDeliveryLocationId(v string) {
	o.DeliveryLocationId = v
}

// GetDeliveryServiceTime returns the DeliveryServiceTime field value if set, zero value otherwise.
func (o *Transport) GetDeliveryServiceTime() int32 {
	if o == nil || IsNil(o.DeliveryServiceTime) {
		var ret int32
		return ret
	}
	return *o.DeliveryServiceTime
}

// GetDeliveryServiceTimeOk returns a tuple with the DeliveryServiceTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transport) GetDeliveryServiceTimeOk() (*int32, bool) {
	if o == nil || IsNil(o.DeliveryServiceTime) {
		return nil, false
	}
	return o.DeliveryServiceTime, true
}

// HasDeliveryServiceTime returns a boolean if a field has been set.
func (o *Transport) HasDeliveryServiceTime() bool {
	if o != nil && !IsNil(o.DeliveryServiceTime) {
		return true
	}

	return false
}

// SetDeliveryServiceTime gets a reference to the given int32 and assigns it to the DeliveryServiceTime field.
func (o *Transport) SetDeliveryServiceTime(v int32) {
	o.DeliveryServiceTime = &v
}

// GetRequiredEquipment returns the RequiredEquipment field value if set, zero value otherwise.
func (o *Transport) GetRequiredEquipment() []string {
	if o == nil || IsNil(o.RequiredEquipment) {
		var ret []string
		return ret
	}
	return o.RequiredEquipment
}

// GetRequiredEquipmentOk returns a tuple with the RequiredEquipment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transport) GetRequiredEquipmentOk() ([]string, bool) {
	if o == nil || IsNil(o.RequiredEquipment) {
		return nil, false
	}
	return o.RequiredEquipment, true
}

// HasRequiredEquipment returns a boolean if a field has been set.
func (o *Transport) HasRequiredEquipment() bool {
	if o != nil && !IsNil(o.RequiredEquipment) {
		return true
	}

	return false
}

// SetRequiredEquipment gets a reference to the given []string and assigns it to the RequiredEquipment field.
func (o *Transport) SetRequiredEquipment(v []string) {
	o.RequiredEquipment = v
}

// GetPriority returns the Priority field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Transport) GetPriority() int32 {
	if o == nil || IsNil(o.Priority.Get()) {
		var ret int32
		return ret
	}
	return *o.Priority.Get()
}

// GetPriorityOk returns a tuple with the Priority field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Transport) GetPriorityOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Priority.Get(), o.Priority.IsSet()
}

// HasPriority returns a boolean if a field has been set.
func (o *Transport) HasPriority() bool {
	if o != nil && o.Priority.IsSet() {
		return true
	}

	return false
}

// SetPriority gets a reference to the given NullableInt32 and assigns it to the Priority field.
func (o *Transport) SetPriority(v int32) {
	o.Priority.Set(&v)
}
// SetPriorityNil sets the value for Priority to be an explicit nil
func (o *Transport) SetPriorityNil() {
	o.Priority.Set(nil)
}

// UnsetPriority ensures that no value is present for Priority, not even an explicit nil
func (o *Transport) UnsetPriority() {
	o.Priority.Unset()
}

// GetLoadCategory returns the LoadCategory field value if set, zero value otherwise.
func (o *Transport) GetLoadCategory() string {
	if o == nil || IsNil(o.LoadCategory) {
		var ret string
		return ret
	}
	return *o.LoadCategory
}

// GetLoadCategoryOk returns a tuple with the LoadCategory field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Transport) GetLoadCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.LoadCategory) {
		return nil, false
	}
	return o.LoadCategory, true
}

// HasLoadCategory returns a boolean if a field has been set.
func (o *Transport) HasLoadCategory() bool {
	if o != nil && !IsNil(o.LoadCategory) {
		return true
	}

	return false
}

// SetLoadCategory gets a reference to the given string and assigns it to the LoadCategory field.
func (o *Transport) SetLoadCategory(v string) {
	o.LoadCategory = &v
}

func (o Transport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Transport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.Quantities) {
		toSerialize["quantities"] = o.Quantities
	}
	toSerialize["pickupLocationId"] = o.PickupLocationId
	if !IsNil(o.PickupServiceTime) {
		toSerialize["pickupServiceTime"] = o.PickupServiceTime
	}
	toSerialize["deliveryLocationId"] = o.DeliveryLocationId
	if !IsNil(o.DeliveryServiceTime) {
		toSerialize["deliveryServiceTime"] = o.DeliveryServiceTime
	}
	if !IsNil(o.RequiredEquipment) {
		toSerialize["requiredEquipment"] = o.RequiredEquipment
	}
	if o.Priority.IsSet() {
		toSerialize["priority"] = o.Priority.Get()
	}
	if !IsNil(o.LoadCategory) {
		toSerialize["loadCategory"] = o.LoadCategory
	}
	return toSerialize, nil
}

func (o *Transport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
		"pickupLocationId",
		"deliveryLocationId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varTransport := _Transport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varTransport)

	if err != nil {
		return err
	}

	*o = Transport(varTransport)

	return err
}

type NullableTransport struct {
	value *Transport
	isSet bool
}

func (v NullableTransport) Get() *Transport {
	return v.value
}

func (v *NullableTransport) Set(val *Transport) {
	v.value = val
	v.isSet = true
}

func (v NullableTransport) IsSet() bool {
	return v.isSet
}

func (v *NullableTransport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTransport(val *Transport) *NullableTransport {
	return &NullableTransport{value: val, isSet: true}
}

func (v NullableTransport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTransport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


