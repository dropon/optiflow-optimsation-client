/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.29
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// OrderDepotCombinationConstraintType Describes which combinations of orders and depots have to be respected or excluded. * `ORDER_REQUIRES_DEPOT` - An order from the given order category can only be (un)loaded at a depot from the given depot category. * `DEPOT_REQUIRES_ORDER` - At a depot from the given depot category only orders from the given order category can be (un)loaded. * `FORBIDDEN_COMBINATION` - An order from the given order category cannot be (un)loaded at a depot from the given depot category.
type OrderDepotCombinationConstraintType string

// List of OrderDepotCombinationConstraintType
const (
	ORDER_REQUIRES_DEPOT OrderDepotCombinationConstraintType = "ORDER_REQUIRES_DEPOT"
	DEPOT_REQUIRES_ORDER OrderDepotCombinationConstraintType = "DEPOT_REQUIRES_ORDER"
	FORBIDDEN_COMBINATION OrderDepotCombinationConstraintType = "FORBIDDEN_COMBINATION"
)

// All allowed values of OrderDepotCombinationConstraintType enum
var AllowedOrderDepotCombinationConstraintTypeEnumValues = []OrderDepotCombinationConstraintType{
	"ORDER_REQUIRES_DEPOT",
	"DEPOT_REQUIRES_ORDER",
	"FORBIDDEN_COMBINATION",
}

func (v *OrderDepotCombinationConstraintType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrderDepotCombinationConstraintType(value)
	for _, existing := range AllowedOrderDepotCombinationConstraintTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrderDepotCombinationConstraintType", value)
}

// NewOrderDepotCombinationConstraintTypeFromValue returns a pointer to a valid OrderDepotCombinationConstraintType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrderDepotCombinationConstraintTypeFromValue(v string) (*OrderDepotCombinationConstraintType, error) {
	ev := OrderDepotCombinationConstraintType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrderDepotCombinationConstraintType: valid values are %v", v, AllowedOrderDepotCombinationConstraintTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrderDepotCombinationConstraintType) IsValid() bool {
	for _, existing := range AllowedOrderDepotCombinationConstraintTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrderDepotCombinationConstraintType value
func (v OrderDepotCombinationConstraintType) Ptr() *OrderDepotCombinationConstraintType {
	return &v
}

type NullableOrderDepotCombinationConstraintType struct {
	value *OrderDepotCombinationConstraintType
	isSet bool
}

func (v NullableOrderDepotCombinationConstraintType) Get() *OrderDepotCombinationConstraintType {
	return v.value
}

func (v *NullableOrderDepotCombinationConstraintType) Set(val *OrderDepotCombinationConstraintType) {
	v.value = val
	v.isSet = true
}

func (v NullableOrderDepotCombinationConstraintType) IsSet() bool {
	return v.isSet
}

func (v *NullableOrderDepotCombinationConstraintType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrderDepotCombinationConstraintType(val *OrderDepotCombinationConstraintType) *NullableOrderDepotCombinationConstraintType {
	return &NullableOrderDepotCombinationConstraintType{value: val, isSet: true}
}

func (v NullableOrderDepotCombinationConstraintType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrderDepotCombinationConstraintType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

