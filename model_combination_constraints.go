/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.24
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CombinationConstraints type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CombinationConstraints{}

// CombinationConstraints Describes constraints on combinations of orders, vehicles and depots.
type CombinationConstraints struct {
	// A list of constraints on combinations of orders and compartments.
	OrderCompartment []OrderCompartmentCombinationConstraint `json:"orderCompartment,omitempty"`
	// A list of constraints on combinations of orders and vehicles.
	OrderVehicle []OrderVehicleCombinationConstraint `json:"orderVehicle,omitempty"`
	// A list of constraints on combinations of orders and depots.
	OrderDepot []OrderDepotCombinationConstraint `json:"orderDepot,omitempty"`
	// A list of constraints on combinations of depots and vehicles.
	DepotVehicle []DepotVehicleCombinationConstraint `json:"depotVehicle,omitempty"`
}

// NewCombinationConstraints instantiates a new CombinationConstraints object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCombinationConstraints() *CombinationConstraints {
	this := CombinationConstraints{}
	return &this
}

// NewCombinationConstraintsWithDefaults instantiates a new CombinationConstraints object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCombinationConstraintsWithDefaults() *CombinationConstraints {
	this := CombinationConstraints{}
	return &this
}

// GetOrderCompartment returns the OrderCompartment field value if set, zero value otherwise.
func (o *CombinationConstraints) GetOrderCompartment() []OrderCompartmentCombinationConstraint {
	if o == nil || IsNil(o.OrderCompartment) {
		var ret []OrderCompartmentCombinationConstraint
		return ret
	}
	return o.OrderCompartment
}

// GetOrderCompartmentOk returns a tuple with the OrderCompartment field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombinationConstraints) GetOrderCompartmentOk() ([]OrderCompartmentCombinationConstraint, bool) {
	if o == nil || IsNil(o.OrderCompartment) {
		return nil, false
	}
	return o.OrderCompartment, true
}

// HasOrderCompartment returns a boolean if a field has been set.
func (o *CombinationConstraints) HasOrderCompartment() bool {
	if o != nil && !IsNil(o.OrderCompartment) {
		return true
	}

	return false
}

// SetOrderCompartment gets a reference to the given []OrderCompartmentCombinationConstraint and assigns it to the OrderCompartment field.
func (o *CombinationConstraints) SetOrderCompartment(v []OrderCompartmentCombinationConstraint) {
	o.OrderCompartment = v
}

// GetOrderVehicle returns the OrderVehicle field value if set, zero value otherwise.
func (o *CombinationConstraints) GetOrderVehicle() []OrderVehicleCombinationConstraint {
	if o == nil || IsNil(o.OrderVehicle) {
		var ret []OrderVehicleCombinationConstraint
		return ret
	}
	return o.OrderVehicle
}

// GetOrderVehicleOk returns a tuple with the OrderVehicle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombinationConstraints) GetOrderVehicleOk() ([]OrderVehicleCombinationConstraint, bool) {
	if o == nil || IsNil(o.OrderVehicle) {
		return nil, false
	}
	return o.OrderVehicle, true
}

// HasOrderVehicle returns a boolean if a field has been set.
func (o *CombinationConstraints) HasOrderVehicle() bool {
	if o != nil && !IsNil(o.OrderVehicle) {
		return true
	}

	return false
}

// SetOrderVehicle gets a reference to the given []OrderVehicleCombinationConstraint and assigns it to the OrderVehicle field.
func (o *CombinationConstraints) SetOrderVehicle(v []OrderVehicleCombinationConstraint) {
	o.OrderVehicle = v
}

// GetOrderDepot returns the OrderDepot field value if set, zero value otherwise.
func (o *CombinationConstraints) GetOrderDepot() []OrderDepotCombinationConstraint {
	if o == nil || IsNil(o.OrderDepot) {
		var ret []OrderDepotCombinationConstraint
		return ret
	}
	return o.OrderDepot
}

// GetOrderDepotOk returns a tuple with the OrderDepot field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombinationConstraints) GetOrderDepotOk() ([]OrderDepotCombinationConstraint, bool) {
	if o == nil || IsNil(o.OrderDepot) {
		return nil, false
	}
	return o.OrderDepot, true
}

// HasOrderDepot returns a boolean if a field has been set.
func (o *CombinationConstraints) HasOrderDepot() bool {
	if o != nil && !IsNil(o.OrderDepot) {
		return true
	}

	return false
}

// SetOrderDepot gets a reference to the given []OrderDepotCombinationConstraint and assigns it to the OrderDepot field.
func (o *CombinationConstraints) SetOrderDepot(v []OrderDepotCombinationConstraint) {
	o.OrderDepot = v
}

// GetDepotVehicle returns the DepotVehicle field value if set, zero value otherwise.
func (o *CombinationConstraints) GetDepotVehicle() []DepotVehicleCombinationConstraint {
	if o == nil || IsNil(o.DepotVehicle) {
		var ret []DepotVehicleCombinationConstraint
		return ret
	}
	return o.DepotVehicle
}

// GetDepotVehicleOk returns a tuple with the DepotVehicle field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CombinationConstraints) GetDepotVehicleOk() ([]DepotVehicleCombinationConstraint, bool) {
	if o == nil || IsNil(o.DepotVehicle) {
		return nil, false
	}
	return o.DepotVehicle, true
}

// HasDepotVehicle returns a boolean if a field has been set.
func (o *CombinationConstraints) HasDepotVehicle() bool {
	if o != nil && !IsNil(o.DepotVehicle) {
		return true
	}

	return false
}

// SetDepotVehicle gets a reference to the given []DepotVehicleCombinationConstraint and assigns it to the DepotVehicle field.
func (o *CombinationConstraints) SetDepotVehicle(v []DepotVehicleCombinationConstraint) {
	o.DepotVehicle = v
}

func (o CombinationConstraints) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CombinationConstraints) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrderCompartment) {
		toSerialize["orderCompartment"] = o.OrderCompartment
	}
	if !IsNil(o.OrderVehicle) {
		toSerialize["orderVehicle"] = o.OrderVehicle
	}
	if !IsNil(o.OrderDepot) {
		toSerialize["orderDepot"] = o.OrderDepot
	}
	if !IsNil(o.DepotVehicle) {
		toSerialize["depotVehicle"] = o.DepotVehicle
	}
	return toSerialize, nil
}

type NullableCombinationConstraints struct {
	value *CombinationConstraints
	isSet bool
}

func (v NullableCombinationConstraints) Get() *CombinationConstraints {
	return v.value
}

func (v *NullableCombinationConstraints) Set(val *CombinationConstraints) {
	v.value = val
	v.isSet = true
}

func (v NullableCombinationConstraints) IsSet() bool {
	return v.isSet
}

func (v *NullableCombinationConstraints) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCombinationConstraints(val *CombinationConstraints) *NullableCombinationConstraints {
	return &NullableCombinationConstraints{value: val, isSet: true}
}

func (v NullableCombinationConstraints) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCombinationConstraints) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


