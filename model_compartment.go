/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.18
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the Compartment type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Compartment{}

// Compartment Defines a vehicle compartment available for loading orders.
type Compartment struct {
	// A unique identifier for the compartment, which must be distinct among all compartments within the same vehicle.
	Id string `json:"id" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	LoadingStrategy *CompartmentLoadingStrategy `json:"loadingStrategy,omitempty"`
	// A list of categories the compartment belongs to that can be used to describe constraints or rules.
	Categories []string `json:"categories,omitempty"`
}

type _Compartment Compartment

// NewCompartment instantiates a new Compartment object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCompartment(id string) *Compartment {
	this := Compartment{}
	this.Id = id
	var loadingStrategy CompartmentLoadingStrategy = NONE
	this.LoadingStrategy = &loadingStrategy
	return &this
}

// NewCompartmentWithDefaults instantiates a new Compartment object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCompartmentWithDefaults() *Compartment {
	this := Compartment{}
	var loadingStrategy CompartmentLoadingStrategy = NONE
	this.LoadingStrategy = &loadingStrategy
	return &this
}

// GetId returns the Id field value
func (o *Compartment) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Compartment) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Compartment) SetId(v string) {
	o.Id = v
}

// GetLoadingStrategy returns the LoadingStrategy field value if set, zero value otherwise.
func (o *Compartment) GetLoadingStrategy() CompartmentLoadingStrategy {
	if o == nil || IsNil(o.LoadingStrategy) {
		var ret CompartmentLoadingStrategy
		return ret
	}
	return *o.LoadingStrategy
}

// GetLoadingStrategyOk returns a tuple with the LoadingStrategy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Compartment) GetLoadingStrategyOk() (*CompartmentLoadingStrategy, bool) {
	if o == nil || IsNil(o.LoadingStrategy) {
		return nil, false
	}
	return o.LoadingStrategy, true
}

// HasLoadingStrategy returns a boolean if a field has been set.
func (o *Compartment) HasLoadingStrategy() bool {
	if o != nil && !IsNil(o.LoadingStrategy) {
		return true
	}

	return false
}

// SetLoadingStrategy gets a reference to the given CompartmentLoadingStrategy and assigns it to the LoadingStrategy field.
func (o *Compartment) SetLoadingStrategy(v CompartmentLoadingStrategy) {
	o.LoadingStrategy = &v
}

// GetCategories returns the Categories field value if set, zero value otherwise.
func (o *Compartment) GetCategories() []string {
	if o == nil || IsNil(o.Categories) {
		var ret []string
		return ret
	}
	return o.Categories
}

// GetCategoriesOk returns a tuple with the Categories field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Compartment) GetCategoriesOk() ([]string, bool) {
	if o == nil || IsNil(o.Categories) {
		return nil, false
	}
	return o.Categories, true
}

// HasCategories returns a boolean if a field has been set.
func (o *Compartment) HasCategories() bool {
	if o != nil && !IsNil(o.Categories) {
		return true
	}

	return false
}

// SetCategories gets a reference to the given []string and assigns it to the Categories field.
func (o *Compartment) SetCategories(v []string) {
	o.Categories = v
}

func (o Compartment) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Compartment) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["id"] = o.Id
	if !IsNil(o.LoadingStrategy) {
		toSerialize["loadingStrategy"] = o.LoadingStrategy
	}
	if !IsNil(o.Categories) {
		toSerialize["categories"] = o.Categories
	}
	return toSerialize, nil
}

func (o *Compartment) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"id",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varCompartment := _Compartment{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varCompartment)

	if err != nil {
		return err
	}

	*o = Compartment(varCompartment)

	return err
}

type NullableCompartment struct {
	value *Compartment
	isSet bool
}

func (v NullableCompartment) Get() *Compartment {
	return v.value
}

func (v *NullableCompartment) Set(val *Compartment) {
	v.value = val
	v.isSet = true
}

func (v NullableCompartment) IsSet() bool {
	return v.isSet
}

func (v *NullableCompartment) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCompartment(val *Compartment) *NullableCompartment {
	return &NullableCompartment{value: val, isSet: true}
}

func (v NullableCompartment) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCompartment) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


