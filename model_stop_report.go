/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"time"
	"bytes"
	"fmt"
)

// checks if the StopReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &StopReport{}

// StopReport A stop report contains a summary of the values of the events at a stop, including the arrival time, the departure time and the service time. It also contains information about the loaded quantities when leaving the current stop.
type StopReport struct {
	// The planned time of arrival at the stop formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
	ArrivalTime time.Time `json:"arrivalTime"`
	// The planned time of departure from the stop formatted according to [RFC 3339](https://tools.ietf.org/html/rfc3339).
	DepartureTime time.Time `json:"departureTime"`
	// The service time at the stop [s].
	ServiceTime int32 `json:"serviceTime"`
	// The waiting time at the stop [s].
	WaitingTime int32 `json:"waitingTime"`
	// The break time at the stop [s].
	BreakTime int32 `json:"breakTime"`
	// The rest time at the stop [s].
	RestTime int32 `json:"restTime"`
	// The quantities loaded on the vehicle when leaving the stop.
	Quantities []int32 `json:"quantities,omitempty"`
	// This field is only returned if the vehicle can transport the **quantities** loaded on the vehicle when leaving the stop with the given **capacities**. In this case this field contains the index of the chosen **alternativeCapacities**. If the route has at least one `VEHICLE_CAPACITY` violation this field will not be set.  See [here](./concepts/capacities-and-alternative-capacities) for more information.
	AlternativeCapacitiesIndex NullableInt32 `json:"alternativeCapacitiesIndex,omitempty"`
}

type _StopReport StopReport

// NewStopReport instantiates a new StopReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewStopReport(arrivalTime time.Time, departureTime time.Time, serviceTime int32, waitingTime int32, breakTime int32, restTime int32) *StopReport {
	this := StopReport{}
	this.ArrivalTime = arrivalTime
	this.DepartureTime = departureTime
	this.ServiceTime = serviceTime
	this.WaitingTime = waitingTime
	this.BreakTime = breakTime
	this.RestTime = restTime
	return &this
}

// NewStopReportWithDefaults instantiates a new StopReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewStopReportWithDefaults() *StopReport {
	this := StopReport{}
	return &this
}

// GetArrivalTime returns the ArrivalTime field value
func (o *StopReport) GetArrivalTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.ArrivalTime
}

// GetArrivalTimeOk returns a tuple with the ArrivalTime field value
// and a boolean to check if the value has been set.
func (o *StopReport) GetArrivalTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ArrivalTime, true
}

// SetArrivalTime sets field value
func (o *StopReport) SetArrivalTime(v time.Time) {
	o.ArrivalTime = v
}

// GetDepartureTime returns the DepartureTime field value
func (o *StopReport) GetDepartureTime() time.Time {
	if o == nil {
		var ret time.Time
		return ret
	}

	return o.DepartureTime
}

// GetDepartureTimeOk returns a tuple with the DepartureTime field value
// and a boolean to check if the value has been set.
func (o *StopReport) GetDepartureTimeOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DepartureTime, true
}

// SetDepartureTime sets field value
func (o *StopReport) SetDepartureTime(v time.Time) {
	o.DepartureTime = v
}

// GetServiceTime returns the ServiceTime field value
func (o *StopReport) GetServiceTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.ServiceTime
}

// GetServiceTimeOk returns a tuple with the ServiceTime field value
// and a boolean to check if the value has been set.
func (o *StopReport) GetServiceTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ServiceTime, true
}

// SetServiceTime sets field value
func (o *StopReport) SetServiceTime(v int32) {
	o.ServiceTime = v
}

// GetWaitingTime returns the WaitingTime field value
func (o *StopReport) GetWaitingTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WaitingTime
}

// GetWaitingTimeOk returns a tuple with the WaitingTime field value
// and a boolean to check if the value has been set.
func (o *StopReport) GetWaitingTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WaitingTime, true
}

// SetWaitingTime sets field value
func (o *StopReport) SetWaitingTime(v int32) {
	o.WaitingTime = v
}

// GetBreakTime returns the BreakTime field value
func (o *StopReport) GetBreakTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BreakTime
}

// GetBreakTimeOk returns a tuple with the BreakTime field value
// and a boolean to check if the value has been set.
func (o *StopReport) GetBreakTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BreakTime, true
}

// SetBreakTime sets field value
func (o *StopReport) SetBreakTime(v int32) {
	o.BreakTime = v
}

// GetRestTime returns the RestTime field value
func (o *StopReport) GetRestTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RestTime
}

// GetRestTimeOk returns a tuple with the RestTime field value
// and a boolean to check if the value has been set.
func (o *StopReport) GetRestTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestTime, true
}

// SetRestTime sets field value
func (o *StopReport) SetRestTime(v int32) {
	o.RestTime = v
}

// GetQuantities returns the Quantities field value if set, zero value otherwise.
func (o *StopReport) GetQuantities() []int32 {
	if o == nil || IsNil(o.Quantities) {
		var ret []int32
		return ret
	}
	return o.Quantities
}

// GetQuantitiesOk returns a tuple with the Quantities field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *StopReport) GetQuantitiesOk() ([]int32, bool) {
	if o == nil || IsNil(o.Quantities) {
		return nil, false
	}
	return o.Quantities, true
}

// HasQuantities returns a boolean if a field has been set.
func (o *StopReport) HasQuantities() bool {
	if o != nil && !IsNil(o.Quantities) {
		return true
	}

	return false
}

// SetQuantities gets a reference to the given []int32 and assigns it to the Quantities field.
func (o *StopReport) SetQuantities(v []int32) {
	o.Quantities = v
}

// GetAlternativeCapacitiesIndex returns the AlternativeCapacitiesIndex field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *StopReport) GetAlternativeCapacitiesIndex() int32 {
	if o == nil || IsNil(o.AlternativeCapacitiesIndex.Get()) {
		var ret int32
		return ret
	}
	return *o.AlternativeCapacitiesIndex.Get()
}

// GetAlternativeCapacitiesIndexOk returns a tuple with the AlternativeCapacitiesIndex field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *StopReport) GetAlternativeCapacitiesIndexOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return o.AlternativeCapacitiesIndex.Get(), o.AlternativeCapacitiesIndex.IsSet()
}

// HasAlternativeCapacitiesIndex returns a boolean if a field has been set.
func (o *StopReport) HasAlternativeCapacitiesIndex() bool {
	if o != nil && o.AlternativeCapacitiesIndex.IsSet() {
		return true
	}

	return false
}

// SetAlternativeCapacitiesIndex gets a reference to the given NullableInt32 and assigns it to the AlternativeCapacitiesIndex field.
func (o *StopReport) SetAlternativeCapacitiesIndex(v int32) {
	o.AlternativeCapacitiesIndex.Set(&v)
}
// SetAlternativeCapacitiesIndexNil sets the value for AlternativeCapacitiesIndex to be an explicit nil
func (o *StopReport) SetAlternativeCapacitiesIndexNil() {
	o.AlternativeCapacitiesIndex.Set(nil)
}

// UnsetAlternativeCapacitiesIndex ensures that no value is present for AlternativeCapacitiesIndex, not even an explicit nil
func (o *StopReport) UnsetAlternativeCapacitiesIndex() {
	o.AlternativeCapacitiesIndex.Unset()
}

func (o StopReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o StopReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["arrivalTime"] = o.ArrivalTime
	toSerialize["departureTime"] = o.DepartureTime
	toSerialize["serviceTime"] = o.ServiceTime
	toSerialize["waitingTime"] = o.WaitingTime
	toSerialize["breakTime"] = o.BreakTime
	toSerialize["restTime"] = o.RestTime
	if !IsNil(o.Quantities) {
		toSerialize["quantities"] = o.Quantities
	}
	if o.AlternativeCapacitiesIndex.IsSet() {
		toSerialize["alternativeCapacitiesIndex"] = o.AlternativeCapacitiesIndex.Get()
	}
	return toSerialize, nil
}

func (o *StopReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"arrivalTime",
		"departureTime",
		"serviceTime",
		"waitingTime",
		"breakTime",
		"restTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varStopReport := _StopReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varStopReport)

	if err != nil {
		return err
	}

	*o = StopReport(varStopReport)

	return err
}

type NullableStopReport struct {
	value *StopReport
	isSet bool
}

func (v NullableStopReport) Get() *StopReport {
	return v.value
}

func (v *NullableStopReport) Set(val *StopReport) {
	v.value = val
	v.isSet = true
}

func (v NullableStopReport) IsSet() bool {
	return v.isSet
}

func (v *NullableStopReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStopReport(val *StopReport) *NullableStopReport {
	return &NullableStopReport{value: val, isSet: true}
}

func (v NullableStopReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStopReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


