/*
Route Optimization

With the Route Optimization service you can schedule and optimize the routes of your fleet.

API version: 1.11
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package optiflow

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the WayReport type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &WayReport{}

// WayReport A way report contains a summary of the values of the events on the way from the previous stop to the current stop, including the driving time. The very first stop of a route has a way report with empty values.
type WayReport struct {
	// The driving distance from the previous stop to this stop [m].
	Distance int32 `json:"distance"`
	// The driving time from the previous stop to this stop [s].
	DrivingTime int32 `json:"drivingTime"`
	// The sum of waiting times between the departure from the previous stop and the arrival at this stop [s].
	WaitingTime int32 `json:"waitingTime"`
	// The sum of break times between the departure from the previous stop and the arrival at this stop [s].
	BreakTime int32 `json:"breakTime"`
	// The sum of rest times between the departure from the previous stop and the arrival at this stop [s].
	RestTime int32 `json:"restTime"`
}

type _WayReport WayReport

// NewWayReport instantiates a new WayReport object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewWayReport(distance int32, drivingTime int32, waitingTime int32, breakTime int32, restTime int32) *WayReport {
	this := WayReport{}
	this.Distance = distance
	this.DrivingTime = drivingTime
	this.WaitingTime = waitingTime
	this.BreakTime = breakTime
	this.RestTime = restTime
	return &this
}

// NewWayReportWithDefaults instantiates a new WayReport object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewWayReportWithDefaults() *WayReport {
	this := WayReport{}
	return &this
}

// GetDistance returns the Distance field value
func (o *WayReport) GetDistance() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value
// and a boolean to check if the value has been set.
func (o *WayReport) GetDistanceOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Distance, true
}

// SetDistance sets field value
func (o *WayReport) SetDistance(v int32) {
	o.Distance = v
}

// GetDrivingTime returns the DrivingTime field value
func (o *WayReport) GetDrivingTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.DrivingTime
}

// GetDrivingTimeOk returns a tuple with the DrivingTime field value
// and a boolean to check if the value has been set.
func (o *WayReport) GetDrivingTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DrivingTime, true
}

// SetDrivingTime sets field value
func (o *WayReport) SetDrivingTime(v int32) {
	o.DrivingTime = v
}

// GetWaitingTime returns the WaitingTime field value
func (o *WayReport) GetWaitingTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.WaitingTime
}

// GetWaitingTimeOk returns a tuple with the WaitingTime field value
// and a boolean to check if the value has been set.
func (o *WayReport) GetWaitingTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.WaitingTime, true
}

// SetWaitingTime sets field value
func (o *WayReport) SetWaitingTime(v int32) {
	o.WaitingTime = v
}

// GetBreakTime returns the BreakTime field value
func (o *WayReport) GetBreakTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.BreakTime
}

// GetBreakTimeOk returns a tuple with the BreakTime field value
// and a boolean to check if the value has been set.
func (o *WayReport) GetBreakTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.BreakTime, true
}

// SetBreakTime sets field value
func (o *WayReport) SetBreakTime(v int32) {
	o.BreakTime = v
}

// GetRestTime returns the RestTime field value
func (o *WayReport) GetRestTime() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.RestTime
}

// GetRestTimeOk returns a tuple with the RestTime field value
// and a boolean to check if the value has been set.
func (o *WayReport) GetRestTimeOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RestTime, true
}

// SetRestTime sets field value
func (o *WayReport) SetRestTime(v int32) {
	o.RestTime = v
}

func (o WayReport) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o WayReport) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["distance"] = o.Distance
	toSerialize["drivingTime"] = o.DrivingTime
	toSerialize["waitingTime"] = o.WaitingTime
	toSerialize["breakTime"] = o.BreakTime
	toSerialize["restTime"] = o.RestTime
	return toSerialize, nil
}

func (o *WayReport) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"distance",
		"drivingTime",
		"waitingTime",
		"breakTime",
		"restTime",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varWayReport := _WayReport{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varWayReport)

	if err != nil {
		return err
	}

	*o = WayReport(varWayReport)

	return err
}

type NullableWayReport struct {
	value *WayReport
	isSet bool
}

func (v NullableWayReport) Get() *WayReport {
	return v.value
}

func (v *NullableWayReport) Set(val *WayReport) {
	v.value = val
	v.isSet = true
}

func (v NullableWayReport) IsSet() bool {
	return v.isSet
}

func (v *NullableWayReport) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableWayReport(val *WayReport) *NullableWayReport {
	return &NullableWayReport{value: val, isSet: true}
}

func (v NullableWayReport) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableWayReport) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


