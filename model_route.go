/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.10
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Route type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Route{}

// Route A route is a sequence of tasks assigned to a vehicle.
type Route struct {
	// The unique identifier of the vehicle assigned to the route.
	VehicleId *string `json:"vehicleId,omitempty" validate:"regexp=^[a-zA-Z0-9_-]{1,36}$"`
	Start *RouteStart `json:"start,omitempty"`
	// The list of stops scheduled on the route. A stop describes the visit of a location on a route where one or more tasks are scheduled. Its approach describes how to reach the location from the previous location visited on the route. Consecutive tasks are grouped to an appointment if they are assigned to the same time slot. Consecutive appointments are grouped as a stop if they are scheduled at the same location.
	Stops []Stop `json:"stops,omitempty"`
	End *RouteEnd `json:"end,omitempty"`
	Metrics *RouteMetrics `json:"metrics,omitempty"`
}

// NewRoute instantiates a new Route object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRoute() *Route {
	this := Route{}
	return &this
}

// NewRouteWithDefaults instantiates a new Route object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRouteWithDefaults() *Route {
	this := Route{}
	return &this
}

// GetVehicleId returns the VehicleId field value if set, zero value otherwise.
func (o *Route) GetVehicleId() string {
	if o == nil || IsNil(o.VehicleId) {
		var ret string
		return ret
	}
	return *o.VehicleId
}

// GetVehicleIdOk returns a tuple with the VehicleId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetVehicleIdOk() (*string, bool) {
	if o == nil || IsNil(o.VehicleId) {
		return nil, false
	}
	return o.VehicleId, true
}

// HasVehicleId returns a boolean if a field has been set.
func (o *Route) HasVehicleId() bool {
	if o != nil && !IsNil(o.VehicleId) {
		return true
	}

	return false
}

// SetVehicleId gets a reference to the given string and assigns it to the VehicleId field.
func (o *Route) SetVehicleId(v string) {
	o.VehicleId = &v
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *Route) GetStart() RouteStart {
	if o == nil || IsNil(o.Start) {
		var ret RouteStart
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetStartOk() (*RouteStart, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Route) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given RouteStart and assigns it to the Start field.
func (o *Route) SetStart(v RouteStart) {
	o.Start = &v
}

// GetStops returns the Stops field value if set, zero value otherwise.
func (o *Route) GetStops() []Stop {
	if o == nil || IsNil(o.Stops) {
		var ret []Stop
		return ret
	}
	return o.Stops
}

// GetStopsOk returns a tuple with the Stops field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetStopsOk() ([]Stop, bool) {
	if o == nil || IsNil(o.Stops) {
		return nil, false
	}
	return o.Stops, true
}

// HasStops returns a boolean if a field has been set.
func (o *Route) HasStops() bool {
	if o != nil && !IsNil(o.Stops) {
		return true
	}

	return false
}

// SetStops gets a reference to the given []Stop and assigns it to the Stops field.
func (o *Route) SetStops(v []Stop) {
	o.Stops = v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *Route) GetEnd() RouteEnd {
	if o == nil || IsNil(o.End) {
		var ret RouteEnd
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetEndOk() (*RouteEnd, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Route) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given RouteEnd and assigns it to the End field.
func (o *Route) SetEnd(v RouteEnd) {
	o.End = &v
}

// GetMetrics returns the Metrics field value if set, zero value otherwise.
func (o *Route) GetMetrics() RouteMetrics {
	if o == nil || IsNil(o.Metrics) {
		var ret RouteMetrics
		return ret
	}
	return *o.Metrics
}

// GetMetricsOk returns a tuple with the Metrics field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Route) GetMetricsOk() (*RouteMetrics, bool) {
	if o == nil || IsNil(o.Metrics) {
		return nil, false
	}
	return o.Metrics, true
}

// HasMetrics returns a boolean if a field has been set.
func (o *Route) HasMetrics() bool {
	if o != nil && !IsNil(o.Metrics) {
		return true
	}

	return false
}

// SetMetrics gets a reference to the given RouteMetrics and assigns it to the Metrics field.
func (o *Route) SetMetrics(v RouteMetrics) {
	o.Metrics = &v
}

func (o Route) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Route) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.VehicleId) {
		toSerialize["vehicleId"] = o.VehicleId
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.Stops) {
		toSerialize["stops"] = o.Stops
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Metrics) {
		toSerialize["metrics"] = o.Metrics
	}
	return toSerialize, nil
}

type NullableRoute struct {
	value *Route
	isSet bool
}

func (v NullableRoute) Get() *Route {
	return v.value
}

func (v *NullableRoute) Set(val *Route) {
	v.value = val
	v.isSet = true
}

func (v NullableRoute) IsSet() bool {
	return v.isSet
}

func (v *NullableRoute) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRoute(val *Route) *NullableRoute {
	return &NullableRoute{value: val, isSet: true}
}

func (v NullableRoute) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRoute) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


