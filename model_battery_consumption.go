/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.31
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the BatteryConsumption type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &BatteryConsumption{}

// BatteryConsumption Describes the consumption rate of the vehicle battery.
type BatteryConsumption struct {
	// Describes the kWh consumed by driving 100km.
	PerHundredKilometers float64 `json:"perHundredKilometers"`
}

type _BatteryConsumption BatteryConsumption

// NewBatteryConsumption instantiates a new BatteryConsumption object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewBatteryConsumption(perHundredKilometers float64) *BatteryConsumption {
	this := BatteryConsumption{}
	this.PerHundredKilometers = perHundredKilometers
	return &this
}

// NewBatteryConsumptionWithDefaults instantiates a new BatteryConsumption object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewBatteryConsumptionWithDefaults() *BatteryConsumption {
	this := BatteryConsumption{}
	return &this
}

// GetPerHundredKilometers returns the PerHundredKilometers field value
func (o *BatteryConsumption) GetPerHundredKilometers() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.PerHundredKilometers
}

// GetPerHundredKilometersOk returns a tuple with the PerHundredKilometers field value
// and a boolean to check if the value has been set.
func (o *BatteryConsumption) GetPerHundredKilometersOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.PerHundredKilometers, true
}

// SetPerHundredKilometers sets field value
func (o *BatteryConsumption) SetPerHundredKilometers(v float64) {
	o.PerHundredKilometers = v
}

func (o BatteryConsumption) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o BatteryConsumption) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["perHundredKilometers"] = o.PerHundredKilometers
	return toSerialize, nil
}

func (o *BatteryConsumption) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"perHundredKilometers",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varBatteryConsumption := _BatteryConsumption{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varBatteryConsumption)

	if err != nil {
		return err
	}

	*o = BatteryConsumption(varBatteryConsumption)

	return err
}

type NullableBatteryConsumption struct {
	value *BatteryConsumption
	isSet bool
}

func (v NullableBatteryConsumption) Get() *BatteryConsumption {
	return v.value
}

func (v *NullableBatteryConsumption) Set(val *BatteryConsumption) {
	v.value = val
	v.isSet = true
}

func (v NullableBatteryConsumption) IsSet() bool {
	return v.isSet
}

func (v *NullableBatteryConsumption) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableBatteryConsumption(val *BatteryConsumption) *NullableBatteryConsumption {
	return &NullableBatteryConsumption{value: val, isSet: true}
}

func (v NullableBatteryConsumption) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableBatteryConsumption) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


