/*
Route Optimization OptiFlow

With the Route Optimization OptiFlow service you can schedule and optimize the routes of your fleet.

API version: 1.21
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DurationModifier type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DurationModifier{}

// DurationModifier The modifications that should be made to the duration. At least one property should be provided.
type DurationModifier struct {
	// The factor that should be applied to the original duration before any extra durations are added. If multiple rules apply, their factors are multiplied.
	Factor *float64 `json:"factor,omitempty"`
	// The extra duration [s] that should be added. If multiple rules apply, their extra durations are added.
	Extra *int32 `json:"extra,omitempty"`
}

// NewDurationModifier instantiates a new DurationModifier object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDurationModifier() *DurationModifier {
	this := DurationModifier{}
	var factor float64 = 1
	this.Factor = &factor
	var extra int32 = 0
	this.Extra = &extra
	return &this
}

// NewDurationModifierWithDefaults instantiates a new DurationModifier object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDurationModifierWithDefaults() *DurationModifier {
	this := DurationModifier{}
	var factor float64 = 1
	this.Factor = &factor
	var extra int32 = 0
	this.Extra = &extra
	return &this
}

// GetFactor returns the Factor field value if set, zero value otherwise.
func (o *DurationModifier) GetFactor() float64 {
	if o == nil || IsNil(o.Factor) {
		var ret float64
		return ret
	}
	return *o.Factor
}

// GetFactorOk returns a tuple with the Factor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DurationModifier) GetFactorOk() (*float64, bool) {
	if o == nil || IsNil(o.Factor) {
		return nil, false
	}
	return o.Factor, true
}

// HasFactor returns a boolean if a field has been set.
func (o *DurationModifier) HasFactor() bool {
	if o != nil && !IsNil(o.Factor) {
		return true
	}

	return false
}

// SetFactor gets a reference to the given float64 and assigns it to the Factor field.
func (o *DurationModifier) SetFactor(v float64) {
	o.Factor = &v
}

// GetExtra returns the Extra field value if set, zero value otherwise.
func (o *DurationModifier) GetExtra() int32 {
	if o == nil || IsNil(o.Extra) {
		var ret int32
		return ret
	}
	return *o.Extra
}

// GetExtraOk returns a tuple with the Extra field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DurationModifier) GetExtraOk() (*int32, bool) {
	if o == nil || IsNil(o.Extra) {
		return nil, false
	}
	return o.Extra, true
}

// HasExtra returns a boolean if a field has been set.
func (o *DurationModifier) HasExtra() bool {
	if o != nil && !IsNil(o.Extra) {
		return true
	}

	return false
}

// SetExtra gets a reference to the given int32 and assigns it to the Extra field.
func (o *DurationModifier) SetExtra(v int32) {
	o.Extra = &v
}

func (o DurationModifier) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DurationModifier) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Factor) {
		toSerialize["factor"] = o.Factor
	}
	if !IsNil(o.Extra) {
		toSerialize["extra"] = o.Extra
	}
	return toSerialize, nil
}

type NullableDurationModifier struct {
	value *DurationModifier
	isSet bool
}

func (v NullableDurationModifier) Get() *DurationModifier {
	return v.value
}

func (v *NullableDurationModifier) Set(val *DurationModifier) {
	v.value = val
	v.isSet = true
}

func (v NullableDurationModifier) IsSet() bool {
	return v.isSet
}

func (v *NullableDurationModifier) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDurationModifier(val *DurationModifier) *NullableDurationModifier {
	return &NullableDurationModifier{value: val, isSet: true}
}

func (v NullableDurationModifier) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDurationModifier) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


